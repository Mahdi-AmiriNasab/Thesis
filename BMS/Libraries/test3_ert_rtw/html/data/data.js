var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"test3","ref":false,"files":[{"name":"test3.c","type":"source","group":"model","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: test3.c\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"test3.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"test3_private.h\"\r\n#include \"test3_types.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include \"RCTcc.h\"\r\n#include <math.h>\r\n#define te_IN_OverDischargeCurrentFault (3U)\r\n#define te_IN_PreCharge_UnderVolt_Fault (3U)\r\n#define test3_IN_BMBFault              (1U)\r\n#define test3_IN_BalActive             (1U)\r\n#define test3_IN_BalActive1            (2U)\r\n#define test3_IN_BalNotActive          (3U)\r\n#define test3_IN_BalancingOFF          (1U)\r\n#define test3_IN_BalancingON           (2U)\r\n#define test3_IN_CAN_VCU_Fault         (2U)\r\n#define test3_IN_CC_Mode               (1U)\r\n#define test3_IN_CV_Mode               (2U)\r\n#define test3_IN_Charginig             (1U)\r\n#define test3_IN_CloseChgrContactors   (1U)\r\n#define test3_IN_CloseInvtrContactors  (1U)\r\n#define test3_IN_CloseNegCntct         (1U)\r\n#define test3_IN_ClosePosCntct         (2U)\r\n#define test3_IN_ClosePreChrgRly       (1U)\r\n#define test3_IN_ClosePreChrgRly_k     (3U)\r\n#define test3_IN_Driving               (2U)\r\n#define test3_IN_FastCharge_Mode       (3U)\r\n#define test3_IN_Fault                 (3U)\r\n#define test3_IN_HighTemperatureFault  (1U)\r\n#define test3_IN_Init_Mode             (4U)\r\n#define test3_IN_InputPowerFault       (3U)\r\n#define test3_IN_LowSOC                (4U)\r\n#define test3_IN_LowTemperatureFault   (2U)\r\n#define test3_IN_MSG_Absent            (1U)\r\n#define test3_IN_MSG_Present           (2U)\r\n#define test3_IN_MemoryFault           (5U)\r\n#define test3_IN_NO_ACTIVE_CHILD_k     (0U)\r\n#define test3_IN_NoCellTempFault       (3U)\r\n#define test3_IN_NoCellVoltFault       (1U)\r\n#define test3_IN_NoCurrLimFault        (1U)\r\n#define test3_IN_NoInputFault          (6U)\r\n#define test3_IN_OpenChgrContactors    (2U)\r\n#define test3_IN_OpenInvtrContactors   (2U)\r\n#define test3_IN_OpenNegCntct          (2U)\r\n#define test3_IN_OpenPosCntct          (3U)\r\n#define test3_IN_OpenPos_NegCntct1     (4U)\r\n#define test3_IN_OpenPreChrgRly        (5U)\r\n#define test3_IN_OpenPreChrgRly_k      (4U)\r\n#define test3_IN_OverChargeCurrentFault (2U)\r\n#define test3_IN_OverVoltageFault      (2U)\r\n#define test3_IN_Personal_Mode         (5U)\r\n#define test3_IN_Personal_Mode1        (6U)\r\n#define test3_IN_PreChargeFaultCheck   (7U)\r\n#define test3_IN_PreCharge_Mode        (8U)\r\n#define test3_IN_Ready                 (6U)\r\n#define test3_IN_SOC_Detect            (9U)\r\n#define test3_IN_STEP1                 (1U)\r\n#define test3_IN_SensorFaut            (7U)\r\n#define test3_IN_ShortCircuitFault     (8U)\r\n#define test3_IN_Standby               (4U)\r\n#define test3_IN_Static_Absent         (1U)\r\n#define test3_IN_Static_present        (2U)\r\n#define test3_IN_UnderVoltageFault     (4U)\r\n#define test3_IN_pre_Absent            (2U)\r\n#define test3_IN_pre_present           (2U)\r\n#define test3_IN_step1                 (1U)\r\n#define test3_IN_step2                 (2U)\r\n#define test3_IN_test                  (1U)\r\n#define test3_IN_test1                 (2U)\r\n\r\n/* Block signals (default storage) */\r\nB_test3_T test3_B;\r\n\r\n/* Block states (default storage) */\r\nDW_test3_T test3_DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU_test3_T test3_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY_test3_T test3_Y;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_test3_T test3_M_;\r\nRT_MODEL_test3_T *const test3_M = &test3_M_;\r\n\r\n/* Forward declaration for local functions */\r\nstatic void test3_CC_Mode(void);\r\nstatic void test3_FastCharge_Mode(void);\r\nstatic void test3_exit_internal_Charginig(void);\r\nstatic void test3_Charginig(void);\r\nstatic void test3_FaultMonitoring(void);\r\nstatic void test3_ChargerContactorState(void);\r\nstatic void test3_InverterContactorState(void);\r\nstatic void test3_Balancing(const real32_T TmpSignalConversionAtSFunctionI[96]);\r\nstatic void test3_enter_internal_Main(void);\r\nstatic void test3_Main(const real32_T TmpSignalConversionAtSFunctio_g[16], const\r\n  real32_T TmpSignalConversionAtSFunctionI[96]);\r\nreal32_T look1_iflf_binlxpw(real32_T u0, const real32_T bp0[], const real32_T\r\n  table[], uint32_T maxIndex)\r\n{\r\n  real32_T frac;\r\n  real32_T yL_0d0;\r\n  uint32_T bpIdx;\r\n  uint32_T iLeft;\r\n  uint32_T iRght;\r\n\r\n  /* Column-major Lookup 1-D\r\n     Search method: 'binary'\r\n     Use previous index: 'off'\r\n     Interpolation method: 'Linear point-slope'\r\n     Extrapolation method: 'Linear'\r\n     Use last breakpoint for index at or above upper limit: 'off'\r\n     Remove protection against out-of-range input in generated code: 'off'\r\n   */\r\n  /* Prelookup - Index and Fraction\r\n     Index Search method: 'binary'\r\n     Extrapolation method: 'Linear'\r\n     Use previous index: 'off'\r\n     Use last breakpoint for index at or above upper limit: 'off'\r\n     Remove protection against out-of-range input in generated code: 'off'\r\n   */\r\n  if (u0 <= bp0[0UL]) {\r\n    iLeft = 0UL;\r\n    frac = (u0 - bp0[0UL]) / (bp0[1UL] - bp0[0UL]);\r\n  } else if (u0 < bp0[maxIndex]) {\r\n    /* Binary Search */\r\n    bpIdx = maxIndex >> 1UL;\r\n    iLeft = 0UL;\r\n    iRght = maxIndex;\r\n    while (iRght - iLeft > 1UL) {\r\n      if (u0 < bp0[bpIdx]) {\r\n        iRght = bpIdx;\r\n      } else {\r\n        iLeft = bpIdx;\r\n      }\r\n\r\n      bpIdx = (iRght + iLeft) >> 1UL;\r\n    }\r\n\r\n    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1UL] - bp0[iLeft]);\r\n  } else {\r\n    iLeft = maxIndex - 1UL;\r\n    frac = (u0 - bp0[maxIndex - 1UL]) / (bp0[maxIndex] - bp0[maxIndex - 1UL]);\r\n  }\r\n\r\n  /* Column-major Interpolation 1-D\r\n     Interpolation method: 'Linear point-slope'\r\n     Use last breakpoint for index at or above upper limit: 'off'\r\n     Overflow mode: 'portable wrapping'\r\n   */\r\n  yL_0d0 = table[iLeft];\r\n  return (table[iLeft + 1UL] - yL_0d0) * frac + yL_0d0;\r\n}\r\n\r\nreal32_T look2_iflf_pbinlcpw(real32_T u0, real32_T u1, const real32_T bp0[],\r\n  const real32_T bp1[], const real32_T table[], uint32_T prevIndex[], const\r\n  uint32_T maxIndex[], uint32_T stride)\r\n{\r\n  real32_T fractions[2];\r\n  real32_T frac;\r\n  real32_T yL_0d0;\r\n  real32_T yL_0d1;\r\n  uint32_T bpIndices[2];\r\n  uint32_T bpIdx;\r\n  uint32_T found;\r\n  uint32_T iLeft;\r\n  uint32_T iRght;\r\n\r\n  /* Column-major Lookup 2-D\r\n     Search method: 'binary'\r\n     Use previous index: 'on'\r\n     Interpolation method: 'Linear point-slope'\r\n     Extrapolation method: 'Clip'\r\n     Use last breakpoint for index at or above upper limit: 'off'\r\n     Remove protection against out-of-range input in generated code: 'off'\r\n   */\r\n  /* Prelookup - Index and Fraction\r\n     Index Search method: 'binary'\r\n     Extrapolation method: 'Clip'\r\n     Use previous index: 'on'\r\n     Use last breakpoint for index at or above upper limit: 'off'\r\n     Remove protection against out-of-range input in generated code: 'off'\r\n   */\r\n  if (u0 <= bp0[0UL]) {\r\n    bpIdx = 0UL;\r\n    frac = 0.0F;\r\n  } else if (u0 < bp0[maxIndex[0UL]]) {\r\n    /* Binary Search using Previous Index */\r\n    bpIdx = prevIndex[0UL];\r\n    iLeft = 0UL;\r\n    iRght = maxIndex[0UL];\r\n    found = 0UL;\r\n    while (found == 0UL) {\r\n      if (u0 < bp0[bpIdx]) {\r\n        iRght = bpIdx - 1UL;\r\n        bpIdx = ((bpIdx + iLeft) - 1UL) >> 1UL;\r\n      } else if (u0 < bp0[bpIdx + 1UL]) {\r\n        found = 1UL;\r\n      } else {\r\n        iLeft = bpIdx + 1UL;\r\n        bpIdx = ((bpIdx + iRght) + 1UL) >> 1UL;\r\n      }\r\n    }\r\n\r\n    frac = (u0 - bp0[bpIdx]) / (bp0[bpIdx + 1UL] - bp0[bpIdx]);\r\n  } else {\r\n    bpIdx = maxIndex[0UL] - 1UL;\r\n    frac = 1.0F;\r\n  }\r\n\r\n  prevIndex[0UL] = bpIdx;\r\n  fractions[0UL] = frac;\r\n  bpIndices[0UL] = bpIdx;\r\n\r\n  /* Prelookup - Index and Fraction\r\n     Index Search method: 'binary'\r\n     Extrapolation method: 'Clip'\r\n     Use previous index: 'on'\r\n     Use last breakpoint for index at or above upper limit: 'off'\r\n     Remove protection against out-of-range input in generated code: 'off'\r\n   */\r\n  if (u1 <= bp1[0UL]) {\r\n    bpIdx = 0UL;\r\n    frac = 0.0F;\r\n  } else if (u1 < bp1[maxIndex[1UL]]) {\r\n    /* Binary Search using Previous Index */\r\n    bpIdx = prevIndex[1UL];\r\n    iLeft = 0UL;\r\n    iRght = maxIndex[1UL];\r\n    found = 0UL;\r\n    while (found == 0UL) {\r\n      if (u1 < bp1[bpIdx]) {\r\n        iRght = bpIdx - 1UL;\r\n        bpIdx = ((bpIdx + iLeft) - 1UL) >> 1UL;\r\n      } else if (u1 < bp1[bpIdx + 1UL]) {\r\n        found = 1UL;\r\n      } else {\r\n        iLeft = bpIdx + 1UL;\r\n        bpIdx = ((bpIdx + iRght) + 1UL) >> 1UL;\r\n      }\r\n    }\r\n\r\n    frac = (u1 - bp1[bpIdx]) / (bp1[bpIdx + 1UL] - bp1[bpIdx]);\r\n  } else {\r\n    bpIdx = maxIndex[1UL] - 1UL;\r\n    frac = 1.0F;\r\n  }\r\n\r\n  prevIndex[1UL] = bpIdx;\r\n\r\n  /* Column-major Interpolation 2-D\r\n     Interpolation method: 'Linear point-slope'\r\n     Use last breakpoint for index at or above upper limit: 'off'\r\n     Overflow mode: 'portable wrapping'\r\n   */\r\n  iLeft = bpIdx * stride + bpIndices[0UL];\r\n  yL_0d0 = table[iLeft];\r\n  yL_0d0 += (table[iLeft + 1UL] - yL_0d0) * fractions[0UL];\r\n  iLeft += stride;\r\n  yL_0d1 = table[iLeft];\r\n  return (((table[iLeft + 1UL] - yL_0d1) * fractions[0UL] + yL_0d1) - yL_0d0) *\r\n    frac + yL_0d0;\r\n}\r\n\r\nreal32_T look1_iflf_pbinlcpw(real32_T u0, const real32_T bp0[], const real32_T\r\n  table[], uint32_T prevIndex[], uint32_T maxIndex)\r\n{\r\n  real32_T frac;\r\n  real32_T yL_0d0;\r\n  uint32_T bpIdx;\r\n  uint32_T found;\r\n  uint32_T iLeft;\r\n  uint32_T iRght;\r\n\r\n  /* Column-major Lookup 1-D\r\n     Search method: 'binary'\r\n     Use previous index: 'on'\r\n     Interpolation method: 'Linear point-slope'\r\n     Extrapolation method: 'Clip'\r\n     Use last breakpoint for index at or above upper limit: 'off'\r\n     Remove protection against out-of-range input in generated code: 'off'\r\n   */\r\n  /* Prelookup - Index and Fraction\r\n     Index Search method: 'binary'\r\n     Extrapolation method: 'Clip'\r\n     Use previous index: 'on'\r\n     Use last breakpoint for index at or above upper limit: 'off'\r\n     Remove protection against out-of-range input in generated code: 'off'\r\n   */\r\n  if (u0 <= bp0[0UL]) {\r\n    bpIdx = 0UL;\r\n    frac = 0.0F;\r\n  } else if (u0 < bp0[maxIndex]) {\r\n    /* Binary Search using Previous Index */\r\n    bpIdx = prevIndex[0UL];\r\n    iLeft = 0UL;\r\n    iRght = maxIndex;\r\n    found = 0UL;\r\n    while (found == 0UL) {\r\n      if (u0 < bp0[bpIdx]) {\r\n        iRght = bpIdx - 1UL;\r\n        bpIdx = ((bpIdx + iLeft) - 1UL) >> 1UL;\r\n      } else if (u0 < bp0[bpIdx + 1UL]) {\r\n        found = 1UL;\r\n      } else {\r\n        iLeft = bpIdx + 1UL;\r\n        bpIdx = ((bpIdx + iRght) + 1UL) >> 1UL;\r\n      }\r\n    }\r\n\r\n    frac = (u0 - bp0[bpIdx]) / (bp0[bpIdx + 1UL] - bp0[bpIdx]);\r\n  } else {\r\n    bpIdx = maxIndex - 1UL;\r\n    frac = 1.0F;\r\n  }\r\n\r\n  prevIndex[0UL] = bpIdx;\r\n\r\n  /* Column-major Interpolation 1-D\r\n     Interpolation method: 'Linear point-slope'\r\n     Use last breakpoint for index at or above upper limit: 'off'\r\n     Overflow mode: 'portable wrapping'\r\n   */\r\n  yL_0d0 = table[bpIdx];\r\n  return (table[bpIdx + 1UL] - yL_0d0) * frac + yL_0d0;\r\n}\r\n\r\n/*\r\n * System initialize for atomic system:\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *    ...\r\n */\r\nvoid test3_MovingAverage_Init(DW_MovingAverage_test3_T *localDW)\r\n{\r\n  g_dsp_internal_SlidingWindowA_T *iobj_0;\r\n\r\n  /* Start for MATLABSystem: '<Root>/Moving Average' */\r\n  localDW->obj.matlabCodegenIsDeleted = true;\r\n  localDW->obj.isInitialized = 0L;\r\n  localDW->obj.NumChannels = -1L;\r\n  localDW->obj.matlabCodegenIsDeleted = false;\r\n  localDW->objisempty = true;\r\n  localDW->obj.isSetupComplete = false;\r\n  localDW->obj.isInitialized = 1L;\r\n  localDW->obj.NumChannels = 1L;\r\n  localDW->obj._pobj0.isInitialized = 0L;\r\n  localDW->obj._pobj0.isInitialized = 0L;\r\n  localDW->obj.pStatistic = &localDW->obj._pobj0;\r\n  localDW->obj.isSetupComplete = true;\r\n  localDW->obj.TunablePropsChanged = false;\r\n\r\n  /* InitializeConditions for MATLABSystem: '<Root>/Moving Average' */\r\n  iobj_0 = localDW->obj.pStatistic;\r\n  if (iobj_0->isInitialized == 1L) {\r\n    iobj_0->pCumSum = 0.0F;\r\n    iobj_0->pCumSumRev[0] = 0.0F;\r\n    iobj_0->pCumSumRev[1] = 0.0F;\r\n    iobj_0->pCumSumRev[2] = 0.0F;\r\n    iobj_0->pCumRevIndex = 1.0F;\r\n    iobj_0->pModValueRev = 0.0F;\r\n  }\r\n\r\n  /* End of InitializeConditions for MATLABSystem: '<Root>/Moving Average' */\r\n}\r\n\r\n/*\r\n * Output and update for atomic system:\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *    ...\r\n */\r\nvoid test3_MovingAverage(real32_T rtu_0, B_MovingAverage_test3_T *localB,\r\n  DW_MovingAverage_test3_T *localDW)\r\n{\r\n  g_dsp_internal_SlidingWindowA_T *obj;\r\n  real32_T csumrev[3];\r\n  real32_T csum;\r\n  real32_T cumRevIndex;\r\n  real32_T modValueRev;\r\n  real32_T z;\r\n\r\n  /* MATLABSystem: '<Root>/Moving Average' */\r\n  if (localDW->obj.TunablePropsChanged) {\r\n    localDW->obj.TunablePropsChanged = false;\r\n  }\r\n\r\n  obj = localDW->obj.pStatistic;\r\n  if (obj->isInitialized != 1L) {\r\n    obj->isSetupComplete = false;\r\n    obj->isInitialized = 1L;\r\n    obj->pCumSum = 0.0F;\r\n    obj->pCumSumRev[0] = 0.0F;\r\n    obj->pCumSumRev[1] = 0.0F;\r\n    obj->pCumSumRev[2] = 0.0F;\r\n    obj->pCumRevIndex = 1.0F;\r\n    obj->pModValueRev = 0.0F;\r\n    obj->isSetupComplete = true;\r\n    obj->pCumSum = 0.0F;\r\n    obj->pCumSumRev[0] = 0.0F;\r\n    obj->pCumSumRev[1] = 0.0F;\r\n    obj->pCumSumRev[2] = 0.0F;\r\n    obj->pCumRevIndex = 1.0F;\r\n    obj->pModValueRev = 0.0F;\r\n  }\r\n\r\n  cumRevIndex = obj->pCumRevIndex;\r\n  csum = obj->pCumSum;\r\n  csumrev[0] = obj->pCumSumRev[0];\r\n  csumrev[1] = obj->pCumSumRev[1];\r\n  csumrev[2] = obj->pCumSumRev[2];\r\n  modValueRev = obj->pModValueRev;\r\n  z = 0.0F;\r\n\r\n  /* MATLABSystem: '<Root>/Moving Average' */\r\n  localB->ChargeCurrentLimit = 0.0F;\r\n\r\n  /* MATLABSystem: '<Root>/Moving Average' */\r\n  csum += rtu_0;\r\n  if (modValueRev == 0.0F) {\r\n    z = csumrev[(int16_T)cumRevIndex - 1] + csum;\r\n  }\r\n\r\n  csumrev[(int16_T)cumRevIndex - 1] = rtu_0;\r\n  if (cumRevIndex != 3.0F) {\r\n    cumRevIndex++;\r\n  } else {\r\n    cumRevIndex = 1.0F;\r\n    csum = 0.0F;\r\n    csumrev[1] += csumrev[2];\r\n    csumrev[0] += csumrev[1];\r\n  }\r\n\r\n  if (modValueRev == 0.0F) {\r\n    /* MATLABSystem: '<Root>/Moving Average' */\r\n    localB->ChargeCurrentLimit = z / 4.0F;\r\n  }\r\n\r\n  obj->pCumSum = csum;\r\n  obj->pCumSumRev[0] = csumrev[0];\r\n  obj->pCumSumRev[1] = csumrev[1];\r\n  obj->pCumSumRev[2] = csumrev[2];\r\n  obj->pCumRevIndex = cumRevIndex;\r\n  if (modValueRev > 0.0F) {\r\n    obj->pModValueRev = modValueRev - 1.0F;\r\n  } else {\r\n    obj->pModValueRev = 0.0F;\r\n  }\r\n}\r\n\r\n/*\r\n * Termination for atomic system:\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *    ...\r\n */\r\nvoid test3_MovingAverage_Term(DW_MovingAverage_test3_T *localDW)\r\n{\r\n  g_dsp_internal_SlidingWindowA_T *obj;\r\n\r\n  /* Terminate for MATLABSystem: '<Root>/Moving Average' */\r\n  if (!localDW->obj.matlabCodegenIsDeleted) {\r\n    localDW->obj.matlabCodegenIsDeleted = true;\r\n    if ((localDW->obj.isInitialized == 1L) && localDW->obj.isSetupComplete) {\r\n      obj = localDW->obj.pStatistic;\r\n      if (obj->isInitialized == 1L) {\r\n        obj->isInitialized = 2L;\r\n      }\r\n\r\n      localDW->obj.NumChannels = -1L;\r\n    }\r\n  }\r\n\r\n  /* End of Terminate for MATLABSystem: '<Root>/Moving Average' */\r\n}\r\n\r\n/* Function for Chart: '<S97>/Chart' */\r\nstatic void test3_CC_Mode(void)\r\n{\r\n  /* Outport: '<Root>/Charge_Complete' */\r\n  test3_Y.Charge_Complete = 0.0;\r\n\r\n  /* Inport: '<Root>/StateRequest' incorporates:\r\n   *  Inport: '<Root>/ReqSOC'\r\n   *  Inport: '<Root>/Req_FastCh'\r\n   *  Inport: '<Root>/SOC'\r\n   *  Merge: '<S677>/ Merge '\r\n   *  Outport: '<Root>/ChargeCurrentLimit'\r\n   *  Outport: '<Root>/ChargeModeReq'\r\n   *  Outport: '<Root>/ChargeVoltReq'\r\n   *  Outport: '<Root>/Charge_Complete'\r\n   *  Outport: '<Root>/Fake_SOC'\r\n   *  Outport: '<Root>/MaxCellVolt'\r\n   *  Outport: '<Root>/MinCellVolt'\r\n   *  Outport: '<Root>/SumOfVoltages'\r\n   */\r\n  if ((test3_U.StateRequest != Charging) || (test3_Y.MinCellVolt <= 2.5F)) {\r\n    test3_DW.is_Charginig = test3_IN_Init_Mode;\r\n    test3_Y.ChargeModeReq = Init_Mode;\r\n    test3_B.ChargeCurrentReq = 0.0F;\r\n    test3_Y.ChargeVoltReq = 0.0F;\r\n  } else if ((test3_Y.Fake_SOC >= test3_U.ReqSOC) && ((int16_T)test3_U.ReqSOC <\r\n              100)) {\r\n    test3_DW.durationCounter_1 = 0L;\r\n    test3_DW.is_Charginig = test3_IN_Personal_Mode;\r\n    test3_Y.Charge_Complete = 1.0;\r\n    test3_B.ChargeCurrentReq = 0.0F;\r\n    test3_Y.ChargeModeReq = Personal_Mode;\r\n    test3_Y.ChargeVoltReq = 0.0F;\r\n  } else if ((test3_U.Req_FastCh == 1.0F) && (test3_U.SOC > 20.0F) &&\r\n             (test3_U.SOC <= 72.0F)) {\r\n    test3_DW.is_Charginig = test3_IN_FastCharge_Mode;\r\n    test3_Y.ChargeModeReq = FastCharge_Mode;\r\n  } else if (test3_Y.MaxCellVolt >= 4.2F) {\r\n    test3_DW.is_Charginig = test3_IN_CV_Mode;\r\n    test3_DW.temporalCounter_i2 = 0UL;\r\n    test3_Y.ChargeModeReq = CV_Mode;\r\n    if ((test3_Y.ChargeCurrentLimit >= 30.0F) || rtIsNaNF\r\n        (test3_Y.ChargeCurrentLimit)) {\r\n      test3_B.ChargeCurrentReq = 30.0F;\r\n    } else {\r\n      test3_B.ChargeCurrentReq = test3_Y.ChargeCurrentLimit;\r\n    }\r\n  } else {\r\n    if ((test3_Y.ChargeCurrentLimit >= 30.0F) || rtIsNaNF\r\n        (test3_Y.ChargeCurrentLimit)) {\r\n      test3_B.ChargeCurrentReq = 30.0F;\r\n    } else {\r\n      test3_B.ChargeCurrentReq = test3_Y.ChargeCurrentLimit;\r\n    }\r\n\r\n    test3_Y.ChargeVoltReq = (4.2F - test3_Y.MaxCellVolt) * 96.0F + 1.01F *\r\n      test3_Y.SumOfVoltages;\r\n  }\r\n\r\n  /* End of Inport: '<Root>/StateRequest' */\r\n}\r\n\r\n/* Function for Chart: '<S97>/Chart' */\r\nstatic void test3_FastCharge_Mode(void)\r\n{\r\n  /* Outport: '<Root>/Charge_Complete' */\r\n  test3_Y.Charge_Complete = 0.0;\r\n\r\n  /* Inport: '<Root>/Req_FastCh' incorporates:\r\n   *  Inport: '<Root>/ReqSOC'\r\n   *  Inport: '<Root>/SOC'\r\n   *  Inport: '<Root>/StateRequest'\r\n   *  Outport: '<Root>/Fake_SOC'\r\n   *  Outport: '<Root>/MaxCellVolt'\r\n   *  Outport: '<Root>/MinCellVolt'\r\n   */\r\n  if ((test3_U.Req_FastCh == 0.0F) || (test3_U.SOC > 80.0F)) {\r\n    test3_DW.is_Charginig = test3_IN_CC_Mode;\r\n\r\n    /* Outport: '<Root>/ChargeModeReq' */\r\n    test3_Y.ChargeModeReq = CC_Mode;\r\n  } else if ((test3_U.StateRequest != Charging) || (test3_Y.MinCellVolt <= 2.5F))\r\n  {\r\n    test3_DW.is_Charginig = test3_IN_Init_Mode;\r\n\r\n    /* Outport: '<Root>/ChargeModeReq' */\r\n    test3_Y.ChargeModeReq = Init_Mode;\r\n\r\n    /* Merge: '<S677>/ Merge ' */\r\n    test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n    /* Outport: '<Root>/ChargeVoltReq' */\r\n    test3_Y.ChargeVoltReq = 0.0F;\r\n  } else if (test3_Y.MaxCellVolt >= 4.2F) {\r\n    test3_DW.is_Charginig = test3_IN_CV_Mode;\r\n    test3_DW.temporalCounter_i2 = 0UL;\r\n\r\n    /* Outport: '<Root>/ChargeModeReq' */\r\n    test3_Y.ChargeModeReq = CV_Mode;\r\n\r\n    /* Outport: '<Root>/ChargeCurrentLimit' */\r\n    if ((test3_Y.ChargeCurrentLimit >= 30.0F) || rtIsNaNF\r\n        (test3_Y.ChargeCurrentLimit)) {\r\n      test3_B.ChargeCurrentReq = 30.0F;\r\n    } else {\r\n      test3_B.ChargeCurrentReq = test3_Y.ChargeCurrentLimit;\r\n    }\r\n  } else if ((test3_Y.Fake_SOC >= test3_U.ReqSOC) && ((int16_T)test3_U.ReqSOC <\r\n              100)) {\r\n    test3_DW.durationCounter_1 = 0L;\r\n    test3_DW.is_Charginig = test3_IN_Personal_Mode;\r\n\r\n    /* Outport: '<Root>/Charge_Complete' */\r\n    test3_Y.Charge_Complete = 1.0;\r\n\r\n    /* Merge: '<S677>/ Merge ' */\r\n    test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n    /* Outport: '<Root>/ChargeModeReq' */\r\n    test3_Y.ChargeModeReq = Personal_Mode;\r\n\r\n    /* Outport: '<Root>/ChargeVoltReq' */\r\n    test3_Y.ChargeVoltReq = 0.0F;\r\n  } else {\r\n    /* Merge: '<S677>/ Merge ' incorporates:\r\n     *  Outport: '<Root>/ChargeCurrentLimit'\r\n     */\r\n    test3_B.ChargeCurrentReq = test3_Y.ChargeCurrentLimit;\r\n\r\n    /* Outport: '<Root>/ChargeVoltReq' incorporates:\r\n     *  Outport: '<Root>/MaxCellVolt'\r\n     *  Outport: '<Root>/SumOfVoltages'\r\n     */\r\n    test3_Y.ChargeVoltReq = (4.2F - test3_Y.MaxCellVolt) * 96.0F + 1.01F *\r\n      test3_Y.SumOfVoltages;\r\n  }\r\n\r\n  /* End of Inport: '<Root>/Req_FastCh' */\r\n}\r\n\r\nreal_T rt_roundd_snf(real_T u)\r\n{\r\n  real_T y;\r\n  if (fabs(u) < 4.503599627370496E+15) {\r\n    if (u >= 0.5) {\r\n      y = floor(u + 0.5);\r\n    } else if (u > -0.5) {\r\n      y = u * 0.0;\r\n    } else {\r\n      y = ceil(u - 0.5);\r\n    }\r\n  } else {\r\n    y = u;\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\n/* Function for Chart: '<S97>/Chart' */\r\nstatic void test3_exit_internal_Charginig(void)\r\n{\r\n  test3_DW.is_Charginig = test3_IN_NO_ACTIVE_CHILD_k;\r\n}\r\n\r\n/* Function for Chart: '<S97>/Chart' */\r\nstatic void test3_Charginig(void)\r\n{\r\n  /* Inport: '<Root>/StateRequest' */\r\n  test3_B.i1 = test3_U.StateRequest;\r\n  if ((test3_B.i1 != Charging) && (test3_DW.ChrgCntctState == Init)) {\r\n    test3_exit_internal_Charginig();\r\n    test3_DW.is_MainStateMachine = test3_IN_Standby;\r\n\r\n    /* Outport: '<Root>/BMS_State' */\r\n    test3_Y.BMS_State = BMS_Standby;\r\n\r\n    /* Merge: '<S677>/ Merge ' */\r\n    test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n    /* Outport: '<Root>/ChargeVoltReq' */\r\n    test3_Y.ChargeVoltReq = 0.0F;\r\n\r\n    /* Outport: '<Root>/ChargeModeReq' */\r\n    test3_Y.ChargeModeReq = Init_Mode;\r\n\r\n    /* Outport: '<Root>/Charge_Complete' */\r\n    test3_Y.Charge_Complete = 0.0;\r\n  } else if (test3_DW.FaultPresent) {\r\n    /* Merge: '<S677>/ Merge ' */\r\n    test3_B.ChargeCurrentReq = 0.0F;\r\n    test3_exit_internal_Charginig();\r\n    test3_DW.is_MainStateMachine = test3_IN_Fault;\r\n\r\n    /* Outport: '<Root>/BMS_State' */\r\n    test3_Y.BMS_State = BMS_Fault;\r\n\r\n    /* Outport: '<Root>/DischargeCurrentReq' */\r\n    test3_Y.DischargeCurrentReq = 0.0F;\r\n\r\n    /* Outport: '<Root>/ChargeVoltReq' */\r\n    test3_Y.ChargeVoltReq = 0.0F;\r\n  } else if (test3_B.i1 == Driving) {\r\n    test3_exit_internal_Charginig();\r\n    test3_DW.is_MainStateMachine = test3_IN_Driving;\r\n\r\n    /* Outport: '<Root>/BMS_State' */\r\n    test3_Y.BMS_State = BMS_Driving;\r\n  } else {\r\n    switch (test3_DW.is_Charginig) {\r\n     case test3_IN_CC_Mode:\r\n      test3_CC_Mode();\r\n      break;\r\n\r\n     case test3_IN_CV_Mode:\r\n      /* Outport: '<Root>/Charge_Complete' */\r\n      test3_Y.Charge_Complete = 0.0;\r\n      if ((test3_B.ChargeCurrentReq <= 2.8125F) && (test3_DW.temporalCounter_i2 >=\r\n           600UL)) {\r\n        test3_DW.is_Charginig = test3_IN_SOC_Detect;\r\n\r\n        /* Outport: '<Root>/Charge_Complete' */\r\n        test3_Y.Charge_Complete = 1.0;\r\n\r\n        /* Outport: '<Root>/SOC_New' */\r\n        test3_Y.SOC_New = 100.0;\r\n\r\n        /* Outport: '<Root>/MinCellVolt' incorporates:\r\n         *  Inport: '<Root>/ReqSOC'\r\n         *  Merge: '<S677>/ Merge '\r\n         *  Outport: '<Root>/ChargeCurrentLimit'\r\n         *  Outport: '<Root>/ChargeModeReq'\r\n         *  Outport: '<Root>/ChargeVoltReq'\r\n         *  Outport: '<Root>/Charge_Complete'\r\n         *  Outport: '<Root>/Fake_SOC'\r\n         *  Outport: '<Root>/MaxCellVolt'\r\n         *  Outport: '<Root>/SumOfVoltages'\r\n         */\r\n      } else if ((test3_B.i1 != Charging) || (test3_Y.MinCellVolt <= 2.5F) ||\r\n                 (test3_Y.MaxCellVolt >= 4.37F)) {\r\n        test3_DW.is_Charginig = test3_IN_Init_Mode;\r\n        test3_Y.ChargeModeReq = Init_Mode;\r\n        test3_B.ChargeCurrentReq = 0.0F;\r\n        test3_Y.ChargeVoltReq = 0.0F;\r\n      } else if ((test3_Y.MaxCellVolt < 4.12F) && (test3_DW.temporalCounter_i2 >=\r\n                  500UL)) {\r\n        test3_DW.is_Charginig = test3_IN_CC_Mode;\r\n        test3_Y.ChargeModeReq = CC_Mode;\r\n      } else if ((test3_Y.Fake_SOC >= test3_U.ReqSOC) && ((int16_T)\r\n                  test3_U.ReqSOC < 100)) {\r\n        test3_DW.durationCounter_1 = 0L;\r\n        test3_DW.is_Charginig = test3_IN_Personal_Mode;\r\n        test3_Y.Charge_Complete = 1.0;\r\n        test3_B.ChargeCurrentReq = 0.0F;\r\n        test3_Y.ChargeModeReq = Personal_Mode;\r\n        test3_Y.ChargeVoltReq = 0.0F;\r\n      } else {\r\n        test3_B.ChargeCurrentReq -= (test3_Y.MaxCellVolt - 4.2F) * 0.5F;\r\n        if ((!(test3_B.ChargeCurrentReq <= test3_Y.ChargeCurrentLimit)) &&\r\n            (!rtIsNaNF(test3_Y.ChargeCurrentLimit))) {\r\n          test3_B.ChargeCurrentReq = test3_Y.ChargeCurrentLimit;\r\n        }\r\n\r\n        if ((test3_B.ChargeCurrentReq >= 30.0F) || rtIsNaNF\r\n            (test3_B.ChargeCurrentReq)) {\r\n          test3_B.ChargeCurrentReq = 30.0F;\r\n        }\r\n\r\n        test3_Y.ChargeVoltReq = (4.2F - test3_Y.MaxCellVolt) * 96.0F + 1.01F *\r\n          test3_Y.SumOfVoltages;\r\n      }\r\n      break;\r\n\r\n     case test3_IN_FastCharge_Mode:\r\n      test3_FastCharge_Mode();\r\n      break;\r\n\r\n     case test3_IN_Init_Mode:\r\n      /* Outport: '<Root>/MaxCellVolt' incorporates:\r\n       *  Inport: '<Root>/ReqSOC'\r\n       *  Outport: '<Root>/ChargeModeReq'\r\n       *  Outport: '<Root>/Charge_Complete'\r\n       *  Outport: '<Root>/DischargeCurrentLimit'\r\n       *  Outport: '<Root>/DischargeCurrentReq'\r\n       *  Outport: '<Root>/Fake_SOC'\r\n       *  Outport: '<Root>/Faults'\r\n       *  Outport: '<Root>/MinCellVolt'\r\n       */\r\n      if ((test3_B.i1 == Charging) && (test3_Y.MaxCellVolt < 4.12F) &&\r\n          (test3_Y.MinCellVolt > 2.5F) && ((test3_Y.Fake_SOC < ((int16_T)\r\n             rt_roundd_snf(0.97 * (real_T)test3_U.ReqSOC) & 255)) || ((int16_T)\r\n            test3_U.ReqSOC >= 100))) {\r\n        test3_DW.is_Charginig = test3_IN_CC_Mode;\r\n        test3_Y.Charge_Complete = 0.0;\r\n        test3_Y.ChargeModeReq = CC_Mode;\r\n      } else if ((test3_B.i1 == Charging) && (test3_Y.MinCellVolt <= 2.5F) &&\r\n                 (!test3_Y.Faults_d.PreChargeFault)) {\r\n        test3_DW.is_Charginig = test3_IN_PreCharge_Mode;\r\n        test3_DW.temporalCounter_i2 = 0UL;\r\n        test3_Y.ChargeModeReq = Pre_Charge_Mode;\r\n        test3_Y.Charge_Complete = 0.0;\r\n\r\n        /* Sum: '<S679>/Add1' incorporates:\r\n         *  Constant: '<S679>/Constant'\r\n         *  DiscreteIntegrator: '<S679>/Discrete-Time Integrator'\r\n         *  Gain: '<S679>/KP'\r\n         *  Gain: '<S679>/KP2'\r\n         *  Inport: '<Root>/Pack_Current'\r\n         *  Outport: '<Root>/ChargeModeReq'\r\n         *  Outport: '<Root>/Charge_Complete'\r\n         *  Sum: '<S679>/Add'\r\n         */\r\n        test3_B.ChargeCurrentReq = (2.8125F - (-test3_U.Pack_Current)) * 0.8F +\r\n          test3_DW.DiscreteTimeIntegrator_DSTATE;\r\n\r\n        /* Saturate: '<S679>/Saturation' */\r\n        if (test3_B.ChargeCurrentReq > 30.0F) {\r\n          /* Sum: '<S679>/Add1' incorporates:\r\n           *  Merge: '<S677>/ Merge '\r\n           *  SignalConversion generated from: '<S679>/ChargeCurrentReq'\r\n           */\r\n          test3_B.ChargeCurrentReq = 30.0F;\r\n        } else if (test3_B.ChargeCurrentReq < 0.0F) {\r\n          /* Sum: '<S679>/Add1' incorporates:\r\n           *  Merge: '<S677>/ Merge '\r\n           *  SignalConversion generated from: '<S679>/ChargeCurrentReq'\r\n           */\r\n          test3_B.ChargeCurrentReq = 0.0F;\r\n        }\r\n\r\n        /* Update for DiscreteIntegrator: '<S679>/Discrete-Time Integrator' incorporates:\r\n         *  Constant: '<S679>/Constant'\r\n         *  Gain: '<S679>/KP2'\r\n         *  Inport: '<Root>/Pack_Current'\r\n         *  Sum: '<S679>/Add'\r\n         */\r\n        test3_DW.DiscreteTimeIntegrator_DSTATE += (2.8125F -\r\n          (-test3_U.Pack_Current)) * 0.01F;\r\n      } else {\r\n        test3_Y.DischargeCurrentReq = test3_Y.DischargeCurrentLimit;\r\n      }\r\n      break;\r\n\r\n     case test3_IN_Personal_Mode:\r\n      /* Outport: '<Root>/Charge_Complete' */\r\n      test3_Y.Charge_Complete = 1.0;\r\n\r\n      /* Outport: '<Root>/Fake_SOC' incorporates:\r\n       *  Inport: '<Root>/Pack_Current'\r\n       *  Inport: '<Root>/ReqSOC'\r\n       *  Merge: '<S677>/ Merge '\r\n       *  Outport: '<Root>/ChargeModeReq'\r\n       *  Outport: '<Root>/ChargeVoltReq'\r\n       *  Outport: '<Root>/Charge_Complete'\r\n       *  Outport: '<Root>/MinCellVolt'\r\n       */\r\n      if ((test3_Y.Fake_SOC < ((int16_T)rt_roundd_snf(0.98 * (real_T)\r\n             test3_U.ReqSOC) & 255)) || (test3_B.i1 != Charging) ||\r\n          (test3_Y.MinCellVolt <= 2.5F)) {\r\n        test3_DW.is_Charginig = test3_IN_Init_Mode;\r\n        test3_Y.ChargeModeReq = Init_Mode;\r\n        test3_B.ChargeCurrentReq = 0.0F;\r\n        test3_Y.ChargeVoltReq = 0.0F;\r\n      } else {\r\n        if (!(test3_U.Pack_Current >= 2.0F)) {\r\n          test3_DW.durationCounter_1 = 0L;\r\n        }\r\n\r\n        if (test3_DW.durationCounter_1 > 400L) {\r\n          test3_DW.is_Charginig = test3_IN_Personal_Mode1;\r\n          test3_DW.temporalCounter_i2 = 0UL;\r\n          test3_Y.Charge_Complete = 0.0;\r\n\r\n          /* Sum: '<S679>/Add1' incorporates:\r\n           *  Constant: '<S678>/Constant'\r\n           *  DiscreteIntegrator: '<S678>/Discrete-Time Integrator'\r\n           *  Gain: '<S678>/KP'\r\n           *  Gain: '<S678>/KP2'\r\n           *  Inport: '<Root>/Pack_Current'\r\n           *  Outport: '<Root>/Charge_Complete'\r\n           *  Sum: '<S678>/Add'\r\n           *  Sum: '<S678>/Add1'\r\n           */\r\n          test3_B.ChargeCurrentReq = (0.0F - (-test3_U.Pack_Current)) * 0.8F +\r\n            test3_DW.DiscreteTimeIntegrator_DSTATE_d;\r\n\r\n          /* Saturate: '<S678>/Saturation' */\r\n          if (test3_B.ChargeCurrentReq > 30.0F) {\r\n            /* Sum: '<S679>/Add1' incorporates:\r\n             *  Merge: '<S677>/ Merge '\r\n             *  SignalConversion generated from: '<S678>/ChargeCurrentReq'\r\n             */\r\n            test3_B.ChargeCurrentReq = 30.0F;\r\n          } else if (test3_B.ChargeCurrentReq < 0.0F) {\r\n            /* Sum: '<S679>/Add1' incorporates:\r\n             *  Merge: '<S677>/ Merge '\r\n             *  SignalConversion generated from: '<S678>/ChargeCurrentReq'\r\n             */\r\n            test3_B.ChargeCurrentReq = 0.0F;\r\n          }\r\n\r\n          /* Update for DiscreteIntegrator: '<S678>/Discrete-Time Integrator' incorporates:\r\n           *  Constant: '<S678>/Constant'\r\n           *  Gain: '<S678>/KP2'\r\n           *  Inport: '<Root>/Pack_Current'\r\n           *  Sum: '<S678>/Add'\r\n           */\r\n          test3_DW.DiscreteTimeIntegrator_DSTATE_d += (0.0F -\r\n            (-test3_U.Pack_Current)) * 0.01F;\r\n        }\r\n      }\r\n      break;\r\n\r\n     case test3_IN_Personal_Mode1:\r\n      /* Outport: '<Root>/Charge_Complete' */\r\n      test3_Y.Charge_Complete = 0.0;\r\n\r\n      /* Outport: '<Root>/Fake_SOC' incorporates:\r\n       *  Inport: '<Root>/ReqSOC'\r\n       *  Merge: '<S677>/ Merge '\r\n       *  Outport: '<Root>/ChargeModeReq'\r\n       *  Outport: '<Root>/ChargeVoltReq'\r\n       *  Outport: '<Root>/Charge_Complete'\r\n       *  Outport: '<Root>/MaxCellVolt'\r\n       *  Outport: '<Root>/MinCellVolt'\r\n       *  Outport: '<Root>/SumOfVoltages'\r\n       */\r\n      if ((test3_Y.Fake_SOC < ((int16_T)rt_roundd_snf(0.98 * (real_T)\r\n             test3_U.ReqSOC) & 255)) || (test3_B.i1 != Charging) ||\r\n          (test3_Y.MinCellVolt <= 2.5F)) {\r\n        test3_DW.is_Charginig = test3_IN_Init_Mode;\r\n        test3_Y.ChargeModeReq = Init_Mode;\r\n        test3_B.ChargeCurrentReq = 0.0F;\r\n        test3_Y.ChargeVoltReq = 0.0F;\r\n      } else if ((test3_B.ChargeCurrentReq < 2.0F) &&\r\n                 (test3_DW.temporalCounter_i2 >= 400UL)) {\r\n        test3_DW.durationCounter_1 = 0L;\r\n        test3_DW.is_Charginig = test3_IN_Personal_Mode;\r\n        test3_Y.Charge_Complete = 1.0;\r\n        test3_B.ChargeCurrentReq = 0.0F;\r\n        test3_Y.ChargeModeReq = Personal_Mode;\r\n        test3_Y.ChargeVoltReq = 0.0F;\r\n      } else {\r\n        test3_Y.ChargeVoltReq = (4.2F - test3_Y.MaxCellVolt) * 96.0F +\r\n          test3_Y.SumOfVoltages;\r\n\r\n        /* Sum: '<S679>/Add1' incorporates:\r\n         *  Constant: '<S678>/Constant'\r\n         *  DiscreteIntegrator: '<S678>/Discrete-Time Integrator'\r\n         *  Gain: '<S678>/KP'\r\n         *  Gain: '<S678>/KP2'\r\n         *  Inport: '<Root>/Pack_Current'\r\n         *  Outport: '<Root>/ChargeVoltReq'\r\n         *  Outport: '<Root>/MaxCellVolt'\r\n         *  Outport: '<Root>/SumOfVoltages'\r\n         *  Sum: '<S678>/Add'\r\n         *  Sum: '<S678>/Add1'\r\n         */\r\n        test3_B.ChargeCurrentReq = (0.0F - (-test3_U.Pack_Current)) * 0.8F +\r\n          test3_DW.DiscreteTimeIntegrator_DSTATE_d;\r\n\r\n        /* Saturate: '<S678>/Saturation' */\r\n        if (test3_B.ChargeCurrentReq > 30.0F) {\r\n          /* Sum: '<S679>/Add1' incorporates:\r\n           *  Merge: '<S677>/ Merge '\r\n           *  SignalConversion generated from: '<S678>/ChargeCurrentReq'\r\n           */\r\n          test3_B.ChargeCurrentReq = 30.0F;\r\n        } else if (test3_B.ChargeCurrentReq < 0.0F) {\r\n          /* Sum: '<S679>/Add1' incorporates:\r\n           *  Merge: '<S677>/ Merge '\r\n           *  SignalConversion generated from: '<S678>/ChargeCurrentReq'\r\n           */\r\n          test3_B.ChargeCurrentReq = 0.0F;\r\n        }\r\n\r\n        /* Update for DiscreteIntegrator: '<S678>/Discrete-Time Integrator' incorporates:\r\n         *  Constant: '<S678>/Constant'\r\n         *  Gain: '<S678>/KP2'\r\n         *  Inport: '<Root>/Pack_Current'\r\n         *  Sum: '<S678>/Add'\r\n         */\r\n        test3_DW.DiscreteTimeIntegrator_DSTATE_d += (0.0F -\r\n          (-test3_U.Pack_Current)) * 0.01F;\r\n      }\r\n      break;\r\n\r\n     case test3_IN_PreChargeFaultCheck:\r\n      break;\r\n\r\n     case test3_IN_PreCharge_Mode:\r\n      /* Outport: '<Root>/Charge_Complete' */\r\n      /* Outport: '<Root>/MinCellVolt' */\r\n      test3_Y.Charge_Complete = 0.0;\r\n      if (test3_DW.temporalCounter_i2 >= 30000.0F) {\r\n        test3_DW.is_Charginig = test3_IN_PreChargeFaultCheck;\r\n\r\n        /* Outport: '<Root>/Faults' */\r\n        test3_Y.Faults_d.PreChargeFault = true;\r\n\r\n        /* Merge: '<S677>/ Merge ' */\r\n        test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n        /* Outport: '<Root>/ChargeVoltReq' */\r\n        test3_Y.ChargeVoltReq = 0.0F;\r\n      } else if (test3_B.i1 != Charging) {\r\n        test3_DW.is_Charginig = test3_IN_Init_Mode;\r\n\r\n        /* Outport: '<Root>/ChargeModeReq' */\r\n        test3_Y.ChargeModeReq = Init_Mode;\r\n\r\n        /* Merge: '<S677>/ Merge ' */\r\n        test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n        /* Outport: '<Root>/ChargeVoltReq' */\r\n        test3_Y.ChargeVoltReq = 0.0F;\r\n      } else if (test3_Y.MinCellVolt > 2.5F) {\r\n        test3_DW.is_Charginig = test3_IN_CC_Mode;\r\n\r\n        /* Outport: '<Root>/ChargeModeReq' */\r\n        test3_Y.ChargeModeReq = CC_Mode;\r\n      } else {\r\n        /* Outport: '<Root>/ChargeVoltReq' incorporates:\r\n         *  Outport: '<Root>/MaxCellVolt'\r\n         *  Outport: '<Root>/SumOfVoltages'\r\n         */\r\n        test3_Y.ChargeVoltReq = (4.2F - test3_Y.MaxCellVolt) * 96.0F +\r\n          test3_Y.SumOfVoltages;\r\n\r\n        /* Sum: '<S679>/Add1' incorporates:\r\n         *  Constant: '<S679>/Constant'\r\n         *  DiscreteIntegrator: '<S679>/Discrete-Time Integrator'\r\n         *  Gain: '<S679>/KP'\r\n         *  Gain: '<S679>/KP2'\r\n         *  Inport: '<Root>/Pack_Current'\r\n         *  Sum: '<S679>/Add'\r\n         */\r\n        test3_B.ChargeCurrentReq = (2.8125F - (-test3_U.Pack_Current)) * 0.8F +\r\n          test3_DW.DiscreteTimeIntegrator_DSTATE;\r\n\r\n        /* Saturate: '<S679>/Saturation' */\r\n        if (test3_B.ChargeCurrentReq > 30.0F) {\r\n          /* Sum: '<S679>/Add1' incorporates:\r\n           *  Merge: '<S677>/ Merge '\r\n           *  SignalConversion generated from: '<S679>/ChargeCurrentReq'\r\n           */\r\n          test3_B.ChargeCurrentReq = 30.0F;\r\n        } else if (test3_B.ChargeCurrentReq < 0.0F) {\r\n          /* Sum: '<S679>/Add1' incorporates:\r\n           *  Merge: '<S677>/ Merge '\r\n           *  SignalConversion generated from: '<S679>/ChargeCurrentReq'\r\n           */\r\n          test3_B.ChargeCurrentReq = 0.0F;\r\n        }\r\n\r\n        /* Update for DiscreteIntegrator: '<S679>/Discrete-Time Integrator' incorporates:\r\n         *  Constant: '<S679>/Constant'\r\n         *  Gain: '<S679>/KP2'\r\n         *  Inport: '<Root>/Pack_Current'\r\n         *  Sum: '<S679>/Add'\r\n         */\r\n        test3_DW.DiscreteTimeIntegrator_DSTATE += (2.8125F -\r\n          (-test3_U.Pack_Current)) * 0.01F;\r\n      }\r\n      break;\r\n\r\n     default:\r\n      /* Outport: '<Root>/Charge_Complete' */\r\n      /* case IN_SOC_Detect: */\r\n      test3_Y.Charge_Complete = 1.0;\r\n\r\n      /* Outport: '<Root>/SOC_New' */\r\n      test3_Y.SOC_New = 100.0;\r\n      test3_DW.is_Charginig = test3_IN_Init_Mode;\r\n\r\n      /* Outport: '<Root>/ChargeModeReq' */\r\n      test3_Y.ChargeModeReq = Init_Mode;\r\n\r\n      /* Merge: '<S677>/ Merge ' */\r\n      test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n      /* Outport: '<Root>/ChargeVoltReq' */\r\n      test3_Y.ChargeVoltReq = 0.0F;\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n/* Function for Chart: '<S97>/Chart' */\r\nstatic void test3_FaultMonitoring(void)\r\n{\r\n  boolean_T e_out;\r\n  switch (test3_DW.is_MonitorFault_In) {\r\n   case test3_IN_BMBFault:\r\n   case test3_IN_CAN_VCU_Fault:\r\n   case test3_IN_LowSOC:\r\n    break;\r\n\r\n   case test3_IN_InputPowerFault:\r\n    test3_DW.durationCounter_2 = 0L;\r\n    test3_DW.durationCounter_1_p = 0L;\r\n    test3_DW.is_MonitorFault_In = test3_IN_NoInputFault;\r\n    test3_DW.PreContact = 0.0;\r\n    break;\r\n\r\n   case test3_IN_MemoryFault:\r\n    test3_DW.durationCounter_2 = 0L;\r\n    test3_DW.durationCounter_1_p = 0L;\r\n    test3_DW.is_MonitorFault_In = test3_IN_NoInputFault;\r\n    test3_DW.PreContact = 0.0;\r\n    break;\r\n\r\n   case test3_IN_NoInputFault:\r\n    /* Inport: '<Root>/ShortCircuitFault' incorporates:\r\n     *  Inport: '<Root>/SOC'\r\n     */\r\n    if (test3_U.ShortCircuitFault == 1.0F) {\r\n      test3_DW.is_MonitorFault_In = test3_IN_ShortCircuitFault;\r\n      test3_DW.PreContact = 1.0;\r\n      test3_DW.FaultPresent = true;\r\n\r\n      /* Outport: '<Root>/Faults' */\r\n      test3_Y.Faults_d.ShortCircuitFault = true;\r\n    } else {\r\n      if (!(test3_U.SOC <= 0.0F)) {\r\n        test3_DW.durationCounter_2 = 0L;\r\n      }\r\n\r\n      /* Inport: '<Root>/StateRequest' incorporates:\r\n       *  Inport: '<Root>/BMBFault'\r\n       *  Inport: '<Root>/CurrentSensorFault'\r\n       *  Inport: '<Root>/InputPowerFault'\r\n       *  Inport: '<Root>/MemoryFault'\r\n       *  Outport: '<Root>/Faults'\r\n       */\r\n      if ((test3_DW.durationCounter_2 > 200L) && (test3_U.StateRequest ==\r\n           Driving)) {\r\n        test3_DW.is_MonitorFault_In = test3_IN_LowSOC;\r\n        test3_DW.PreContact = 1.0;\r\n        test3_DW.FaultPresent = true;\r\n\r\n        /* Outport: '<Root>/Faults' */\r\n        test3_Y.Faults_d.LowSOC = true;\r\n      } else if ((test3_U.InputPowerFault == 1.0F) &&\r\n                 (!test3_Y.Faults_d.InputPowerFault)) {\r\n        test3_DW.is_MonitorFault_In = test3_IN_InputPowerFault;\r\n\r\n        /* Outport: '<Root>/Faults' */\r\n        test3_Y.Faults_d.InputPowerFault = true;\r\n      } else if ((test3_U.MemoryFault == 1.0F) && (!test3_Y.Faults_d.MemoryFault))\r\n      {\r\n        test3_DW.is_MonitorFault_In = test3_IN_MemoryFault;\r\n\r\n        /* Outport: '<Root>/Faults' */\r\n        test3_Y.Faults_d.MemoryFault = true;\r\n      } else if ((test3_U.CurrentSensorFault == 1.0F) &&\r\n                 (!test3_Y.Faults_d.CurrentSensor)) {\r\n        test3_DW.is_MonitorFault_In = test3_IN_SensorFaut;\r\n\r\n        /* Outport: '<Root>/Faults' */\r\n        test3_Y.Faults_d.CurrentSensor = true;\r\n      } else {\r\n        if (!(test3_U.BMBFault == 1.0F)) {\r\n          test3_DW.durationCounter_1_p = 0L;\r\n        }\r\n\r\n        if (test3_DW.durationCounter_1_p > 200L) {\r\n          test3_DW.is_MonitorFault_In = test3_IN_BMBFault;\r\n          test3_DW.PreContact = 1.0;\r\n          test3_DW.FaultPresent = true;\r\n\r\n          /* Outport: '<Root>/Faults' */\r\n          test3_Y.Faults_d.BMBFault = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    /* End of Inport: '<Root>/ShortCircuitFault' */\r\n    break;\r\n\r\n   case test3_IN_SensorFaut:\r\n    test3_DW.durationCounter_2 = 0L;\r\n    test3_DW.durationCounter_1_p = 0L;\r\n    test3_DW.is_MonitorFault_In = test3_IN_NoInputFault;\r\n    test3_DW.PreContact = 0.0;\r\n    break;\r\n\r\n   default:\r\n    /* case IN_ShortCircuitFault: */\r\n    break;\r\n  }\r\n\r\n  switch (test3_DW.is_MonitorCurrLim) {\r\n   case test3_IN_NoCurrLimFault:\r\n    /* Inport: '<Root>/Pack_Current' incorporates:\r\n     *  Outport: '<Root>/ChargeCurrentLimit'\r\n     */\r\n    test3_B.f = -(test3_U.Pack_Current / test3_Y.ChargeCurrentLimit);\r\n    if (!(test3_B.f > 1.1)) {\r\n      test3_DW.durationCounter_5 = 0L;\r\n    }\r\n\r\n    if (test3_DW.durationCounter_5 > 6000L) {\r\n      e_out = true;\r\n    } else {\r\n      if (!(test3_B.f > 1.5F)) {\r\n        test3_DW.durationCounter_6 = 0L;\r\n      }\r\n\r\n      if (test3_DW.durationCounter_6 > 3000L) {\r\n        e_out = true;\r\n      } else {\r\n        if (!(test3_B.f > 2.0F)) {\r\n          test3_DW.durationCounter_7 = 0L;\r\n        }\r\n\r\n        if (test3_DW.durationCounter_7 > 1000L) {\r\n          e_out = true;\r\n        } else {\r\n          if (!(test3_B.f > 3.0F)) {\r\n            test3_DW.durationCounter_8 = 0L;\r\n          }\r\n\r\n          e_out = (test3_DW.durationCounter_8 > 300L);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (e_out) {\r\n      test3_DW.is_MonitorCurrLim = test3_IN_OverChargeCurrentFault;\r\n      test3_DW.PreContact = 1.0;\r\n      test3_DW.FaultPresent = true;\r\n\r\n      /* Outport: '<Root>/Faults' */\r\n      test3_Y.Faults_d.OverChargeCurrent = true;\r\n    } else {\r\n      /* Inport: '<Root>/Pack_Current' incorporates:\r\n       *  Outport: '<Root>/DischargeCurrentLimit'\r\n       */\r\n      test3_B.f = test3_U.Pack_Current / test3_Y.DischargeCurrentLimit;\r\n      if (!(test3_B.f > 1.1)) {\r\n        test3_DW.durationCounter_1_k = 0L;\r\n      }\r\n\r\n      if (test3_DW.durationCounter_1_k > 6000L) {\r\n        e_out = true;\r\n      } else {\r\n        if (!(test3_B.f > 1.5F)) {\r\n          test3_DW.durationCounter_2_a = 0L;\r\n        }\r\n\r\n        if (test3_DW.durationCounter_2_a > 3000L) {\r\n          e_out = true;\r\n        } else {\r\n          if (!(test3_B.f > 2.0F)) {\r\n            test3_DW.durationCounter_3 = 0L;\r\n          }\r\n\r\n          if (test3_DW.durationCounter_3 > 1000L) {\r\n            e_out = true;\r\n          } else {\r\n            if (!(test3_B.f > 3.0F)) {\r\n              test3_DW.durationCounter_4 = 0L;\r\n            }\r\n\r\n            e_out = (test3_DW.durationCounter_4 > 300L);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (e_out) {\r\n        test3_DW.is_MonitorCurrLim = te_IN_OverDischargeCurrentFault;\r\n        test3_DW.FaultPresent = true;\r\n\r\n        /* Outport: '<Root>/Faults' */\r\n        test3_Y.Faults_d.OverDischargeCurrent = true;\r\n      }\r\n    }\r\n    break;\r\n\r\n   case test3_IN_OverChargeCurrentFault:\r\n    break;\r\n\r\n   default:\r\n    /* case IN_OverDischargeCurrentFault: */\r\n    break;\r\n  }\r\n\r\n  switch (test3_DW.is_MonitorCellVoltage) {\r\n   case test3_IN_NoCellVoltFault:\r\n    /* Outport: '<Root>/MaxCellVolt' */\r\n    /* Outport: '<Root>/MinCellVolt' */\r\n    if (!(test3_Y.MaxCellVolt >= 4.37F)) {\r\n      test3_DW.durationCounter_1_c = 0L;\r\n    }\r\n\r\n    /* End of Outport: '<Root>/MaxCellVolt' */\r\n    if (test3_DW.durationCounter_1_c > 250L) {\r\n      test3_DW.is_MonitorCellVoltage = test3_IN_OverVoltageFault;\r\n      test3_DW.PreContact = 1.0;\r\n      test3_DW.FaultPresent = true;\r\n\r\n      /* Outport: '<Root>/Faults' */\r\n      test3_Y.Faults_d.OverVolt = true;\r\n    } else {\r\n      if (!(test3_Y.MinCellVolt <= 2.5F)) {\r\n        test3_DW.durationCounter_2_aa = 0L;\r\n      }\r\n\r\n      /* Inport: '<Root>/StateRequest' */\r\n      /* Outport: '<Root>/Faults' incorporates:\r\n       *  Outport: '<Root>/MinCellVolt'\r\n       */\r\n      test3_B.i_c = test3_U.StateRequest;\r\n      if ((test3_DW.durationCounter_2_aa > 250L) && (test3_B.i_c == Driving)) {\r\n        test3_DW.is_MonitorCellVoltage = test3_IN_UnderVoltageFault;\r\n        test3_DW.PreContact = 1.0;\r\n        test3_DW.FaultPresent = true;\r\n\r\n        /* Outport: '<Root>/Faults' */\r\n        test3_Y.Faults_d.UnderVolt = true;\r\n      } else if ((test3_Y.MinCellVolt <= 2.5F) && (test3_B.i_c == Charging) &&\r\n                 test3_Y.Faults_d.PreChargeFault) {\r\n        test3_DW.is_MonitorCellVoltage = te_IN_PreCharge_UnderVolt_Fault;\r\n        test3_DW.PreContact = 1.0;\r\n\r\n        /* Outport: '<Root>/Faults' */\r\n        test3_Y.Faults_d.UnderVolt = true;\r\n        test3_DW.FaultPresent = true;\r\n      }\r\n    }\r\n    break;\r\n\r\n   case test3_IN_OverVoltageFault:\r\n   case te_IN_PreCharge_UnderVolt_Fault:\r\n    break;\r\n\r\n   default:\r\n    /* case IN_UnderVoltageFault: */\r\n    break;\r\n  }\r\n\r\n  switch (test3_DW.is_MonitorCellTemp) {\r\n   case test3_IN_HighTemperatureFault:\r\n   case test3_IN_LowTemperatureFault:\r\n    break;\r\n\r\n   default:\r\n    /* Outport: '<Root>/MaxCellTemp' */\r\n    /* Outport: '<Root>/MinCellTemp' */\r\n    /* case IN_NoCellTempFault: */\r\n    if (!(test3_Y.MaxCellTemp >= 328.15F)) {\r\n      test3_DW.durationCounter_1_p1 = 0L;\r\n    }\r\n\r\n    /* End of Outport: '<Root>/MaxCellTemp' */\r\n    if (test3_DW.durationCounter_1_p1 > 300L) {\r\n      test3_DW.is_MonitorCellTemp = test3_IN_HighTemperatureFault;\r\n      test3_DW.PreContact = 1.0;\r\n      test3_DW.FaultPresent = true;\r\n\r\n      /* Outport: '<Root>/Faults' */\r\n      test3_Y.Faults_d.HighTemp = true;\r\n    } else {\r\n      if (!(test3_Y.MinCellTemp <= 253.15F)) {\r\n        test3_DW.durationCounter_2_h = 0L;\r\n      }\r\n\r\n      if (test3_DW.durationCounter_2_h > 300L) {\r\n        test3_DW.is_MonitorCellTemp = test3_IN_LowTemperatureFault;\r\n        test3_DW.PreContact = 1.0;\r\n        test3_DW.FaultPresent = true;\r\n\r\n        /* Outport: '<Root>/Faults' */\r\n        test3_Y.Faults_d.LowTemp = true;\r\n      }\r\n    }\r\n\r\n    /* End of Outport: '<Root>/MinCellTemp' */\r\n    break;\r\n  }\r\n}\r\n\r\n/* Function for Chart: '<S97>/Chart' */\r\nstatic void test3_ChargerContactorState(void)\r\n{\r\n  if (test3_DW.is_ChargerContactorState == 1U) {\r\n    /* Inport: '<Root>/StateRequest' */\r\n    if ((test3_U.StateRequest == Standby) || test3_DW.FaultPresent) {\r\n      test3_DW.is_CloseChgrContactors = test3_IN_NO_ACTIVE_CHILD_k;\r\n      test3_DW.is_ChargerContactorState = test3_IN_OpenChgrContactors;\r\n      test3_DW.ChrgCntctState = Init;\r\n      test3_DW.is_OpenChgrContactors = test3_IN_Ready;\r\n\r\n      /* Merge: '<S677>/ Merge ' */\r\n      test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n      /* Outport: '<Root>/DischargeCurrentReq' */\r\n      test3_Y.DischargeCurrentReq = 0.0F;\r\n    } else {\r\n      switch (test3_DW.is_CloseChgrContactors) {\r\n       case test3_IN_CloseNegCntct:\r\n        if ((uint32_T)(test3_DW.temporalCounter_i5 * 10LL) >= 200UL) {\r\n          test3_DW.is_CloseChgrContactors = test3_IN_ClosePreChrgRly_k;\r\n          test3_DW.temporalCounter_i5 = 0UL;\r\n          test3_B.PreChargeRelayChgrCmd = true;\r\n        } else {\r\n          test3_B.NegContactorChgrCmd = true;\r\n        }\r\n        break;\r\n\r\n       case test3_IN_ClosePosCntct:\r\n        if ((uint32_T)(test3_DW.temporalCounter_i5 * 10LL) >= 400UL) {\r\n          test3_DW.is_CloseChgrContactors = test3_IN_OpenPreChrgRly_k;\r\n          test3_B.PreChargeRelayChgrCmd = false;\r\n          test3_DW.ChrgCntctState = Close;\r\n        } else {\r\n          test3_B.PosContactorChgrCmd = true;\r\n        }\r\n        break;\r\n\r\n       case test3_IN_ClosePreChrgRly_k:\r\n        if (test3_DW.temporalCounter_i5 >= 400UL) {\r\n          test3_DW.is_CloseChgrContactors = test3_IN_ClosePosCntct;\r\n          test3_DW.temporalCounter_i5 = 0UL;\r\n          test3_B.PosContactorChgrCmd = true;\r\n        } else {\r\n          test3_B.PreChargeRelayChgrCmd = true;\r\n        }\r\n        break;\r\n\r\n       default:\r\n        /* case IN_OpenPreChrgRly: */\r\n        test3_B.PreChargeRelayChgrCmd = false;\r\n        test3_DW.ChrgCntctState = Close;\r\n        break;\r\n      }\r\n    }\r\n\r\n    /* Inport: '<Root>/StateRequest' */\r\n    /* case IN_OpenChgrContactors: */\r\n  } else if ((test3_U.StateRequest == Charging) && (test3_DW.InvtrCntctState ==\r\n              Open) && (!test3_DW.FaultPresent)) {\r\n    test3_DW.is_OpenChgrContactors = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_ChargerContactorState = test3_IN_CloseChgrContactors;\r\n    test3_DW.ChrgCntctState = Init;\r\n    test3_DW.is_CloseChgrContactors = test3_IN_CloseNegCntct;\r\n    test3_DW.temporalCounter_i5 = 0UL;\r\n    test3_B.NegContactorChgrCmd = true;\r\n  } else {\r\n    switch (test3_DW.is_OpenChgrContactors) {\r\n     case test3_IN_ClosePreChrgRly:\r\n      if ((uint32_T)(test3_DW.temporalCounter_i5 * 10LL) >= 200UL) {\r\n        test3_DW.is_OpenChgrContactors = test3_IN_OpenPosCntct;\r\n        test3_DW.temporalCounter_i5 = 0UL;\r\n        test3_B.PosContactorChgrCmd = false;\r\n      } else {\r\n        test3_B.PreChargeRelayChgrCmd = true;\r\n      }\r\n      break;\r\n\r\n     case test3_IN_OpenNegCntct:\r\n      test3_B.NegContactorChgrCmd = false;\r\n      test3_DW.ChrgCntctState = Open;\r\n\r\n      /* Outport: '<Root>/Faults' */\r\n      test3_Y.Faults_d.Charger = false;\r\n      break;\r\n\r\n     case test3_IN_OpenPosCntct:\r\n      if ((uint32_T)(test3_DW.temporalCounter_i5 * 10LL) >= 400UL) {\r\n        test3_DW.is_OpenChgrContactors = test3_IN_OpenPreChrgRly;\r\n        test3_DW.temporalCounter_i5 = 0UL;\r\n        test3_B.PreChargeRelayChgrCmd = false;\r\n      } else {\r\n        test3_B.PosContactorChgrCmd = false;\r\n      }\r\n      break;\r\n\r\n     case test3_IN_OpenPos_NegCntct1:\r\n      if ((uint32_T)(test3_DW.temporalCounter_i5 * 10LL) >= 200UL) {\r\n        test3_DW.is_OpenChgrContactors = test3_IN_OpenNegCntct;\r\n        test3_B.NegContactorChgrCmd = false;\r\n        test3_DW.ChrgCntctState = Open;\r\n\r\n        /* Outport: '<Root>/Faults' */\r\n        test3_Y.Faults_d.Charger = false;\r\n      } else {\r\n        test3_B.PosContactorInvtrCmd = false;\r\n        test3_B.NegContactorInvtrCmd = false;\r\n      }\r\n      break;\r\n\r\n     case test3_IN_OpenPreChrgRly:\r\n      if ((uint32_T)(test3_DW.temporalCounter_i5 * 10LL) >= 200UL) {\r\n        test3_DW.is_OpenChgrContactors = test3_IN_OpenNegCntct;\r\n        test3_B.NegContactorChgrCmd = false;\r\n        test3_DW.ChrgCntctState = Open;\r\n\r\n        /* Outport: '<Root>/Faults' */\r\n        test3_Y.Faults_d.Charger = false;\r\n      } else {\r\n        test3_B.PreChargeRelayChgrCmd = false;\r\n      }\r\n      break;\r\n\r\n     default:\r\n      /* case IN_Ready: */\r\n      if (test3_DW.PreContact == 1.0) {\r\n        test3_DW.is_OpenChgrContactors = test3_IN_ClosePreChrgRly;\r\n        test3_DW.temporalCounter_i5 = 0UL;\r\n        test3_B.PreChargeRelayChgrCmd = true;\r\n      } else if (test3_DW.PreContact == 0.0) {\r\n        test3_DW.is_OpenChgrContactors = test3_IN_OpenPos_NegCntct1;\r\n        test3_DW.temporalCounter_i5 = 0UL;\r\n        test3_B.PosContactorInvtrCmd = false;\r\n        test3_B.NegContactorInvtrCmd = false;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n/* Function for Chart: '<S97>/Chart' */\r\nstatic void test3_InverterContactorState(void)\r\n{\r\n  if (test3_DW.is_InverterContactorState == 1U) {\r\n    /* Inport: '<Root>/StateRequest' */\r\n    if ((test3_U.StateRequest == Standby) || test3_DW.FaultPresent) {\r\n      test3_DW.is_CloseInvtrContactors = test3_IN_NO_ACTIVE_CHILD_k;\r\n      test3_DW.is_InverterContactorState = test3_IN_OpenInvtrContactors;\r\n      test3_DW.InvtrCntctState = Init;\r\n      test3_DW.is_OpenInvtrContactors = test3_IN_Ready;\r\n\r\n      /* Merge: '<S677>/ Merge ' */\r\n      test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n      /* Outport: '<Root>/DischargeCurrentReq' */\r\n      test3_Y.DischargeCurrentReq = 0.0F;\r\n    } else {\r\n      switch (test3_DW.is_CloseInvtrContactors) {\r\n       case test3_IN_CloseNegCntct:\r\n        if ((uint32_T)(test3_DW.temporalCounter_i3 * 10LL) >= 200UL) {\r\n          test3_DW.is_CloseInvtrContactors = test3_IN_ClosePreChrgRly_k;\r\n          test3_DW.temporalCounter_i3 = 0UL;\r\n          test3_B.PreChargeRelayInvtrCmd = true;\r\n        } else {\r\n          test3_B.NegContactorInvtrCmd = true;\r\n        }\r\n        break;\r\n\r\n       case test3_IN_ClosePosCntct:\r\n        if ((uint32_T)(test3_DW.temporalCounter_i3 * 10LL) >= 400UL) {\r\n          test3_DW.is_CloseInvtrContactors = test3_IN_OpenPreChrgRly_k;\r\n          test3_B.PreChargeRelayInvtrCmd = false;\r\n          test3_DW.InvtrCntctState = Close;\r\n        } else {\r\n          test3_B.PosContactorInvtrCmd = true;\r\n        }\r\n        break;\r\n\r\n       case test3_IN_ClosePreChrgRly_k:\r\n        if (test3_DW.temporalCounter_i3 >= 400UL) {\r\n          test3_DW.is_CloseInvtrContactors = test3_IN_ClosePosCntct;\r\n          test3_DW.temporalCounter_i3 = 0UL;\r\n          test3_B.PosContactorInvtrCmd = true;\r\n        } else {\r\n          test3_B.PreChargeRelayInvtrCmd = true;\r\n        }\r\n        break;\r\n\r\n       default:\r\n        /* case IN_OpenPreChrgRly: */\r\n        test3_B.PreChargeRelayInvtrCmd = false;\r\n        test3_DW.InvtrCntctState = Close;\r\n        break;\r\n      }\r\n    }\r\n\r\n    /* Inport: '<Root>/StateRequest' */\r\n    /* case IN_OpenInvtrContactors: */\r\n  } else if ((test3_U.StateRequest == Driving) && (test3_DW.ChrgCntctState ==\r\n              Open) && (!test3_DW.FaultPresent)) {\r\n    test3_DW.is_OpenInvtrContactors = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_InverterContactorState = test3_IN_CloseInvtrContactors;\r\n    test3_DW.InvtrCntctState = Init;\r\n    test3_DW.is_CloseInvtrContactors = test3_IN_CloseNegCntct;\r\n    test3_DW.temporalCounter_i3 = 0UL;\r\n    test3_B.NegContactorInvtrCmd = true;\r\n  } else {\r\n    switch (test3_DW.is_OpenInvtrContactors) {\r\n     case test3_IN_ClosePreChrgRly:\r\n      if ((uint32_T)(test3_DW.temporalCounter_i3 * 10LL) >= 200UL) {\r\n        test3_DW.is_OpenInvtrContactors = test3_IN_OpenPosCntct;\r\n        test3_DW.temporalCounter_i3 = 0UL;\r\n        test3_B.PosContactorInvtrCmd = false;\r\n      } else {\r\n        test3_B.PreChargeRelayInvtrCmd = true;\r\n      }\r\n      break;\r\n\r\n     case test3_IN_OpenNegCntct:\r\n      test3_B.NegContactorInvtrCmd = false;\r\n      test3_DW.InvtrCntctState = Open;\r\n\r\n      /* Outport: '<Root>/Faults' */\r\n      test3_Y.Faults_d.Inverter = false;\r\n      break;\r\n\r\n     case test3_IN_OpenPosCntct:\r\n      if ((uint32_T)(test3_DW.temporalCounter_i3 * 10LL) >= 200UL) {\r\n        test3_DW.is_OpenInvtrContactors = test3_IN_OpenPreChrgRly;\r\n        test3_DW.temporalCounter_i3 = 0UL;\r\n        test3_B.PreChargeRelayInvtrCmd = false;\r\n      } else {\r\n        test3_B.PosContactorInvtrCmd = false;\r\n      }\r\n      break;\r\n\r\n     case test3_IN_OpenPos_NegCntct1:\r\n      if ((uint32_T)(test3_DW.temporalCounter_i3 * 10LL) >= 200UL) {\r\n        test3_DW.is_OpenInvtrContactors = test3_IN_OpenNegCntct;\r\n        test3_B.NegContactorInvtrCmd = false;\r\n        test3_DW.InvtrCntctState = Open;\r\n\r\n        /* Outport: '<Root>/Faults' */\r\n        test3_Y.Faults_d.Inverter = false;\r\n      } else {\r\n        test3_B.PosContactorInvtrCmd = false;\r\n        test3_B.NegContactorInvtrCmd = false;\r\n      }\r\n      break;\r\n\r\n     case test3_IN_OpenPreChrgRly:\r\n      if ((uint32_T)(test3_DW.temporalCounter_i3 * 10LL) >= 200UL) {\r\n        test3_DW.is_OpenInvtrContactors = test3_IN_OpenNegCntct;\r\n        test3_B.NegContactorInvtrCmd = false;\r\n        test3_DW.InvtrCntctState = Open;\r\n\r\n        /* Outport: '<Root>/Faults' */\r\n        test3_Y.Faults_d.Inverter = false;\r\n      } else {\r\n        test3_B.PreChargeRelayInvtrCmd = false;\r\n      }\r\n      break;\r\n\r\n     default:\r\n      /* case IN_Ready: */\r\n      if (test3_DW.PreContact == 1.0) {\r\n        test3_DW.is_OpenInvtrContactors = test3_IN_ClosePreChrgRly;\r\n        test3_DW.temporalCounter_i3 = 0UL;\r\n        test3_B.PreChargeRelayInvtrCmd = true;\r\n      } else if (test3_DW.PreContact == 0.0) {\r\n        test3_DW.is_OpenInvtrContactors = test3_IN_OpenPos_NegCntct1;\r\n        test3_DW.temporalCounter_i3 = 0UL;\r\n        test3_B.PosContactorInvtrCmd = false;\r\n        test3_B.NegContactorInvtrCmd = false;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n/* Function for Chart: '<S97>/Chart' */\r\nstatic void test3_Balancing(const real32_T TmpSignalConversionAtSFunctionI[96])\r\n{\r\n  boolean_T exitg1;\r\n  if (test3_DW.is_Balancing == 1U) {\r\n    /* Outport: '<Root>/BMS_State' incorporates:\r\n     *  Inport: '<Root>/Pack_Current'\r\n     *  Inport: '<Root>/SOC'\r\n     *  Outport: '<Root>/BalCmd'\r\n     *  Outport: '<Root>/ChargeModeReq'\r\n     *  Outport: '<Root>/MaxCellVolt'\r\n     *  Outport: '<Root>/MinCellVolt'\r\n     */\r\n    if ((test3_Y.BMS_State == BMS_Charging) && (test3_U.SOC > 60.0F) &&\r\n        (test3_DW.temporalCounter_i4 >= 2000UL) && (test3_DW.DeltaCellVolt >\r\n         0.01F) && ((real32_T)fabs(test3_U.Pack_Current) <= 10.0F) &&\r\n        (test3_Y.ChargeModeReq != FastCharge_Mode)) {\r\n      test3_DW.is_Balancing = test3_IN_BalancingON;\r\n      test3_DW.DeltaCellVolt = test3_Y.MaxCellVolt - test3_Y.MinCellVolt;\r\n      test3_DW.is_BalancingON = test3_IN_BalActive;\r\n      test3_DW.temporalCounter_i4 = 0UL;\r\n      for (test3_B.i_cx = 0; test3_B.i_cx < 96; test3_B.i_cx++) {\r\n        test3_Y.BalCmd[test3_B.i_cx] = false;\r\n      }\r\n    } else {\r\n      test3_DW.DeltaCellVolt = test3_Y.MaxCellVolt - test3_Y.MinCellVolt;\r\n    }\r\n\r\n    /* Outport: '<Root>/BMS_State' incorporates:\r\n     *  Inport: '<Root>/Pack_Current'\r\n     *  Inport: '<Root>/SOC'\r\n     *  Outport: '<Root>/BalCmd'\r\n     *  Outport: '<Root>/ChargeModeReq'\r\n     *  Outport: '<Root>/MaxCellVolt'\r\n     *  Outport: '<Root>/MinCellVolt'\r\n     */\r\n    /* case IN_BalancingON: */\r\n  } else if ((test3_Y.BMS_State != BMS_Charging) || (test3_Y.ChargeModeReq ==\r\n              FastCharge_Mode) || (test3_U.SOC <= 54.0F) || ((real32_T)fabs\r\n              (test3_U.Pack_Current) > 10.0F)) {\r\n    test3_DW.is_BalancingON = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_Balancing = test3_IN_BalancingOFF;\r\n    test3_DW.temporalCounter_i4 = 0UL;\r\n    test3_DW.flgBalCompl = false;\r\n    for (test3_B.i_cx = 0; test3_B.i_cx < 96; test3_B.i_cx++) {\r\n      test3_B.BalCmd[test3_B.i_cx] = false;\r\n      test3_Y.BalCmd[test3_B.i_cx] = false;\r\n    }\r\n\r\n    test3_DW.DeltaCellVolt = test3_Y.MaxCellVolt - test3_Y.MinCellVolt;\r\n  } else {\r\n    test3_DW.DeltaCellVolt = test3_Y.MaxCellVolt - test3_Y.MinCellVolt;\r\n    switch (test3_DW.is_BalancingON) {\r\n     case test3_IN_BalActive:\r\n      if (test3_DW.temporalCounter_i4 >= 40UL) {\r\n        test3_DW.is_BalancingON = test3_IN_BalActive1;\r\n        test3_DW.temporalCounter_i4 = 0UL;\r\n        for (test3_B.i_cx = 0; test3_B.i_cx < 96; test3_B.i_cx++) {\r\n          test3_Y.BalCmd[test3_B.i_cx] = test3_B.BalCmd[test3_B.i_cx];\r\n        }\r\n      } else if (test3_DW.flgBalCompl) {\r\n        test3_DW.is_BalancingON = test3_IN_BalNotActive;\r\n        test3_DW.temporalCounter_i4 = 0UL;\r\n      } else {\r\n        for (test3_B.i_cx = 0; test3_B.i_cx < 96; test3_B.i_cx++) {\r\n          test3_B.BalCmd[test3_B.i_cx] =\r\n            (TmpSignalConversionAtSFunctionI[test3_B.i_cx] - test3_Y.MinCellVolt\r\n             > 0.005F);\r\n        }\r\n\r\n        test3_DW.flgBalCompl = true;\r\n        test3_B.i_cx = 0;\r\n        exitg1 = false;\r\n        while ((!exitg1) && (test3_B.i_cx < 96)) {\r\n          if (test3_B.BalCmd[test3_B.i_cx]) {\r\n            test3_DW.flgBalCompl = false;\r\n            exitg1 = true;\r\n          } else {\r\n            test3_B.i_cx++;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n     case test3_IN_BalActive1:\r\n      if (test3_DW.temporalCounter_i4 >= 300UL) {\r\n        test3_DW.is_BalancingON = test3_IN_BalActive;\r\n        test3_DW.temporalCounter_i4 = 0UL;\r\n        for (test3_B.i_cx = 0; test3_B.i_cx < 96; test3_B.i_cx++) {\r\n          test3_Y.BalCmd[test3_B.i_cx] = false;\r\n        }\r\n      } else {\r\n        for (test3_B.i_cx = 0; test3_B.i_cx < 96; test3_B.i_cx++) {\r\n          test3_Y.BalCmd[test3_B.i_cx] = test3_B.BalCmd[test3_B.i_cx];\r\n        }\r\n      }\r\n      break;\r\n\r\n     default:\r\n      /* case IN_BalNotActive: */\r\n      if ((test3_DW.temporalCounter_i4 >= 3000UL) && (test3_DW.DeltaCellVolt >\r\n           0.01F)) {\r\n        test3_DW.is_BalancingON = test3_IN_BalActive;\r\n        test3_DW.temporalCounter_i4 = 0UL;\r\n        for (test3_B.i_cx = 0; test3_B.i_cx < 96; test3_B.i_cx++) {\r\n          test3_Y.BalCmd[test3_B.i_cx] = false;\r\n        }\r\n      } else if (test3_DW.temporalCounter_i4 >= 6000UL) {\r\n        test3_DW.is_BalancingON = test3_IN_NO_ACTIVE_CHILD_k;\r\n        test3_DW.is_Balancing = test3_IN_BalancingOFF;\r\n        test3_DW.temporalCounter_i4 = 0UL;\r\n        test3_DW.flgBalCompl = false;\r\n        for (test3_B.i_cx = 0; test3_B.i_cx < 96; test3_B.i_cx++) {\r\n          test3_B.BalCmd[test3_B.i_cx] = false;\r\n          test3_Y.BalCmd[test3_B.i_cx] = false;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n/* Function for Chart: '<S97>/Chart' */\r\nstatic void test3_enter_internal_Main(void)\r\n{\r\n  test3_DW.is_MainStateMachine = test3_IN_Standby;\r\n\r\n  /* Outport: '<Root>/BMS_State' */\r\n  test3_Y.BMS_State = BMS_Standby;\r\n\r\n  /* Outport: '<Root>/ChargeVoltReq' */\r\n  test3_Y.ChargeVoltReq = 0.0F;\r\n\r\n  /* Outport: '<Root>/ChargeModeReq' */\r\n  test3_Y.ChargeModeReq = Init_Mode;\r\n\r\n  /* Outport: '<Root>/Charge_Complete' */\r\n  test3_Y.Charge_Complete = 0.0;\r\n\r\n  /* Outport: '<Root>/Faults' */\r\n  test3_Y.Faults_d.CurrentSensor = false;\r\n  test3_Y.Faults_d.InputPowerFault = false;\r\n  test3_Y.Faults_d.BMBFault = false;\r\n  test3_Y.Faults_d.ShortCircuitFault = false;\r\n  test3_Y.Faults_d.MemoryFault = false;\r\n  test3_Y.Faults_d.CAN_VCU_Fault = false;\r\n  test3_DW.durationCounter_2 = 0L;\r\n  test3_DW.durationCounter_1_p = 0L;\r\n  test3_DW.is_MonitorFault_In = test3_IN_NoInputFault;\r\n  test3_DW.PreContact = 0.0;\r\n\r\n  /* Outport: '<Root>/Faults' */\r\n  test3_Y.Faults_d.OverChargeCurrent = false;\r\n  test3_Y.Faults_d.OverDischargeCurrent = false;\r\n  test3_DW.durationCounter_8 = 0L;\r\n  test3_DW.durationCounter_7 = 0L;\r\n  test3_DW.durationCounter_6 = 0L;\r\n  test3_DW.durationCounter_5 = 0L;\r\n  test3_DW.durationCounter_4 = 0L;\r\n  test3_DW.durationCounter_3 = 0L;\r\n  test3_DW.durationCounter_2_a = 0L;\r\n  test3_DW.durationCounter_1_k = 0L;\r\n  test3_DW.is_MonitorCurrLim = test3_IN_NoCurrLimFault;\r\n\r\n  /* Outport: '<Root>/Faults' */\r\n  test3_Y.Faults_d.OverVolt = false;\r\n  test3_Y.Faults_d.UnderVolt = false;\r\n  test3_Y.Faults_d.VoltSensor = false;\r\n  test3_Y.Faults_d.BalEn = false;\r\n  test3_Y.Faults_d.PreChargeFault = false;\r\n  test3_DW.durationCounter_2_aa = 0L;\r\n  test3_DW.durationCounter_1_c = 0L;\r\n  test3_DW.is_MonitorCellVoltage = test3_IN_NoCellVoltFault;\r\n  test3_DW.FaultPresent = false;\r\n\r\n  /* Outport: '<Root>/Faults' */\r\n  test3_Y.Faults_d.HighTemp = false;\r\n  test3_Y.Faults_d.LowTemp = false;\r\n  test3_DW.durationCounter_2_h = 0L;\r\n  test3_DW.durationCounter_1_p1 = 0L;\r\n  test3_DW.is_MonitorCellTemp = test3_IN_NoCellTempFault;\r\n\r\n  /* Outport: '<Root>/Faults' */\r\n  test3_Y.Faults_d.Charger = false;\r\n  test3_DW.is_ChargerContactorState = test3_IN_OpenChgrContactors;\r\n  test3_DW.ChrgCntctState = Init;\r\n  test3_DW.is_OpenChgrContactors = test3_IN_Ready;\r\n\r\n  /* Outport: '<Root>/Faults' */\r\n  test3_Y.Faults_d.Inverter = false;\r\n  test3_DW.is_InverterContactorState = test3_IN_OpenInvtrContactors;\r\n  test3_DW.InvtrCntctState = Init;\r\n  test3_DW.is_OpenInvtrContactors = test3_IN_Ready;\r\n\r\n  /* Merge: '<S677>/ Merge ' */\r\n  test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n  /* Outport: '<Root>/DischargeCurrentReq' */\r\n  test3_Y.DischargeCurrentReq = 0.0F;\r\n  test3_DW.is_test = test3_IN_test1;\r\n  test3_DW.temporalCounter_i1_h = 0UL;\r\n\r\n  /* Outport: '<Root>/led' */\r\n  test3_Y.led = 0.0;\r\n  test3_DW.is_Balancing = test3_IN_BalancingOFF;\r\n  test3_DW.temporalCounter_i4 = 0UL;\r\n  test3_DW.flgBalCompl = false;\r\n  for (test3_B.i_k = 0; test3_B.i_k < 96; test3_B.i_k++) {\r\n    test3_B.BalCmd[test3_B.i_k] = false;\r\n\r\n    /* Outport: '<Root>/BalCmd' */\r\n    test3_Y.BalCmd[test3_B.i_k] = false;\r\n  }\r\n\r\n  /* Outport: '<Root>/MaxCellVolt' incorporates:\r\n   *  Outport: '<Root>/MinCellVolt'\r\n   */\r\n  test3_DW.DeltaCellVolt = test3_Y.MaxCellVolt - test3_Y.MinCellVolt;\r\n}\r\n\r\n/* Function for Chart: '<S97>/Chart' */\r\nstatic void test3_Main(const real32_T TmpSignalConversionAtSFunctio_g[16], const\r\n  real32_T TmpSignalConversionAtSFunctionI[96])\r\n{\r\n  /* Inport: '<Root>/Reset' */\r\n  if (test3_U.Reset == 1.0F) {\r\n    test3_DW.is_BalancingON = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_CloseInvtrContactors = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_CloseChgrContactors = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_exit_internal_Charginig();\r\n    test3_enter_internal_Main();\r\n  } else {\r\n    switch (test3_DW.is_MainStateMachine) {\r\n     case test3_IN_Charginig:\r\n      test3_Charginig();\r\n      break;\r\n\r\n     case test3_IN_Driving:\r\n      if (test3_DW.FaultPresent) {\r\n        test3_DW.is_MainStateMachine = test3_IN_Fault;\r\n\r\n        /* Outport: '<Root>/BMS_State' */\r\n        test3_Y.BMS_State = BMS_Fault;\r\n\r\n        /* Merge: '<S677>/ Merge ' */\r\n        test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n        /* Outport: '<Root>/DischargeCurrentReq' */\r\n        test3_Y.DischargeCurrentReq = 0.0F;\r\n\r\n        /* Outport: '<Root>/ChargeVoltReq' */\r\n        test3_Y.ChargeVoltReq = 0.0F;\r\n      } else {\r\n        /* Inport: '<Root>/StateRequest' */\r\n        test3_B.i_m = test3_U.StateRequest;\r\n        if ((test3_B.i_m != Driving) && (test3_DW.InvtrCntctState == Init)) {\r\n          test3_DW.is_MainStateMachine = test3_IN_Standby;\r\n\r\n          /* Outport: '<Root>/BMS_State' */\r\n          test3_Y.BMS_State = BMS_Standby;\r\n\r\n          /* Merge: '<S677>/ Merge ' */\r\n          test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n          /* Outport: '<Root>/ChargeVoltReq' */\r\n          test3_Y.ChargeVoltReq = 0.0F;\r\n\r\n          /* Outport: '<Root>/ChargeModeReq' */\r\n          test3_Y.ChargeModeReq = Init_Mode;\r\n\r\n          /* Outport: '<Root>/Charge_Complete' */\r\n          test3_Y.Charge_Complete = 0.0;\r\n        } else if (test3_B.i_m == Charging) {\r\n          test3_DW.is_MainStateMachine = test3_IN_Charginig;\r\n\r\n          /* Outport: '<Root>/BMS_State' */\r\n          test3_Y.BMS_State = BMS_Charging;\r\n          test3_DW.is_Charginig = test3_IN_Init_Mode;\r\n\r\n          /* Outport: '<Root>/ChargeModeReq' */\r\n          test3_Y.ChargeModeReq = Init_Mode;\r\n\r\n          /* Merge: '<S677>/ Merge ' */\r\n          test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n          /* Outport: '<Root>/ChargeVoltReq' */\r\n          test3_Y.ChargeVoltReq = 0.0F;\r\n        } else {\r\n          /* Merge: '<S677>/ Merge ' incorporates:\r\n           *  Outport: '<Root>/ChargeCurrentLimit'\r\n           */\r\n          test3_B.ChargeCurrentReq = test3_Y.ChargeCurrentLimit;\r\n\r\n          /* Outport: '<Root>/DischargeCurrentReq' incorporates:\r\n           *  Outport: '<Root>/DischargeCurrentLimit'\r\n           */\r\n          test3_Y.DischargeCurrentReq = test3_Y.DischargeCurrentLimit;\r\n        }\r\n      }\r\n      break;\r\n\r\n     case test3_IN_Fault:\r\n      /* Outport: '<Root>/BMS_State' */\r\n      test3_Y.BMS_State = BMS_Fault;\r\n\r\n      /* Merge: '<S677>/ Merge ' */\r\n      test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n      /* Outport: '<Root>/DischargeCurrentReq' */\r\n      test3_Y.DischargeCurrentReq = 0.0F;\r\n\r\n      /* Outport: '<Root>/ChargeVoltReq' */\r\n      test3_Y.ChargeVoltReq = 0.0F;\r\n      break;\r\n\r\n     default:\r\n      /* Outport: '<Root>/Charge_Complete' */\r\n      /* case IN_Standby: */\r\n      test3_Y.Charge_Complete = 0.0;\r\n      if (test3_DW.FaultPresent) {\r\n        test3_DW.is_MainStateMachine = test3_IN_Fault;\r\n\r\n        /* Outport: '<Root>/BMS_State' */\r\n        test3_Y.BMS_State = BMS_Fault;\r\n\r\n        /* Merge: '<S677>/ Merge ' */\r\n        test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n        /* Outport: '<Root>/DischargeCurrentReq' */\r\n        test3_Y.DischargeCurrentReq = 0.0F;\r\n\r\n        /* Outport: '<Root>/ChargeVoltReq' */\r\n        test3_Y.ChargeVoltReq = 0.0F;\r\n      } else {\r\n        /* Inport: '<Root>/StateRequest' */\r\n        test3_B.i_m = test3_U.StateRequest;\r\n        if ((test3_B.i_m == Charging) && (test3_DW.ChrgCntctState == Close)) {\r\n          test3_DW.is_MainStateMachine = test3_IN_Charginig;\r\n\r\n          /* Outport: '<Root>/BMS_State' */\r\n          test3_Y.BMS_State = BMS_Charging;\r\n          test3_DW.is_Charginig = test3_IN_Init_Mode;\r\n\r\n          /* Outport: '<Root>/ChargeModeReq' */\r\n          test3_Y.ChargeModeReq = Init_Mode;\r\n\r\n          /* Merge: '<S677>/ Merge ' */\r\n          test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n          /* Outport: '<Root>/ChargeVoltReq' */\r\n          test3_Y.ChargeVoltReq = 0.0F;\r\n        } else if ((test3_B.i_m == Driving) && (test3_DW.InvtrCntctState ==\r\n                    Close)) {\r\n          test3_DW.is_MainStateMachine = test3_IN_Driving;\r\n\r\n          /* Outport: '<Root>/BMS_State' */\r\n          test3_Y.BMS_State = BMS_Driving;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n\r\n    test3_FaultMonitoring();\r\n    test3_ChargerContactorState();\r\n    test3_InverterContactorState();\r\n    if (test3_DW.is_test == 1U) {\r\n      test3_DW.is_test = test3_IN_test1;\r\n      test3_DW.temporalCounter_i1_h = 0UL;\r\n\r\n      /* Outport: '<Root>/led' */\r\n      test3_Y.led = 0.0;\r\n    } else {\r\n      /* Outport: '<Root>/led' */\r\n      /* case IN_test1: */\r\n      test3_Y.led = 0.0;\r\n      if (test3_DW.temporalCounter_i1_h >= 100000UL) {\r\n        test3_DW.is_test = test3_IN_test;\r\n\r\n        /* Outport: '<Root>/led' */\r\n        test3_Y.led = 1.0;\r\n      }\r\n    }\r\n\r\n    test3_Balancing(TmpSignalConversionAtSFunctionI);\r\n    for (test3_B.i_m = 0; test3_B.i_m < 96; test3_B.i_m++) {\r\n      /* Outport: '<Root>/MaxCellCmd' incorporates:\r\n       *  Outport: '<Root>/MaxCellVolt'\r\n       */\r\n      test3_Y.MaxCellCmd[test3_B.i_m] =\r\n        (TmpSignalConversionAtSFunctionI[test3_B.i_m] - test3_Y.MaxCellVolt >=\r\n         0.0F);\r\n\r\n      /* Outport: '<Root>/MinCellCmd' incorporates:\r\n       *  Outport: '<Root>/MinCellVolt'\r\n       */\r\n      test3_Y.MinCellCmd[test3_B.i_m] =\r\n        (TmpSignalConversionAtSFunctionI[test3_B.i_m] - test3_Y.MinCellVolt <=\r\n         0.0F);\r\n    }\r\n\r\n    for (test3_B.i_m = 0; test3_B.i_m < 16; test3_B.i_m++) {\r\n      /* Outport: '<Root>/MaxTempCmd' incorporates:\r\n       *  Outport: '<Root>/MaxCellTemp'\r\n       */\r\n      test3_Y.MaxTempCmd[test3_B.i_m] =\r\n        (TmpSignalConversionAtSFunctio_g[test3_B.i_m] - test3_Y.MaxCellTemp >=\r\n         0.0F);\r\n\r\n      /* Outport: '<Root>/MinTempCmd' incorporates:\r\n       *  Outport: '<Root>/MinCellTemp'\r\n       */\r\n      test3_Y.MinTempCmd[test3_B.i_m] =\r\n        (TmpSignalConversionAtSFunctio_g[test3_B.i_m] - test3_Y.MinCellTemp <=\r\n         0.0F);\r\n    }\r\n  }\r\n\r\n  /* End of Inport: '<Root>/Reset' */\r\n}\r\n\r\n/* Model step function */\r\nvoid test3_step(void)\r\n{\r\n  g_dsp_internal_SlidingWindo_k_T *obj;\r\n  boolean_T rtb_Compare_ar;\r\n  boolean_T rtb_Compare_aw;\r\n  boolean_T rtb_Compare_b4;\r\n  boolean_T rtb_Compare_cm;\r\n  boolean_T rtb_Compare_da;\r\n  boolean_T rtb_Compare_ee;\r\n  boolean_T rtb_Compare_eo;\r\n  boolean_T rtb_Compare_et;\r\n  boolean_T rtb_Compare_euj;\r\n  boolean_T rtb_Compare_gb;\r\n  boolean_T rtb_Compare_gk;\r\n  boolean_T rtb_Compare_gz;\r\n  boolean_T rtb_Compare_is;\r\n  boolean_T rtb_Compare_l0;\r\n  boolean_T rtb_Compare_lu;\r\n  boolean_T rtb_Compare_mpz;\r\n  boolean_T rtb_Compare_ms;\r\n  boolean_T rtb_Compare_ne;\r\n  boolean_T rtb_Compare_pd;\r\n\r\n  /* Inport: '<Root>/CellTemperatures' */\r\n  test3_MovingAverage(test3_U.CellTemperatures[0], &test3_B.MovingAverage,\r\n                      &test3_DW.MovingAverage);\r\n  test3_MovingAverage(test3_U.CellTemperatures[1], &test3_B.MovingAverage1,\r\n                      &test3_DW.MovingAverage1);\r\n  test3_MovingAverage(test3_U.CellTemperatures[2], &test3_B.MovingAverage2,\r\n                      &test3_DW.MovingAverage2);\r\n  test3_MovingAverage(test3_U.CellTemperatures[3], &test3_B.MovingAverage3,\r\n                      &test3_DW.MovingAverage3);\r\n  test3_MovingAverage(test3_U.CellTemperatures[4], &test3_B.MovingAverage4,\r\n                      &test3_DW.MovingAverage4);\r\n  test3_MovingAverage(test3_U.CellTemperatures[5], &test3_B.MovingAverage5,\r\n                      &test3_DW.MovingAverage5);\r\n  test3_MovingAverage(test3_U.CellTemperatures[6], &test3_B.MovingAverage6,\r\n                      &test3_DW.MovingAverage6);\r\n  test3_MovingAverage(test3_U.CellTemperatures[7], &test3_B.MovingAverage7,\r\n                      &test3_DW.MovingAverage7);\r\n  test3_MovingAverage(test3_U.CellTemperatures[8], &test3_B.MovingAverage8,\r\n                      &test3_DW.MovingAverage8);\r\n  test3_MovingAverage(test3_U.CellTemperatures[9], &test3_B.MovingAverage9,\r\n                      &test3_DW.MovingAverage9);\r\n  test3_MovingAverage(test3_U.CellTemperatures[10], &test3_B.MovingAverage10,\r\n                      &test3_DW.MovingAverage10);\r\n  test3_MovingAverage(test3_U.CellTemperatures[11], &test3_B.MovingAverage11,\r\n                      &test3_DW.MovingAverage11);\r\n  test3_MovingAverage(test3_U.CellTemperatures[12], &test3_B.MovingAverage12,\r\n                      &test3_DW.MovingAverage12);\r\n  test3_MovingAverage(test3_U.CellTemperatures[13], &test3_B.MovingAverage13,\r\n                      &test3_DW.MovingAverage13);\r\n  test3_MovingAverage(test3_U.CellTemperatures[14], &test3_B.MovingAverage14,\r\n                      &test3_DW.MovingAverage14);\r\n  test3_MovingAverage(test3_U.CellTemperatures[15], &test3_B.MovingAverage15,\r\n                      &test3_DW.MovingAverage15);\r\n\r\n  /* MinMax: '<Root>/Min1' incorporates:\r\n   *  MinMax: '<Root>/Max1'\r\n   */\r\n  test3_B.TmpSignalConversionAtSFunctio_g[0] =\r\n    test3_B.MovingAverage.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[1] =\r\n    test3_B.MovingAverage1.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[2] =\r\n    test3_B.MovingAverage2.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[3] =\r\n    test3_B.MovingAverage3.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[4] =\r\n    test3_B.MovingAverage4.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[5] =\r\n    test3_B.MovingAverage5.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[6] =\r\n    test3_B.MovingAverage6.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[7] =\r\n    test3_B.MovingAverage7.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[8] =\r\n    test3_B.MovingAverage8.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[9] =\r\n    test3_B.MovingAverage9.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[10] =\r\n    test3_B.MovingAverage10.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[11] =\r\n    test3_B.MovingAverage11.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[12] =\r\n    test3_B.MovingAverage12.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[13] =\r\n    test3_B.MovingAverage13.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[14] =\r\n    test3_B.MovingAverage14.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[15] =\r\n    test3_B.MovingAverage15.ChargeCurrentLimit;\r\n  test3_Y.MinCellTemp = test3_B.MovingAverage.ChargeCurrentLimit;\r\n\r\n  /* MinMax: '<Root>/Max1' incorporates:\r\n   *  MinMax: '<Root>/Min1'\r\n   */\r\n  test3_Y.MaxCellTemp = test3_B.MovingAverage.ChargeCurrentLimit;\r\n  for (test3_B.i = 0; test3_B.i < 15; test3_B.i++) {\r\n    /* MinMax: '<Root>/Min1' incorporates:\r\n     *  MinMax: '<Root>/Max1'\r\n     */\r\n    test3_B.Max = test3_B.TmpSignalConversionAtSFunctio_g[(int32_T)(test3_B.i +\r\n      1)];\r\n    test3_B.Compare = !rtIsNaNF(test3_B.Max);\r\n    if ((!(test3_Y.MinCellTemp <= test3_B.Max)) && test3_B.Compare) {\r\n      test3_Y.MinCellTemp = test3_B.Max;\r\n    }\r\n\r\n    /* MinMax: '<Root>/Max1' */\r\n    if ((!(test3_Y.MaxCellTemp >= test3_B.Max)) && test3_B.Compare) {\r\n      test3_Y.MaxCellTemp = test3_B.Max;\r\n    }\r\n  }\r\n\r\n  /* RelationalOperator: '<S104>/Compare' incorporates:\r\n   *  Constant: '<S101>/Time constant'\r\n   *  Constant: '<S104>/Constant'\r\n   *  Sum: '<S101>/Sum1'\r\n   */\r\n  test3_B.Compare = ((real32_T)(0.031830988618379068 - test3_B.Probe[0]) <= 0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S106>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING != 0U) {\r\n    test3_DW.Integrator_DSTATE = test3_U.CellVoltages[0];\r\n    if (test3_DW.Integrator_DSTATE >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare || (test3_DW.Integrator_PrevResetState != 0)) {\r\n    test3_DW.Integrator_DSTATE = test3_U.CellVoltages[0];\r\n    if (test3_DW.Integrator_DSTATE >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S170>/Compare' incorporates:\r\n   *  Constant: '<S167>/Time constant'\r\n   *  Constant: '<S170>/Constant'\r\n   *  Sum: '<S167>/Sum1'\r\n   */\r\n  test3_B.Compare_p = ((real32_T)(0.031830988618379068 - test3_B.Probe_l[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S172>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_p != 0U) {\r\n    test3_DW.Integrator_DSTATE_a = test3_U.CellVoltages[1];\r\n    if (test3_DW.Integrator_DSTATE_a >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_a = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_a <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_a = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_p || (test3_DW.Integrator_PrevResetState_p != 0)) {\r\n    test3_DW.Integrator_DSTATE_a = test3_U.CellVoltages[1];\r\n    if (test3_DW.Integrator_DSTATE_a >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_a = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_a <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_a = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_a >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_a = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_a <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_a = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S236>/Compare' incorporates:\r\n   *  Constant: '<S233>/Time constant'\r\n   *  Constant: '<S236>/Constant'\r\n   *  Sum: '<S233>/Sum1'\r\n   */\r\n  test3_B.Compare_h = ((real32_T)(0.031830988618379068 - test3_B.Probe_i[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S238>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_g != 0U) {\r\n    test3_DW.Integrator_DSTATE_n = test3_U.CellVoltages[2];\r\n    if (test3_DW.Integrator_DSTATE_n >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_n = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_n <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_n = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_h || (test3_DW.Integrator_PrevResetState_o != 0)) {\r\n    test3_DW.Integrator_DSTATE_n = test3_U.CellVoltages[2];\r\n    if (test3_DW.Integrator_DSTATE_n >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_n = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_n <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_n = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_n >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_n = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_n <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_n = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S302>/Compare' incorporates:\r\n   *  Constant: '<S299>/Time constant'\r\n   *  Constant: '<S302>/Constant'\r\n   *  Sum: '<S299>/Sum1'\r\n   */\r\n  test3_B.Compare_o = ((real32_T)(0.031830988618379068 - test3_B.Probe_o[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S304>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_j != 0U) {\r\n    test3_DW.Integrator_DSTATE_b = test3_U.CellVoltages[3];\r\n    if (test3_DW.Integrator_DSTATE_b >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_b = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_b <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_b = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_o || (test3_DW.Integrator_PrevResetState_e != 0)) {\r\n    test3_DW.Integrator_DSTATE_b = test3_U.CellVoltages[3];\r\n    if (test3_DW.Integrator_DSTATE_b >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_b = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_b <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_b = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_b >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_b = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_b <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_b = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S368>/Compare' incorporates:\r\n   *  Constant: '<S365>/Time constant'\r\n   *  Constant: '<S368>/Constant'\r\n   *  Sum: '<S365>/Sum1'\r\n   */\r\n  test3_B.Compare_k = ((real32_T)(0.031830988618379068 - test3_B.Probe_ii[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S370>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_h != 0U) {\r\n    test3_DW.Integrator_DSTATE_g = test3_U.CellVoltages[4];\r\n    if (test3_DW.Integrator_DSTATE_g >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_g = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_g <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_g = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_k || (test3_DW.Integrator_PrevResetState_oy != 0)) {\r\n    test3_DW.Integrator_DSTATE_g = test3_U.CellVoltages[4];\r\n    if (test3_DW.Integrator_DSTATE_g >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_g = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_g <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_g = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_g >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_g = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_g <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_g = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S434>/Compare' incorporates:\r\n   *  Constant: '<S431>/Time constant'\r\n   *  Constant: '<S434>/Constant'\r\n   *  Sum: '<S431>/Sum1'\r\n   */\r\n  test3_B.Compare_i = ((real32_T)(0.031830988618379068 - test3_B.Probe_e[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S436>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_k != 0U) {\r\n    test3_DW.Integrator_DSTATE_i = test3_U.CellVoltages[5];\r\n    if (test3_DW.Integrator_DSTATE_i >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_i = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_i <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_i = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_i || (test3_DW.Integrator_PrevResetState_c != 0)) {\r\n    test3_DW.Integrator_DSTATE_i = test3_U.CellVoltages[5];\r\n    if (test3_DW.Integrator_DSTATE_i >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_i = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_i <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_i = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_i >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_i = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_i <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_i = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S500>/Compare' incorporates:\r\n   *  Constant: '<S497>/Time constant'\r\n   *  Constant: '<S500>/Constant'\r\n   *  Sum: '<S497>/Sum1'\r\n   */\r\n  test3_B.Compare_e = ((real32_T)(0.031830988618379068 - test3_B.Probe_n[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S502>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_o != 0U) {\r\n    test3_DW.Integrator_DSTATE_e = test3_U.CellVoltages[6];\r\n    if (test3_DW.Integrator_DSTATE_e >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_e = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_e <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_e = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_e || (test3_DW.Integrator_PrevResetState_a != 0)) {\r\n    test3_DW.Integrator_DSTATE_e = test3_U.CellVoltages[6];\r\n    if (test3_DW.Integrator_DSTATE_e >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_e = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_e <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_e = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_e >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_e = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_e <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_e = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S566>/Compare' incorporates:\r\n   *  Constant: '<S563>/Time constant'\r\n   *  Constant: '<S566>/Constant'\r\n   *  Sum: '<S563>/Sum1'\r\n   */\r\n  test3_B.Compare_k5 = ((real32_T)(0.031830988618379068 - test3_B.Probe_ng[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S568>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_g2 != 0U) {\r\n    test3_DW.Integrator_DSTATE_id = test3_U.CellVoltages[7];\r\n    if (test3_DW.Integrator_DSTATE_id >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_id = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_id <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_id = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_k5 || (test3_DW.Integrator_PrevResetState_ch != 0)) {\r\n    test3_DW.Integrator_DSTATE_id = test3_U.CellVoltages[7];\r\n    if (test3_DW.Integrator_DSTATE_id >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_id = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_id <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_id = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_id >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_id = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_id <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_id = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S632>/Compare' incorporates:\r\n   *  Constant: '<S629>/Time constant'\r\n   *  Constant: '<S632>/Constant'\r\n   *  Sum: '<S629>/Sum1'\r\n   */\r\n  test3_B.Compare_l = ((real32_T)(0.031830988618379068 - test3_B.Probe_no[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S634>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_d != 0U) {\r\n    test3_DW.Integrator_DSTATE_is = test3_U.CellVoltages[8];\r\n    if (test3_DW.Integrator_DSTATE_is >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_is = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_is <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_is = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_l || (test3_DW.Integrator_PrevResetState_h != 0)) {\r\n    test3_DW.Integrator_DSTATE_is = test3_U.CellVoltages[8];\r\n    if (test3_DW.Integrator_DSTATE_is >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_is = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_is <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_is = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_is >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_is = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_is <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_is = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S110>/Compare' incorporates:\r\n   *  Constant: '<S107>/Time constant'\r\n   *  Constant: '<S110>/Constant'\r\n   *  Sum: '<S107>/Sum1'\r\n   */\r\n  test3_B.Compare_iz = ((real32_T)(0.031830988618379068 - test3_B.Probe_b[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S112>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_pv != 0U) {\r\n    test3_DW.Integrator_DSTATE_j = test3_U.CellVoltages[9];\r\n    if (test3_DW.Integrator_DSTATE_j >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_j = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_j <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_j = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_iz || (test3_DW.Integrator_PrevResetState_i != 0)) {\r\n    test3_DW.Integrator_DSTATE_j = test3_U.CellVoltages[9];\r\n    if (test3_DW.Integrator_DSTATE_j >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_j = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_j <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_j = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_j >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_j = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_j <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_j = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S116>/Compare' incorporates:\r\n   *  Constant: '<S113>/Time constant'\r\n   *  Constant: '<S116>/Constant'\r\n   *  Sum: '<S113>/Sum1'\r\n   */\r\n  test3_B.Compare_d = ((real32_T)(0.031830988618379068 - test3_B.Probe_j[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S118>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_m != 0U) {\r\n    test3_DW.Integrator_DSTATE_j1 = test3_U.CellVoltages[10];\r\n    if (test3_DW.Integrator_DSTATE_j1 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_j1 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_j1 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_j1 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_d || (test3_DW.Integrator_PrevResetState_iy != 0)) {\r\n    test3_DW.Integrator_DSTATE_j1 = test3_U.CellVoltages[10];\r\n    if (test3_DW.Integrator_DSTATE_j1 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_j1 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_j1 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_j1 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_j1 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_j1 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_j1 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_j1 = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S122>/Compare' incorporates:\r\n   *  Constant: '<S119>/Time constant'\r\n   *  Constant: '<S122>/Constant'\r\n   *  Sum: '<S119>/Sum1'\r\n   */\r\n  test3_B.Compare_a = ((real32_T)(0.031830988618379068 - test3_B.Probe_os[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S124>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_hr != 0U) {\r\n    test3_DW.Integrator_DSTATE_jr = test3_U.CellVoltages[11];\r\n    if (test3_DW.Integrator_DSTATE_jr >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_jr = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_jr <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_jr = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_a || (test3_DW.Integrator_PrevResetState_g != 0)) {\r\n    test3_DW.Integrator_DSTATE_jr = test3_U.CellVoltages[11];\r\n    if (test3_DW.Integrator_DSTATE_jr >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_jr = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_jr <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_jr = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_jr >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_jr = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_jr <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_jr = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S128>/Compare' incorporates:\r\n   *  Constant: '<S125>/Time constant'\r\n   *  Constant: '<S128>/Constant'\r\n   *  Sum: '<S125>/Sum1'\r\n   */\r\n  test3_B.Compare_p3 = ((real32_T)(0.031830988618379068 - test3_B.Probe_m[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S130>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_i != 0U) {\r\n    test3_DW.Integrator_DSTATE_p = test3_U.CellVoltages[12];\r\n    if (test3_DW.Integrator_DSTATE_p >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_p = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_p <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_p = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_p3 || (test3_DW.Integrator_PrevResetState_f != 0)) {\r\n    test3_DW.Integrator_DSTATE_p = test3_U.CellVoltages[12];\r\n    if (test3_DW.Integrator_DSTATE_p >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_p = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_p <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_p = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_p >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_p = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_p <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_p = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S134>/Compare' incorporates:\r\n   *  Constant: '<S131>/Time constant'\r\n   *  Constant: '<S134>/Constant'\r\n   *  Sum: '<S131>/Sum1'\r\n   */\r\n  test3_B.Compare_o1 = ((real32_T)(0.031830988618379068 - test3_B.Probe_c[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S136>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_e != 0U) {\r\n    test3_DW.Integrator_DSTATE_o = test3_U.CellVoltages[13];\r\n    if (test3_DW.Integrator_DSTATE_o >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_o = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_o <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_o = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_o1 || (test3_DW.Integrator_PrevResetState_fi != 0)) {\r\n    test3_DW.Integrator_DSTATE_o = test3_U.CellVoltages[13];\r\n    if (test3_DW.Integrator_DSTATE_o >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_o = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_o <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_o = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_o >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_o = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_o <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_o = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S140>/Compare' incorporates:\r\n   *  Constant: '<S137>/Time constant'\r\n   *  Constant: '<S140>/Constant'\r\n   *  Sum: '<S137>/Sum1'\r\n   */\r\n  test3_B.Compare_ob = ((real32_T)(0.031830988618379068 - test3_B.Probe_lt[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S142>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_df != 0U) {\r\n    test3_DW.Integrator_DSTATE_f = test3_U.CellVoltages[14];\r\n    if (test3_DW.Integrator_DSTATE_f >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_f = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_f <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_f = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_ob || (test3_DW.Integrator_PrevResetState_fm != 0)) {\r\n    test3_DW.Integrator_DSTATE_f = test3_U.CellVoltages[14];\r\n    if (test3_DW.Integrator_DSTATE_f >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_f = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_f <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_f = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_f >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_f = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_f <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_f = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S146>/Compare' incorporates:\r\n   *  Constant: '<S143>/Time constant'\r\n   *  Constant: '<S146>/Constant'\r\n   *  Sum: '<S143>/Sum1'\r\n   */\r\n  test3_B.Compare_n = ((real32_T)(0.031830988618379068 - test3_B.Probe_ik[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S148>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_ip != 0U) {\r\n    test3_DW.Integrator_DSTATE_fo = test3_U.CellVoltages[15];\r\n    if (test3_DW.Integrator_DSTATE_fo >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_fo = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_fo <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_fo = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_n || (test3_DW.Integrator_PrevResetState_gh != 0)) {\r\n    test3_DW.Integrator_DSTATE_fo = test3_U.CellVoltages[15];\r\n    if (test3_DW.Integrator_DSTATE_fo >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_fo = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_fo <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_fo = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_fo >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_fo = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_fo <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_fo = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S152>/Compare' incorporates:\r\n   *  Constant: '<S149>/Time constant'\r\n   *  Constant: '<S152>/Constant'\r\n   *  Sum: '<S149>/Sum1'\r\n   */\r\n  test3_B.Compare_ii = ((real32_T)(0.031830988618379068 - test3_B.Probe_ct[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S154>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_a != 0U) {\r\n    test3_DW.Integrator_DSTATE_i1 = test3_U.CellVoltages[16];\r\n    if (test3_DW.Integrator_DSTATE_i1 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_i1 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_i1 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_i1 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_ii || (test3_DW.Integrator_PrevResetState_b != 0)) {\r\n    test3_DW.Integrator_DSTATE_i1 = test3_U.CellVoltages[16];\r\n    if (test3_DW.Integrator_DSTATE_i1 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_i1 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_i1 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_i1 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_i1 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_i1 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_i1 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_i1 = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S158>/Compare' incorporates:\r\n   *  Constant: '<S155>/Time constant'\r\n   *  Constant: '<S158>/Constant'\r\n   *  Sum: '<S155>/Sum1'\r\n   */\r\n  test3_B.Compare_b = ((real32_T)(0.031830988618379068 - test3_B.Probe_f[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S160>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_ic != 0U) {\r\n    test3_DW.Integrator_DSTATE_fj = test3_U.CellVoltages[17];\r\n    if (test3_DW.Integrator_DSTATE_fj >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_fj = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_fj <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_fj = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_b || (test3_DW.Integrator_PrevResetState_bl != 0)) {\r\n    test3_DW.Integrator_DSTATE_fj = test3_U.CellVoltages[17];\r\n    if (test3_DW.Integrator_DSTATE_fj >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_fj = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_fj <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_fj = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_fj >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_fj = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_fj <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_fj = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S164>/Compare' incorporates:\r\n   *  Constant: '<S161>/Time constant'\r\n   *  Constant: '<S164>/Constant'\r\n   *  Sum: '<S161>/Sum1'\r\n   */\r\n  test3_B.Compare_f = ((real32_T)(0.031830988618379068 - test3_B.Probe_fp[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S166>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_ab != 0U) {\r\n    test3_DW.Integrator_DSTATE_d = test3_U.CellVoltages[18];\r\n    if (test3_DW.Integrator_DSTATE_d >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_d = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_d <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_d = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_f || (test3_DW.Integrator_PrevResetState_fie != 0)) {\r\n    test3_DW.Integrator_DSTATE_d = test3_U.CellVoltages[18];\r\n    if (test3_DW.Integrator_DSTATE_d >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_d = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_d <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_d = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_d >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_d = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_d <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_d = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S176>/Compare' incorporates:\r\n   *  Constant: '<S173>/Time constant'\r\n   *  Constant: '<S176>/Constant'\r\n   *  Sum: '<S173>/Sum1'\r\n   */\r\n  test3_B.Compare_km = ((real32_T)(0.031830988618379068 - test3_B.Probe_g[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S178>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_oe != 0U) {\r\n    test3_DW.Integrator_DSTATE_g5 = test3_U.CellVoltages[19];\r\n    if (test3_DW.Integrator_DSTATE_g5 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_g5 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_g5 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_g5 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_km || (test3_DW.Integrator_PrevResetState_d != 0)) {\r\n    test3_DW.Integrator_DSTATE_g5 = test3_U.CellVoltages[19];\r\n    if (test3_DW.Integrator_DSTATE_g5 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_g5 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_g5 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_g5 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_g5 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_g5 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_g5 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_g5 = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S182>/Compare' incorporates:\r\n   *  Constant: '<S179>/Time constant'\r\n   *  Constant: '<S182>/Constant'\r\n   *  Sum: '<S179>/Sum1'\r\n   */\r\n  test3_B.Compare_in = ((real32_T)(0.031830988618379068 - test3_B.Probe_h[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S184>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_op != 0U) {\r\n    test3_DW.Integrator_DSTATE_pf = test3_U.CellVoltages[20];\r\n    if (test3_DW.Integrator_DSTATE_pf >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_pf = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_pf <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_pf = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_in || (test3_DW.Integrator_PrevResetState_k != 0)) {\r\n    test3_DW.Integrator_DSTATE_pf = test3_U.CellVoltages[20];\r\n    if (test3_DW.Integrator_DSTATE_pf >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_pf = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_pf <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_pf = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_pf >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_pf = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_pf <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_pf = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S188>/Compare' incorporates:\r\n   *  Constant: '<S185>/Time constant'\r\n   *  Constant: '<S188>/Constant'\r\n   *  Sum: '<S185>/Sum1'\r\n   */\r\n  test3_B.Compare_lv = ((real32_T)(0.031830988618379068 - test3_B.Probe_o4[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S190>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_hg != 0U) {\r\n    test3_DW.Integrator_DSTATE_c = test3_U.CellVoltages[21];\r\n    if (test3_DW.Integrator_DSTATE_c >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_c = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_c <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_c = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_lv || (test3_DW.Integrator_PrevResetState_n != 0)) {\r\n    test3_DW.Integrator_DSTATE_c = test3_U.CellVoltages[21];\r\n    if (test3_DW.Integrator_DSTATE_c >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_c = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_c <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_c = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_c >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_c = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_c <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_c = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S194>/Compare' incorporates:\r\n   *  Constant: '<S191>/Time constant'\r\n   *  Constant: '<S194>/Constant'\r\n   *  Sum: '<S191>/Sum1'\r\n   */\r\n  test3_B.Compare_ed = ((real32_T)(0.031830988618379068 - test3_B.Probe_fc[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S196>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_l != 0U) {\r\n    test3_DW.Integrator_DSTATE_m = test3_U.CellVoltages[22];\r\n    if (test3_DW.Integrator_DSTATE_m >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_m = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_m <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_m = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_ed || (test3_DW.Integrator_PrevResetState_fz != 0)) {\r\n    test3_DW.Integrator_DSTATE_m = test3_U.CellVoltages[22];\r\n    if (test3_DW.Integrator_DSTATE_m >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_m = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_m <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_m = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_m >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_m = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_m <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_m = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S200>/Compare' incorporates:\r\n   *  Constant: '<S197>/Time constant'\r\n   *  Constant: '<S200>/Constant'\r\n   *  Sum: '<S197>/Sum1'\r\n   */\r\n  test3_B.Compare_el = ((real32_T)(0.031830988618379068 - test3_B.Probe_f1[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S202>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_iw != 0U) {\r\n    test3_DW.Integrator_DSTATE_j2 = test3_U.CellVoltages[23];\r\n    if (test3_DW.Integrator_DSTATE_j2 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_j2 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_j2 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_j2 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_el || (test3_DW.Integrator_PrevResetState_m != 0)) {\r\n    test3_DW.Integrator_DSTATE_j2 = test3_U.CellVoltages[23];\r\n    if (test3_DW.Integrator_DSTATE_j2 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_j2 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_j2 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_j2 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_j2 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_j2 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_j2 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_j2 = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S206>/Compare' incorporates:\r\n   *  Constant: '<S203>/Time constant'\r\n   *  Constant: '<S206>/Constant'\r\n   *  Sum: '<S203>/Sum1'\r\n   */\r\n  test3_B.Compare_kl = ((real32_T)(0.031830988618379068 - test3_B.Probe_bf[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S208>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_ky != 0U) {\r\n    test3_DW.Integrator_DSTATE_iz = test3_U.CellVoltages[24];\r\n    if (test3_DW.Integrator_DSTATE_iz >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_iz = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_iz <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_iz = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_kl || (test3_DW.Integrator_PrevResetState_hi != 0)) {\r\n    test3_DW.Integrator_DSTATE_iz = test3_U.CellVoltages[24];\r\n    if (test3_DW.Integrator_DSTATE_iz >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_iz = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_iz <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_iz = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_iz >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_iz = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_iz <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_iz = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S212>/Compare' incorporates:\r\n   *  Constant: '<S209>/Time constant'\r\n   *  Constant: '<S212>/Constant'\r\n   *  Sum: '<S209>/Sum1'\r\n   */\r\n  test3_B.Compare_kf = ((real32_T)(0.031830988618379068 - test3_B.Probe_gu[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S214>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_b != 0U) {\r\n    test3_DW.Integrator_DSTATE_bh = test3_U.CellVoltages[25];\r\n    if (test3_DW.Integrator_DSTATE_bh >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_bh = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_bh <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_bh = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_kf || (test3_DW.Integrator_PrevResetState_fy != 0)) {\r\n    test3_DW.Integrator_DSTATE_bh = test3_U.CellVoltages[25];\r\n    if (test3_DW.Integrator_DSTATE_bh >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_bh = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_bh <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_bh = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_bh >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_bh = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_bh <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_bh = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S218>/Compare' incorporates:\r\n   *  Constant: '<S215>/Time constant'\r\n   *  Constant: '<S218>/Constant'\r\n   *  Sum: '<S215>/Sum1'\r\n   */\r\n  test3_B.Compare_hy = ((real32_T)(0.031830988618379068 - test3_B.Probe_er[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S220>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_gu != 0U) {\r\n    test3_DW.Integrator_DSTATE_ji = test3_U.CellVoltages[26];\r\n    if (test3_DW.Integrator_DSTATE_ji >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ji = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ji <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ji = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_hy || (test3_DW.Integrator_PrevResetState_ok != 0)) {\r\n    test3_DW.Integrator_DSTATE_ji = test3_U.CellVoltages[26];\r\n    if (test3_DW.Integrator_DSTATE_ji >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ji = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ji <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ji = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_ji >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ji = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ji <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ji = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S224>/Compare' incorporates:\r\n   *  Constant: '<S221>/Time constant'\r\n   *  Constant: '<S224>/Constant'\r\n   *  Sum: '<S221>/Sum1'\r\n   */\r\n  test3_B.Compare_oi = ((real32_T)(0.031830988618379068 - test3_B.Probe_hq[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S226>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_ao != 0U) {\r\n    test3_DW.Integrator_DSTATE_od = test3_U.CellVoltages[27];\r\n    if (test3_DW.Integrator_DSTATE_od >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_od = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_od <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_od = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_oi || (test3_DW.Integrator_PrevResetState_j != 0)) {\r\n    test3_DW.Integrator_DSTATE_od = test3_U.CellVoltages[27];\r\n    if (test3_DW.Integrator_DSTATE_od >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_od = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_od <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_od = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_od >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_od = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_od <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_od = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S230>/Compare' incorporates:\r\n   *  Constant: '<S227>/Time constant'\r\n   *  Constant: '<S230>/Constant'\r\n   *  Sum: '<S227>/Sum1'\r\n   */\r\n  test3_B.Compare_i1 = ((real32_T)(0.031830988618379068 - test3_B.Probe_md[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S232>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_f != 0U) {\r\n    test3_DW.Integrator_DSTATE_oy = test3_U.CellVoltages[28];\r\n    if (test3_DW.Integrator_DSTATE_oy >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_oy = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_oy <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_oy = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_i1 || (test3_DW.Integrator_PrevResetState_dh != 0)) {\r\n    test3_DW.Integrator_DSTATE_oy = test3_U.CellVoltages[28];\r\n    if (test3_DW.Integrator_DSTATE_oy >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_oy = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_oy <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_oy = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_oy >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_oy = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_oy <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_oy = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S242>/Compare' incorporates:\r\n   *  Constant: '<S239>/Time constant'\r\n   *  Constant: '<S242>/Constant'\r\n   *  Sum: '<S239>/Sum1'\r\n   */\r\n  test3_B.Compare_g = ((real32_T)(0.031830988618379068 - test3_B.Probe_p[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S244>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_c != 0U) {\r\n    test3_DW.Integrator_DSTATE_nc = test3_U.CellVoltages[29];\r\n    if (test3_DW.Integrator_DSTATE_nc >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_nc = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_nc <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_nc = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_g || (test3_DW.Integrator_PrevResetState_ne != 0)) {\r\n    test3_DW.Integrator_DSTATE_nc = test3_U.CellVoltages[29];\r\n    if (test3_DW.Integrator_DSTATE_nc >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_nc = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_nc <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_nc = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_nc >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_nc = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_nc <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_nc = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S248>/Compare' incorporates:\r\n   *  Constant: '<S245>/Time constant'\r\n   *  Constant: '<S248>/Constant'\r\n   *  Sum: '<S245>/Sum1'\r\n   */\r\n  test3_B.Compare_ec = ((real32_T)(0.031830988618379068 - test3_B.Probe_pe[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S250>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_fc != 0U) {\r\n    test3_DW.Integrator_DSTATE_c2 = test3_U.CellVoltages[30];\r\n    if (test3_DW.Integrator_DSTATE_c2 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_c2 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_c2 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_c2 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_ec || (test3_DW.Integrator_PrevResetState_fl != 0)) {\r\n    test3_DW.Integrator_DSTATE_c2 = test3_U.CellVoltages[30];\r\n    if (test3_DW.Integrator_DSTATE_c2 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_c2 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_c2 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_c2 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_c2 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_c2 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_c2 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_c2 = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S254>/Compare' incorporates:\r\n   *  Constant: '<S251>/Time constant'\r\n   *  Constant: '<S254>/Constant'\r\n   *  Sum: '<S251>/Sum1'\r\n   */\r\n  test3_B.Compare_kh = ((real32_T)(0.031830988618379068 - test3_B.Probe_gb[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S256>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_bd != 0U) {\r\n    test3_DW.Integrator_DSTATE_pa = test3_U.CellVoltages[31];\r\n    if (test3_DW.Integrator_DSTATE_pa >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_pa = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_pa <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_pa = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_kh || (test3_DW.Integrator_PrevResetState_ib != 0)) {\r\n    test3_DW.Integrator_DSTATE_pa = test3_U.CellVoltages[31];\r\n    if (test3_DW.Integrator_DSTATE_pa >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_pa = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_pa <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_pa = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_pa >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_pa = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_pa <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_pa = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S260>/Compare' incorporates:\r\n   *  Constant: '<S257>/Time constant'\r\n   *  Constant: '<S260>/Constant'\r\n   *  Sum: '<S257>/Sum1'\r\n   */\r\n  test3_B.Compare_go = ((real32_T)(0.031830988618379068 - test3_B.Probe_gs[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S262>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_n != 0U) {\r\n    test3_DW.Integrator_DSTATE_ez = test3_U.CellVoltages[32];\r\n    if (test3_DW.Integrator_DSTATE_ez >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ez = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ez <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ez = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_go || (test3_DW.Integrator_PrevResetState_dz != 0)) {\r\n    test3_DW.Integrator_DSTATE_ez = test3_U.CellVoltages[32];\r\n    if (test3_DW.Integrator_DSTATE_ez >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ez = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ez <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ez = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_ez >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ez = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ez <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ez = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S266>/Compare' incorporates:\r\n   *  Constant: '<S263>/Time constant'\r\n   *  Constant: '<S266>/Constant'\r\n   *  Sum: '<S263>/Sum1'\r\n   */\r\n  test3_B.Compare_hb = ((real32_T)(0.031830988618379068 - test3_B.Probe_p1[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S268>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_aoc != 0U) {\r\n    test3_DW.Integrator_DSTATE_bp = test3_U.CellVoltages[33];\r\n    if (test3_DW.Integrator_DSTATE_bp >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_bp = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_bp <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_bp = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_hb || (test3_DW.Integrator_PrevResetState_l != 0)) {\r\n    test3_DW.Integrator_DSTATE_bp = test3_U.CellVoltages[33];\r\n    if (test3_DW.Integrator_DSTATE_bp >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_bp = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_bp <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_bp = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_bp >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_bp = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_bp <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_bp = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S272>/Compare' incorporates:\r\n   *  Constant: '<S269>/Time constant'\r\n   *  Constant: '<S272>/Constant'\r\n   *  Sum: '<S269>/Sum1'\r\n   */\r\n  test3_B.Compare_d2 = ((real32_T)(0.031830988618379068 - test3_B.Probe_j0[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S274>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_kr != 0U) {\r\n    test3_DW.Integrator_DSTATE_h = test3_U.CellVoltages[34];\r\n    if (test3_DW.Integrator_DSTATE_h >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_h = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_h <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_h = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_d2 || (test3_DW.Integrator_PrevResetState_hm != 0)) {\r\n    test3_DW.Integrator_DSTATE_h = test3_U.CellVoltages[34];\r\n    if (test3_DW.Integrator_DSTATE_h >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_h = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_h <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_h = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_h >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_h = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_h <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_h = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S278>/Compare' incorporates:\r\n   *  Constant: '<S275>/Time constant'\r\n   *  Constant: '<S278>/Constant'\r\n   *  Sum: '<S275>/Sum1'\r\n   */\r\n  test3_B.Compare_kfs = ((real32_T)(0.031830988618379068 - test3_B.Probe_ib[0]) <=\r\n    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S280>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_n3 != 0U) {\r\n    test3_DW.Integrator_DSTATE_i4 = test3_U.CellVoltages[35];\r\n    if (test3_DW.Integrator_DSTATE_i4 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_i4 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_i4 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_i4 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_kfs || (test3_DW.Integrator_PrevResetState_lo != 0)) {\r\n    test3_DW.Integrator_DSTATE_i4 = test3_U.CellVoltages[35];\r\n    if (test3_DW.Integrator_DSTATE_i4 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_i4 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_i4 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_i4 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_i4 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_i4 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_i4 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_i4 = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S284>/Compare' incorporates:\r\n   *  Constant: '<S281>/Time constant'\r\n   *  Constant: '<S284>/Constant'\r\n   *  Sum: '<S281>/Sum1'\r\n   */\r\n  test3_B.Compare_b3 = ((real32_T)(0.031830988618379068 - test3_B.Probe_nm[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S286>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_pe != 0U) {\r\n    test3_DW.Integrator_DSTATE_fp = test3_U.CellVoltages[36];\r\n    if (test3_DW.Integrator_DSTATE_fp >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_fp = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_fp <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_fp = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_b3 || (test3_DW.Integrator_PrevResetState_dk != 0)) {\r\n    test3_DW.Integrator_DSTATE_fp = test3_U.CellVoltages[36];\r\n    if (test3_DW.Integrator_DSTATE_fp >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_fp = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_fp <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_fp = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_fp >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_fp = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_fp <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_fp = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S290>/Compare' incorporates:\r\n   *  Constant: '<S287>/Time constant'\r\n   *  Constant: '<S290>/Constant'\r\n   *  Sum: '<S287>/Sum1'\r\n   */\r\n  test3_B.Compare_kd = ((real32_T)(0.031830988618379068 - test3_B.Probe_hh[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S292>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_gb != 0U) {\r\n    test3_DW.Integrator_DSTATE_hx = test3_U.CellVoltages[37];\r\n    if (test3_DW.Integrator_DSTATE_hx >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_hx = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_hx <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_hx = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_kd || (test3_DW.Integrator_PrevResetState_es != 0)) {\r\n    test3_DW.Integrator_DSTATE_hx = test3_U.CellVoltages[37];\r\n    if (test3_DW.Integrator_DSTATE_hx >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_hx = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_hx <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_hx = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_hx >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_hx = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_hx <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_hx = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S296>/Compare' incorporates:\r\n   *  Constant: '<S293>/Time constant'\r\n   *  Constant: '<S296>/Constant'\r\n   *  Sum: '<S293>/Sum1'\r\n   */\r\n  test3_B.Compare_dh = ((real32_T)(0.031830988618379068 - test3_B.Probe_d[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S298>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_gg != 0U) {\r\n    test3_DW.Integrator_DSTATE_k = test3_U.CellVoltages[38];\r\n    if (test3_DW.Integrator_DSTATE_k >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_k = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_k <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_k = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_dh || (test3_DW.Integrator_PrevResetState_fu != 0)) {\r\n    test3_DW.Integrator_DSTATE_k = test3_U.CellVoltages[38];\r\n    if (test3_DW.Integrator_DSTATE_k >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_k = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_k <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_k = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_k >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_k = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_k <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_k = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S308>/Compare' incorporates:\r\n   *  Constant: '<S305>/Time constant'\r\n   *  Constant: '<S308>/Constant'\r\n   *  Sum: '<S305>/Sum1'\r\n   */\r\n  test3_B.Compare_kv = ((real32_T)(0.031830988618379068 - test3_B.Probe_fv[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S310>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_bb != 0U) {\r\n    test3_DW.Integrator_DSTATE_g3 = test3_U.CellVoltages[39];\r\n    if (test3_DW.Integrator_DSTATE_g3 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_g3 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_g3 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_g3 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_kv || (test3_DW.Integrator_PrevResetState_cv != 0)) {\r\n    test3_DW.Integrator_DSTATE_g3 = test3_U.CellVoltages[39];\r\n    if (test3_DW.Integrator_DSTATE_g3 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_g3 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_g3 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_g3 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_g3 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_g3 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_g3 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_g3 = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S314>/Compare' incorporates:\r\n   *  Constant: '<S311>/Time constant'\r\n   *  Constant: '<S314>/Constant'\r\n   *  Sum: '<S311>/Sum1'\r\n   */\r\n  test3_B.Compare_of = ((real32_T)(0.031830988618379068 - test3_B.Probe_ij[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S316>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_p4 != 0U) {\r\n    test3_DW.Integrator_DSTATE_h4 = test3_U.CellVoltages[40];\r\n    if (test3_DW.Integrator_DSTATE_h4 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_h4 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_h4 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_h4 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_of || (test3_DW.Integrator_PrevResetState_ke != 0)) {\r\n    test3_DW.Integrator_DSTATE_h4 = test3_U.CellVoltages[40];\r\n    if (test3_DW.Integrator_DSTATE_h4 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_h4 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_h4 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_h4 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_h4 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_h4 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_h4 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_h4 = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S320>/Compare' incorporates:\r\n   *  Constant: '<S317>/Time constant'\r\n   *  Constant: '<S320>/Constant'\r\n   *  Sum: '<S317>/Sum1'\r\n   */\r\n  test3_B.Compare_bn = ((real32_T)(0.031830988618379068 - test3_B.Probe_pk[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S322>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_mv != 0U) {\r\n    test3_DW.Integrator_DSTATE_e5 = test3_U.CellVoltages[41];\r\n    if (test3_DW.Integrator_DSTATE_e5 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_e5 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_e5 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_e5 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_bn || (test3_DW.Integrator_PrevResetState_fa != 0)) {\r\n    test3_DW.Integrator_DSTATE_e5 = test3_U.CellVoltages[41];\r\n    if (test3_DW.Integrator_DSTATE_e5 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_e5 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_e5 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_e5 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_e5 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_e5 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_e5 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_e5 = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S326>/Compare' incorporates:\r\n   *  Constant: '<S323>/Time constant'\r\n   *  Constant: '<S326>/Constant'\r\n   *  Sum: '<S323>/Sum1'\r\n   */\r\n  test3_B.Compare_ix = ((real32_T)(0.031830988618379068 - test3_B.Probe_a[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S328>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_j1 != 0U) {\r\n    test3_DW.Integrator_DSTATE_oc = test3_U.CellVoltages[42];\r\n    if (test3_DW.Integrator_DSTATE_oc >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_oc = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_oc <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_oc = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_ix || (test3_DW.Integrator_PrevResetState_h4 != 0)) {\r\n    test3_DW.Integrator_DSTATE_oc = test3_U.CellVoltages[42];\r\n    if (test3_DW.Integrator_DSTATE_oc >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_oc = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_oc <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_oc = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_oc >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_oc = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_oc <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_oc = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S332>/Compare' incorporates:\r\n   *  Constant: '<S329>/Time constant'\r\n   *  Constant: '<S332>/Constant'\r\n   *  Sum: '<S329>/Sum1'\r\n   */\r\n  test3_B.Compare_gy = ((real32_T)(0.031830988618379068 - test3_B.Probe_fpu[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S334>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_az != 0U) {\r\n    test3_DW.Integrator_DSTATE_n5 = test3_U.CellVoltages[43];\r\n    if (test3_DW.Integrator_DSTATE_n5 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_n5 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_n5 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_n5 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_gy || (test3_DW.Integrator_PrevResetState_io != 0)) {\r\n    test3_DW.Integrator_DSTATE_n5 = test3_U.CellVoltages[43];\r\n    if (test3_DW.Integrator_DSTATE_n5 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_n5 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_n5 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_n5 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_n5 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_n5 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_n5 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_n5 = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S338>/Compare' incorporates:\r\n   *  Constant: '<S335>/Time constant'\r\n   *  Constant: '<S338>/Constant'\r\n   *  Sum: '<S335>/Sum1'\r\n   */\r\n  test3_B.Compare_kz = ((real32_T)(0.031830988618379068 - test3_B.Probe_m0[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S340>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_bm != 0U) {\r\n    test3_DW.Integrator_DSTATE_do = test3_U.CellVoltages[44];\r\n    if (test3_DW.Integrator_DSTATE_do >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_do = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_do <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_do = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_kz || (test3_DW.Integrator_PrevResetState_k3 != 0)) {\r\n    test3_DW.Integrator_DSTATE_do = test3_U.CellVoltages[44];\r\n    if (test3_DW.Integrator_DSTATE_do >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_do = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_do <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_do = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_do >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_do = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_do <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_do = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S344>/Compare' incorporates:\r\n   *  Constant: '<S341>/Time constant'\r\n   *  Constant: '<S344>/Constant'\r\n   *  Sum: '<S341>/Sum1'\r\n   */\r\n  test3_B.Compare_hi = ((real32_T)(0.031830988618379068 - test3_B.Probe_mt[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S346>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_c0 != 0U) {\r\n    test3_DW.Integrator_DSTATE_ds = test3_U.CellVoltages[45];\r\n    if (test3_DW.Integrator_DSTATE_ds >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ds = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ds <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ds = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_hi || (test3_DW.Integrator_PrevResetState_ed != 0)) {\r\n    test3_DW.Integrator_DSTATE_ds = test3_U.CellVoltages[45];\r\n    if (test3_DW.Integrator_DSTATE_ds >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ds = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ds <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ds = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_ds >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ds = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ds <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ds = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S350>/Compare' incorporates:\r\n   *  Constant: '<S347>/Time constant'\r\n   *  Constant: '<S350>/Constant'\r\n   *  Sum: '<S347>/Sum1'\r\n   */\r\n  test3_B.Compare_by = ((real32_T)(0.031830988618379068 - test3_B.Probe_fn[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S352>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_p0 != 0U) {\r\n    test3_DW.Integrator_DSTATE_bv = test3_U.CellVoltages[46];\r\n    if (test3_DW.Integrator_DSTATE_bv >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_bv = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_bv <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_bv = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_by || (test3_DW.Integrator_PrevResetState_on != 0)) {\r\n    test3_DW.Integrator_DSTATE_bv = test3_U.CellVoltages[46];\r\n    if (test3_DW.Integrator_DSTATE_bv >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_bv = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_bv <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_bv = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_bv >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_bv = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_bv <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_bv = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S356>/Compare' incorporates:\r\n   *  Constant: '<S353>/Time constant'\r\n   *  Constant: '<S356>/Constant'\r\n   *  Sum: '<S353>/Sum1'\r\n   */\r\n  test3_B.Compare_pn = ((real32_T)(0.031830988618379068 - test3_B.Probe_op[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S358>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_j3 != 0U) {\r\n    test3_DW.Integrator_DSTATE_o3 = test3_U.CellVoltages[47];\r\n    if (test3_DW.Integrator_DSTATE_o3 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_o3 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_o3 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_o3 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_pn || (test3_DW.Integrator_PrevResetState_cb != 0)) {\r\n    test3_DW.Integrator_DSTATE_o3 = test3_U.CellVoltages[47];\r\n    if (test3_DW.Integrator_DSTATE_o3 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_o3 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_o3 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_o3 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_o3 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_o3 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_o3 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_o3 = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S362>/Compare' incorporates:\r\n   *  Constant: '<S359>/Time constant'\r\n   *  Constant: '<S362>/Constant'\r\n   *  Sum: '<S359>/Sum1'\r\n   */\r\n  test3_B.Compare_ep = ((real32_T)(0.031830988618379068 - test3_B.Probe_k[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S364>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_hf != 0U) {\r\n    test3_DW.Integrator_DSTATE_fg = test3_U.CellVoltages[48];\r\n    if (test3_DW.Integrator_DSTATE_fg >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_fg = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_fg <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_fg = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_ep || (test3_DW.Integrator_PrevResetState_fj != 0)) {\r\n    test3_DW.Integrator_DSTATE_fg = test3_U.CellVoltages[48];\r\n    if (test3_DW.Integrator_DSTATE_fg >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_fg = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_fg <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_fg = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_fg >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_fg = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_fg <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_fg = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S374>/Compare' incorporates:\r\n   *  Constant: '<S371>/Time constant'\r\n   *  Constant: '<S374>/Constant'\r\n   *  Sum: '<S371>/Sum1'\r\n   */\r\n  test3_B.Compare_ev = ((real32_T)(0.031830988618379068 - test3_B.Probe_ll[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S376>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_ms != 0U) {\r\n    test3_DW.Integrator_DSTATE_a4 = test3_U.CellVoltages[49];\r\n    if (test3_DW.Integrator_DSTATE_a4 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_a4 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_a4 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_a4 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_ev || (test3_DW.Integrator_PrevResetState_kk != 0)) {\r\n    test3_DW.Integrator_DSTATE_a4 = test3_U.CellVoltages[49];\r\n    if (test3_DW.Integrator_DSTATE_a4 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_a4 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_a4 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_a4 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_a4 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_a4 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_a4 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_a4 = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S380>/Compare' incorporates:\r\n   *  Constant: '<S377>/Time constant'\r\n   *  Constant: '<S380>/Constant'\r\n   *  Sum: '<S377>/Sum1'\r\n   */\r\n  test3_B.Compare_bm = ((real32_T)(0.031830988618379068 - test3_B.Probe_dm[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S382>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_me != 0U) {\r\n    test3_DW.Integrator_DSTATE_l = test3_U.CellVoltages[50];\r\n    if (test3_DW.Integrator_DSTATE_l >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_l = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_l <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_l = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_bm || (test3_DW.Integrator_PrevResetState_ie != 0)) {\r\n    test3_DW.Integrator_DSTATE_l = test3_U.CellVoltages[50];\r\n    if (test3_DW.Integrator_DSTATE_l >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_l = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_l <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_l = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_l >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_l = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_l <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_l = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S386>/Compare' incorporates:\r\n   *  Constant: '<S383>/Time constant'\r\n   *  Constant: '<S386>/Constant'\r\n   *  Sum: '<S383>/Sum1'\r\n   */\r\n  test3_B.Compare_io = ((real32_T)(0.031830988618379068 - test3_B.Probe_ba[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S388>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_oq != 0U) {\r\n    test3_DW.Integrator_DSTATE_eo = test3_U.CellVoltages[51];\r\n    if (test3_DW.Integrator_DSTATE_eo >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_eo = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_eo <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_eo = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_io || (test3_DW.Integrator_PrevResetState_pp != 0)) {\r\n    test3_DW.Integrator_DSTATE_eo = test3_U.CellVoltages[51];\r\n    if (test3_DW.Integrator_DSTATE_eo >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_eo = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_eo <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_eo = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_eo >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_eo = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_eo <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_eo = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S392>/Compare' incorporates:\r\n   *  Constant: '<S389>/Time constant'\r\n   *  Constant: '<S392>/Constant'\r\n   *  Sum: '<S389>/Sum1'\r\n   */\r\n  test3_B.Compare_ax = ((real32_T)(0.031830988618379068 - test3_B.Probe_j0k[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S394>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_kz != 0U) {\r\n    test3_DW.Integrator_DSTATE_cl = test3_U.CellVoltages[52];\r\n    if (test3_DW.Integrator_DSTATE_cl >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_cl = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_cl <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_cl = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_ax || (test3_DW.Integrator_PrevResetState_ox != 0)) {\r\n    test3_DW.Integrator_DSTATE_cl = test3_U.CellVoltages[52];\r\n    if (test3_DW.Integrator_DSTATE_cl >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_cl = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_cl <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_cl = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_cl >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_cl = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_cl <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_cl = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S398>/Compare' incorporates:\r\n   *  Constant: '<S395>/Time constant'\r\n   *  Constant: '<S398>/Constant'\r\n   *  Sum: '<S395>/Sum1'\r\n   */\r\n  test3_B.Compare_gr = ((real32_T)(0.031830988618379068 - test3_B.Probe_gj[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S400>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_b1 != 0U) {\r\n    test3_DW.Integrator_DSTATE_bs = test3_U.CellVoltages[53];\r\n    if (test3_DW.Integrator_DSTATE_bs >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_bs = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_bs <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_bs = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_gr || (test3_DW.Integrator_PrevResetState_fn != 0)) {\r\n    test3_DW.Integrator_DSTATE_bs = test3_U.CellVoltages[53];\r\n    if (test3_DW.Integrator_DSTATE_bs >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_bs = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_bs <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_bs = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_bs >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_bs = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_bs <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_bs = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S404>/Compare' incorporates:\r\n   *  Constant: '<S401>/Time constant'\r\n   *  Constant: '<S404>/Constant'\r\n   *  Sum: '<S401>/Sum1'\r\n   */\r\n  test3_B.Compare_fw = ((real32_T)(0.031830988618379068 - test3_B.Probe_po[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S406>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_j3b != 0U) {\r\n    test3_DW.Integrator_DSTATE_e2 = test3_U.CellVoltages[54];\r\n    if (test3_DW.Integrator_DSTATE_e2 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_e2 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_e2 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_e2 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_fw || (test3_DW.Integrator_PrevResetState_mk != 0)) {\r\n    test3_DW.Integrator_DSTATE_e2 = test3_U.CellVoltages[54];\r\n    if (test3_DW.Integrator_DSTATE_e2 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_e2 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_e2 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_e2 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_e2 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_e2 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_e2 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_e2 = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S410>/Compare' incorporates:\r\n   *  Constant: '<S407>/Time constant'\r\n   *  Constant: '<S410>/Constant'\r\n   *  Sum: '<S407>/Sum1'\r\n   */\r\n  test3_B.Compare_j = ((real32_T)(0.031830988618379068 - test3_B.Probe_f2[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S412>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_ar != 0U) {\r\n    test3_DW.Integrator_DSTATE_lr = test3_U.CellVoltages[55];\r\n    if (test3_DW.Integrator_DSTATE_lr >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_lr = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_lr <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_lr = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_j || (test3_DW.Integrator_PrevResetState_m1 != 0)) {\r\n    test3_DW.Integrator_DSTATE_lr = test3_U.CellVoltages[55];\r\n    if (test3_DW.Integrator_DSTATE_lr >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_lr = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_lr <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_lr = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_lr >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_lr = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_lr <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_lr = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S416>/Compare' incorporates:\r\n   *  Constant: '<S413>/Time constant'\r\n   *  Constant: '<S416>/Constant'\r\n   *  Sum: '<S413>/Sum1'\r\n   */\r\n  test3_B.Compare_m = ((real32_T)(0.031830988618379068 - test3_B.Probe_iz[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S418>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_abx != 0U) {\r\n    test3_DW.Integrator_DSTATE_gx = test3_U.CellVoltages[56];\r\n    if (test3_DW.Integrator_DSTATE_gx >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_gx = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_gx <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_gx = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_m || (test3_DW.Integrator_PrevResetState_dzx != 0)) {\r\n    test3_DW.Integrator_DSTATE_gx = test3_U.CellVoltages[56];\r\n    if (test3_DW.Integrator_DSTATE_gx >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_gx = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_gx <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_gx = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_gx >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_gx = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_gx <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_gx = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S422>/Compare' incorporates:\r\n   *  Constant: '<S419>/Time constant'\r\n   *  Constant: '<S422>/Constant'\r\n   *  Sum: '<S419>/Sum1'\r\n   */\r\n  test3_B.Compare_ac = ((real32_T)(0.031830988618379068 - test3_B.Probe_lv[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S424>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_cy != 0U) {\r\n    test3_DW.Integrator_DSTATE_nu = test3_U.CellVoltages[57];\r\n    if (test3_DW.Integrator_DSTATE_nu >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_nu = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_nu <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_nu = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_ac || (test3_DW.Integrator_PrevResetState_m5 != 0)) {\r\n    test3_DW.Integrator_DSTATE_nu = test3_U.CellVoltages[57];\r\n    if (test3_DW.Integrator_DSTATE_nu >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_nu = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_nu <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_nu = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_nu >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_nu = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_nu <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_nu = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S428>/Compare' incorporates:\r\n   *  Constant: '<S425>/Time constant'\r\n   *  Constant: '<S428>/Constant'\r\n   *  Sum: '<S425>/Sum1'\r\n   */\r\n  test3_B.Compare_bo = ((real32_T)(0.031830988618379068 - test3_B.Probe_ms[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S430>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_b2 != 0U) {\r\n    test3_DW.Integrator_DSTATE_az = test3_U.CellVoltages[58];\r\n    if (test3_DW.Integrator_DSTATE_az >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_az = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_az <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_az = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_bo || (test3_DW.Integrator_PrevResetState_nv != 0)) {\r\n    test3_DW.Integrator_DSTATE_az = test3_U.CellVoltages[58];\r\n    if (test3_DW.Integrator_DSTATE_az >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_az = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_az <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_az = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_az >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_az = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_az <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_az = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S440>/Compare' incorporates:\r\n   *  Constant: '<S437>/Time constant'\r\n   *  Constant: '<S440>/Constant'\r\n   *  Sum: '<S437>/Sum1'\r\n   */\r\n  test3_B.Compare_ng = ((real32_T)(0.031830988618379068 - test3_B.Probe_it[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S442>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_br != 0U) {\r\n    test3_DW.Integrator_DSTATE_kc = test3_U.CellVoltages[59];\r\n    if (test3_DW.Integrator_DSTATE_kc >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_kc = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_kc <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_kc = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_ng || (test3_DW.Integrator_PrevResetState_bw != 0)) {\r\n    test3_DW.Integrator_DSTATE_kc = test3_U.CellVoltages[59];\r\n    if (test3_DW.Integrator_DSTATE_kc >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_kc = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_kc <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_kc = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_kc >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_kc = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_kc <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_kc = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S446>/Compare' incorporates:\r\n   *  Constant: '<S443>/Time constant'\r\n   *  Constant: '<S446>/Constant'\r\n   *  Sum: '<S443>/Sum1'\r\n   */\r\n  test3_B.Compare_ht = ((real32_T)(0.031830988618379068 - test3_B.Probe_cs[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S448>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_du != 0U) {\r\n    test3_DW.Integrator_DSTATE_mc = test3_U.CellVoltages[60];\r\n    if (test3_DW.Integrator_DSTATE_mc >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_mc = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_mc <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_mc = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_ht || (test3_DW.Integrator_PrevResetState_m3 != 0)) {\r\n    test3_DW.Integrator_DSTATE_mc = test3_U.CellVoltages[60];\r\n    if (test3_DW.Integrator_DSTATE_mc >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_mc = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_mc <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_mc = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_mc >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_mc = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_mc <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_mc = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S452>/Compare' incorporates:\r\n   *  Constant: '<S449>/Time constant'\r\n   *  Constant: '<S452>/Constant'\r\n   *  Sum: '<S449>/Sum1'\r\n   */\r\n  test3_B.Compare_im = ((real32_T)(0.031830988618379068 - test3_B.Probe_pa[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S454>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_c3 != 0U) {\r\n    test3_DW.Integrator_DSTATE_nm = test3_U.CellVoltages[61];\r\n    if (test3_DW.Integrator_DSTATE_nm >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_nm = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_nm <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_nm = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_im || (test3_DW.Integrator_PrevResetState_ei != 0)) {\r\n    test3_DW.Integrator_DSTATE_nm = test3_U.CellVoltages[61];\r\n    if (test3_DW.Integrator_DSTATE_nm >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_nm = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_nm <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_nm = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_nm >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_nm = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_nm <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_nm = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S458>/Compare' incorporates:\r\n   *  Constant: '<S455>/Time constant'\r\n   *  Constant: '<S458>/Constant'\r\n   *  Sum: '<S455>/Sum1'\r\n   */\r\n  test3_B.Compare_hg = ((real32_T)(0.031830988618379068 - test3_B.Probe_oq[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S460>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_lm != 0U) {\r\n    test3_DW.Integrator_DSTATE_po = test3_U.CellVoltages[62];\r\n    if (test3_DW.Integrator_DSTATE_po >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_po = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_po <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_po = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_hg || (test3_DW.Integrator_PrevResetState_o1 != 0)) {\r\n    test3_DW.Integrator_DSTATE_po = test3_U.CellVoltages[62];\r\n    if (test3_DW.Integrator_DSTATE_po >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_po = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_po <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_po = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_po >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_po = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_po <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_po = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S464>/Compare' incorporates:\r\n   *  Constant: '<S461>/Time constant'\r\n   *  Constant: '<S464>/Constant'\r\n   *  Sum: '<S461>/Sum1'\r\n   */\r\n  test3_B.Compare_kj = ((real32_T)(0.031830988618379068 - test3_B.Probe_hl[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S466>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_kk != 0U) {\r\n    test3_DW.Integrator_DSTATE_bt = test3_U.CellVoltages[63];\r\n    if (test3_DW.Integrator_DSTATE_bt >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_bt = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_bt <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_bt = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_kj || (test3_DW.Integrator_PrevResetState_gv != 0)) {\r\n    test3_DW.Integrator_DSTATE_bt = test3_U.CellVoltages[63];\r\n    if (test3_DW.Integrator_DSTATE_bt >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_bt = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_bt <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_bt = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_bt >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_bt = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_bt <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_bt = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S470>/Compare' incorporates:\r\n   *  Constant: '<S467>/Time constant'\r\n   *  Constant: '<S470>/Constant'\r\n   *  Sum: '<S467>/Sum1'\r\n   */\r\n  test3_B.Compare_id = ((real32_T)(0.031830988618379068 - test3_B.Probe_hz[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S472>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_km != 0U) {\r\n    test3_DW.Integrator_DSTATE_jt = test3_U.CellVoltages[64];\r\n    if (test3_DW.Integrator_DSTATE_jt >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_jt = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_jt <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_jt = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_id || (test3_DW.Integrator_PrevResetState_hf != 0)) {\r\n    test3_DW.Integrator_DSTATE_jt = test3_U.CellVoltages[64];\r\n    if (test3_DW.Integrator_DSTATE_jt >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_jt = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_jt <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_jt = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_jt >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_jt = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_jt <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_jt = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S476>/Compare' incorporates:\r\n   *  Constant: '<S473>/Time constant'\r\n   *  Constant: '<S476>/Constant'\r\n   *  Sum: '<S473>/Sum1'\r\n   */\r\n  test3_B.Compare_ff = ((real32_T)(0.031830988618379068 - test3_B.Probe_be[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S478>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_oex != 0U) {\r\n    test3_DW.Integrator_DSTATE_dc = test3_U.CellVoltages[65];\r\n    if (test3_DW.Integrator_DSTATE_dc >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_dc = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_dc <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_dc = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_ff || (test3_DW.Integrator_PrevResetState_gs != 0)) {\r\n    test3_DW.Integrator_DSTATE_dc = test3_U.CellVoltages[65];\r\n    if (test3_DW.Integrator_DSTATE_dc >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_dc = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_dc <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_dc = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_dc >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_dc = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_dc <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_dc = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S482>/Compare' incorporates:\r\n   *  Constant: '<S479>/Time constant'\r\n   *  Constant: '<S482>/Constant'\r\n   *  Sum: '<S479>/Sum1'\r\n   */\r\n  test3_B.Compare_kn = ((real32_T)(0.031830988618379068 - test3_B.Probe_c2[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S484>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_kp != 0U) {\r\n    test3_DW.Integrator_DSTATE_pb = test3_U.CellVoltages[66];\r\n    if (test3_DW.Integrator_DSTATE_pb >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_pb = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_pb <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_pb = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_kn || (test3_DW.Integrator_PrevResetState_fyk != 0)) {\r\n    test3_DW.Integrator_DSTATE_pb = test3_U.CellVoltages[66];\r\n    if (test3_DW.Integrator_DSTATE_pb >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_pb = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_pb <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_pb = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_pb >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_pb = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_pb <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_pb = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S488>/Compare' incorporates:\r\n   *  Constant: '<S485>/Time constant'\r\n   *  Constant: '<S488>/Constant'\r\n   *  Sum: '<S485>/Sum1'\r\n   */\r\n  test3_B.Compare_g5 = ((real32_T)(0.031830988618379068 - test3_B.Probe_eq[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S490>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_ew != 0U) {\r\n    test3_DW.Integrator_DSTATE_oe = test3_U.CellVoltages[67];\r\n    if (test3_DW.Integrator_DSTATE_oe >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_oe = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_oe <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_oe = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_g5 || (test3_DW.Integrator_PrevResetState_kl != 0)) {\r\n    test3_DW.Integrator_DSTATE_oe = test3_U.CellVoltages[67];\r\n    if (test3_DW.Integrator_DSTATE_oe >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_oe = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_oe <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_oe = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_oe >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_oe = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_oe <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_oe = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S494>/Compare' incorporates:\r\n   *  Constant: '<S491>/Time constant'\r\n   *  Constant: '<S494>/Constant'\r\n   *  Sum: '<S491>/Sum1'\r\n   */\r\n  test3_B.Compare_ou = ((real32_T)(0.031830988618379068 - test3_B.Probe_aj[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S496>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_bk != 0U) {\r\n    test3_DW.Integrator_DSTATE_al = test3_U.CellVoltages[68];\r\n    if (test3_DW.Integrator_DSTATE_al >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_al = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_al <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_al = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_ou || (test3_DW.Integrator_PrevResetState_nk != 0)) {\r\n    test3_DW.Integrator_DSTATE_al = test3_U.CellVoltages[68];\r\n    if (test3_DW.Integrator_DSTATE_al >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_al = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_al <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_al = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_al >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_al = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_al <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_al = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S506>/Compare' incorporates:\r\n   *  Constant: '<S503>/Time constant'\r\n   *  Constant: '<S506>/Constant'\r\n   *  Sum: '<S503>/Sum1'\r\n   */\r\n  test3_B.Compare_eq = ((real32_T)(0.031830988618379068 - test3_B.Probe_hs[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S508>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_j31 != 0U) {\r\n    test3_DW.Integrator_DSTATE_cx = test3_U.CellVoltages[69];\r\n    if (test3_DW.Integrator_DSTATE_cx >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_cx = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_cx <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_cx = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_eq || (test3_DW.Integrator_PrevResetState_ln != 0)) {\r\n    test3_DW.Integrator_DSTATE_cx = test3_U.CellVoltages[69];\r\n    if (test3_DW.Integrator_DSTATE_cx >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_cx = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_cx <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_cx = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_cx >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_cx = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_cx <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_cx = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S512>/Compare' incorporates:\r\n   *  Constant: '<S509>/Time constant'\r\n   *  Constant: '<S512>/Constant'\r\n   *  Sum: '<S509>/Sum1'\r\n   */\r\n  test3_B.Compare_l5 = ((real32_T)(0.031830988618379068 - test3_B.Probe_kp[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S514>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_mo != 0U) {\r\n    test3_DW.Integrator_DSTATE_cr = test3_U.CellVoltages[70];\r\n    if (test3_DW.Integrator_DSTATE_cr >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_cr = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_cr <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_cr = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_l5 || (test3_DW.Integrator_PrevResetState_oe != 0)) {\r\n    test3_DW.Integrator_DSTATE_cr = test3_U.CellVoltages[70];\r\n    if (test3_DW.Integrator_DSTATE_cr >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_cr = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_cr <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_cr = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_cr >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_cr = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_cr <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_cr = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S518>/Compare' incorporates:\r\n   *  Constant: '<S515>/Time constant'\r\n   *  Constant: '<S518>/Constant'\r\n   *  Sum: '<S515>/Sum1'\r\n   */\r\n  test3_B.Compare_fs = ((real32_T)(0.031830988618379068 - test3_B.Probe_jn[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S520>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_abf != 0U) {\r\n    test3_DW.Integrator_DSTATE_p3 = test3_U.CellVoltages[71];\r\n    if (test3_DW.Integrator_DSTATE_p3 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_p3 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_p3 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_p3 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_fs || (test3_DW.Integrator_PrevResetState_hu != 0)) {\r\n    test3_DW.Integrator_DSTATE_p3 = test3_U.CellVoltages[71];\r\n    if (test3_DW.Integrator_DSTATE_p3 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_p3 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_p3 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_p3 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_p3 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_p3 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_p3 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_p3 = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S524>/Compare' incorporates:\r\n   *  Constant: '<S521>/Time constant'\r\n   *  Constant: '<S524>/Constant'\r\n   *  Sum: '<S521>/Sum1'\r\n   */\r\n  test3_B.Compare_c = ((real32_T)(0.031830988618379068 - test3_B.Probe_dh[0]) <=\r\n                       0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S526>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_ho != 0U) {\r\n    test3_DW.Integrator_DSTATE_kv = test3_U.CellVoltages[72];\r\n    if (test3_DW.Integrator_DSTATE_kv >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_kv = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_kv <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_kv = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_c || (test3_DW.Integrator_PrevResetState_mr != 0)) {\r\n    test3_DW.Integrator_DSTATE_kv = test3_U.CellVoltages[72];\r\n    if (test3_DW.Integrator_DSTATE_kv >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_kv = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_kv <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_kv = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_kv >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_kv = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_kv <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_kv = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S530>/Compare' incorporates:\r\n   *  Constant: '<S527>/Time constant'\r\n   *  Constant: '<S530>/Constant'\r\n   *  Sum: '<S527>/Sum1'\r\n   */\r\n  test3_B.Compare_f3 = ((real32_T)(0.031830988618379068 - test3_B.Probe_bg[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S532>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_ph != 0U) {\r\n    test3_DW.Integrator_DSTATE_ed = test3_U.CellVoltages[73];\r\n    if (test3_DW.Integrator_DSTATE_ed >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ed = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ed <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ed = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_f3 || (test3_DW.Integrator_PrevResetState_ec != 0)) {\r\n    test3_DW.Integrator_DSTATE_ed = test3_U.CellVoltages[73];\r\n    if (test3_DW.Integrator_DSTATE_ed >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ed = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ed <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ed = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_ed >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ed = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ed <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ed = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S536>/Compare' incorporates:\r\n   *  Constant: '<S533>/Time constant'\r\n   *  Constant: '<S536>/Constant'\r\n   *  Sum: '<S533>/Sum1'\r\n   */\r\n  test3_B.Compare_lf = ((real32_T)(0.031830988618379068 - test3_B.Probe_hb[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S538>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_da != 0U) {\r\n    test3_DW.Integrator_DSTATE_fu = test3_U.CellVoltages[74];\r\n    if (test3_DW.Integrator_DSTATE_fu >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_fu = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_fu <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_fu = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_lf || (test3_DW.Integrator_PrevResetState_bb != 0)) {\r\n    test3_DW.Integrator_DSTATE_fu = test3_U.CellVoltages[74];\r\n    if (test3_DW.Integrator_DSTATE_fu >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_fu = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_fu <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_fu = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_fu >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_fu = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_fu <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_fu = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S542>/Compare' incorporates:\r\n   *  Constant: '<S539>/Time constant'\r\n   *  Constant: '<S542>/Constant'\r\n   *  Sum: '<S539>/Sum1'\r\n   */\r\n  test3_B.Compare_bi = ((real32_T)(0.031830988618379068 - test3_B.Probe_gk[0]) <=\r\n                        0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S544>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_cg != 0U) {\r\n    test3_DW.Integrator_DSTATE_he = test3_U.CellVoltages[75];\r\n    if (test3_DW.Integrator_DSTATE_he >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_he = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_he <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_he = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_bi || (test3_DW.Integrator_PrevResetState_n1 != 0)) {\r\n    test3_DW.Integrator_DSTATE_he = test3_U.CellVoltages[75];\r\n    if (test3_DW.Integrator_DSTATE_he >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_he = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_he <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_he = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_he >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_he = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_he <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_he = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S548>/Compare' incorporates:\r\n   *  Constant: '<S545>/Time constant'\r\n   *  Constant: '<S548>/Constant'\r\n   *  Sum: '<S545>/Sum1'\r\n   */\r\n  test3_B.Compare_bnj = ((real32_T)(0.031830988618379068 - test3_B.Probe_ny[0]) <=\r\n    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S550>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_d3 != 0U) {\r\n    test3_DW.Integrator_DSTATE_ot = test3_U.CellVoltages[76];\r\n    if (test3_DW.Integrator_DSTATE_ot >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ot = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ot <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ot = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_B.Compare_bnj || (test3_DW.Integrator_PrevResetState_iw != 0)) {\r\n    test3_DW.Integrator_DSTATE_ot = test3_U.CellVoltages[76];\r\n    if (test3_DW.Integrator_DSTATE_ot >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ot = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ot <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ot = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_ot >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ot = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ot <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ot = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S554>/Compare' incorporates:\r\n   *  Constant: '<S551>/Time constant'\r\n   *  Constant: '<S554>/Constant'\r\n   *  Sum: '<S551>/Sum1'\r\n   */\r\n  rtb_Compare_aw = ((real32_T)(0.031830988618379068 - test3_B.Probe_k0[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S556>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_d0 != 0U) {\r\n    test3_DW.Integrator_DSTATE_my = test3_U.CellVoltages[77];\r\n    if (test3_DW.Integrator_DSTATE_my >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_my = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_my <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_my = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_aw || (test3_DW.Integrator_PrevResetState_gg != 0)) {\r\n    test3_DW.Integrator_DSTATE_my = test3_U.CellVoltages[77];\r\n    if (test3_DW.Integrator_DSTATE_my >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_my = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_my <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_my = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_my >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_my = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_my <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_my = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S560>/Compare' incorporates:\r\n   *  Constant: '<S557>/Time constant'\r\n   *  Constant: '<S560>/Constant'\r\n   *  Sum: '<S557>/Sum1'\r\n   */\r\n  rtb_Compare_gz = ((real32_T)(0.031830988618379068 - test3_B.Probe_ic[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S562>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_mg != 0U) {\r\n    test3_DW.Integrator_DSTATE_lt = test3_U.CellVoltages[78];\r\n    if (test3_DW.Integrator_DSTATE_lt >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_lt = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_lt <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_lt = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_gz || (test3_DW.Integrator_PrevResetState_lz != 0)) {\r\n    test3_DW.Integrator_DSTATE_lt = test3_U.CellVoltages[78];\r\n    if (test3_DW.Integrator_DSTATE_lt >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_lt = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_lt <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_lt = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_lt >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_lt = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_lt <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_lt = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S572>/Compare' incorporates:\r\n   *  Constant: '<S569>/Time constant'\r\n   *  Constant: '<S572>/Constant'\r\n   *  Sum: '<S569>/Sum1'\r\n   */\r\n  rtb_Compare_ms = ((real32_T)(0.031830988618379068 - test3_B.Probe_lg[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S574>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_e3 != 0U) {\r\n    test3_DW.Integrator_DSTATE_pd = test3_U.CellVoltages[79];\r\n    if (test3_DW.Integrator_DSTATE_pd >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_pd = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_pd <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_pd = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_ms || (test3_DW.Integrator_PrevResetState_dkv != 0)) {\r\n    test3_DW.Integrator_DSTATE_pd = test3_U.CellVoltages[79];\r\n    if (test3_DW.Integrator_DSTATE_pd >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_pd = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_pd <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_pd = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_pd >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_pd = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_pd <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_pd = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S578>/Compare' incorporates:\r\n   *  Constant: '<S575>/Time constant'\r\n   *  Constant: '<S578>/Constant'\r\n   *  Sum: '<S575>/Sum1'\r\n   */\r\n  rtb_Compare_ar = ((real32_T)(0.031830988618379068 - test3_B.Probe_fh[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S580>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_ns != 0U) {\r\n    test3_DW.Integrator_DSTATE_en = test3_U.CellVoltages[80];\r\n    if (test3_DW.Integrator_DSTATE_en >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_en = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_en <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_en = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_ar || (test3_DW.Integrator_PrevResetState_bq != 0)) {\r\n    test3_DW.Integrator_DSTATE_en = test3_U.CellVoltages[80];\r\n    if (test3_DW.Integrator_DSTATE_en >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_en = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_en <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_en = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_en >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_en = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_en <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_en = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S584>/Compare' incorporates:\r\n   *  Constant: '<S581>/Time constant'\r\n   *  Constant: '<S584>/Constant'\r\n   *  Sum: '<S581>/Sum1'\r\n   */\r\n  rtb_Compare_euj = ((real32_T)(0.031830988618379068 - test3_B.Probe_eh[0]) <=\r\n                     0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S586>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_hp != 0U) {\r\n    test3_DW.Integrator_DSTATE_ix = test3_U.CellVoltages[81];\r\n    if (test3_DW.Integrator_DSTATE_ix >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ix = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ix <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ix = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_euj || (test3_DW.Integrator_PrevResetState_pb != 0)) {\r\n    test3_DW.Integrator_DSTATE_ix = test3_U.CellVoltages[81];\r\n    if (test3_DW.Integrator_DSTATE_ix >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ix = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ix <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ix = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_ix >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ix = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ix <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ix = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S590>/Compare' incorporates:\r\n   *  Constant: '<S587>/Time constant'\r\n   *  Constant: '<S590>/Constant'\r\n   *  Sum: '<S587>/Sum1'\r\n   */\r\n  rtb_Compare_gk = ((real32_T)(0.031830988618379068 - test3_B.Probe_nl[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S592>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_a0 != 0U) {\r\n    test3_DW.Integrator_DSTATE_hg = test3_U.CellVoltages[82];\r\n    if (test3_DW.Integrator_DSTATE_hg >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_hg = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_hg <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_hg = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_gk || (test3_DW.Integrator_PrevResetState_ew != 0)) {\r\n    test3_DW.Integrator_DSTATE_hg = test3_U.CellVoltages[82];\r\n    if (test3_DW.Integrator_DSTATE_hg >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_hg = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_hg <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_hg = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_hg >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_hg = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_hg <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_hg = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S596>/Compare' incorporates:\r\n   *  Constant: '<S593>/Time constant'\r\n   *  Constant: '<S596>/Constant'\r\n   *  Sum: '<S593>/Sum1'\r\n   */\r\n  rtb_Compare_lu = ((real32_T)(0.031830988618379068 - test3_B.Probe_bo[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S598>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_bo != 0U) {\r\n    test3_DW.Integrator_DSTATE_fm = test3_U.CellVoltages[83];\r\n    if (test3_DW.Integrator_DSTATE_fm >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_fm = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_fm <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_fm = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_lu || (test3_DW.Integrator_PrevResetState_pl != 0)) {\r\n    test3_DW.Integrator_DSTATE_fm = test3_U.CellVoltages[83];\r\n    if (test3_DW.Integrator_DSTATE_fm >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_fm = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_fm <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_fm = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_fm >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_fm = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_fm <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_fm = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S602>/Compare' incorporates:\r\n   *  Constant: '<S599>/Time constant'\r\n   *  Constant: '<S602>/Constant'\r\n   *  Sum: '<S599>/Sum1'\r\n   */\r\n  rtb_Compare_gb = ((real32_T)(0.031830988618379068 - test3_B.Probe_kb[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S604>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_kq != 0U) {\r\n    test3_DW.Integrator_DSTATE_ok = test3_U.CellVoltages[84];\r\n    if (test3_DW.Integrator_DSTATE_ok >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ok = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ok <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ok = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_gb || (test3_DW.Integrator_PrevResetState_mu != 0)) {\r\n    test3_DW.Integrator_DSTATE_ok = test3_U.CellVoltages[84];\r\n    if (test3_DW.Integrator_DSTATE_ok >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ok = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ok <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ok = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_ok >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ok = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ok <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ok = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S608>/Compare' incorporates:\r\n   *  Constant: '<S605>/Time constant'\r\n   *  Constant: '<S608>/Constant'\r\n   *  Sum: '<S605>/Sum1'\r\n   */\r\n  rtb_Compare_b4 = ((real32_T)(0.031830988618379068 - test3_B.Probe_l3[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S610>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_h2 != 0U) {\r\n    test3_DW.Integrator_DSTATE_ns = test3_U.CellVoltages[85];\r\n    if (test3_DW.Integrator_DSTATE_ns >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ns = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ns <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ns = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_b4 || (test3_DW.Integrator_PrevResetState_e4 != 0)) {\r\n    test3_DW.Integrator_DSTATE_ns = test3_U.CellVoltages[85];\r\n    if (test3_DW.Integrator_DSTATE_ns >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ns = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ns <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ns = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_ns >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ns = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ns <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ns = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S614>/Compare' incorporates:\r\n   *  Constant: '<S611>/Time constant'\r\n   *  Constant: '<S614>/Constant'\r\n   *  Sum: '<S611>/Sum1'\r\n   */\r\n  rtb_Compare_l0 = ((real32_T)(0.031830988618379068 - test3_B.Probe_j0n[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S616>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_kkm != 0U) {\r\n    test3_DW.Integrator_DSTATE_ga = test3_U.CellVoltages[86];\r\n    if (test3_DW.Integrator_DSTATE_ga >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ga = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ga <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ga = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_l0 || (test3_DW.Integrator_PrevResetState_jl != 0)) {\r\n    test3_DW.Integrator_DSTATE_ga = test3_U.CellVoltages[86];\r\n    if (test3_DW.Integrator_DSTATE_ga >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_ga = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_ga <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_ga = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_ga >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ga = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ga <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ga = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S620>/Compare' incorporates:\r\n   *  Constant: '<S617>/Time constant'\r\n   *  Constant: '<S620>/Constant'\r\n   *  Sum: '<S617>/Sum1'\r\n   */\r\n  rtb_Compare_da = ((real32_T)(0.031830988618379068 - test3_B.Probe_pu[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S622>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_bz != 0U) {\r\n    test3_DW.Integrator_DSTATE_dsn = test3_U.CellVoltages[87];\r\n    if (test3_DW.Integrator_DSTATE_dsn >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_dsn = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_dsn <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_dsn = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_da || (test3_DW.Integrator_PrevResetState_cx != 0)) {\r\n    test3_DW.Integrator_DSTATE_dsn = test3_U.CellVoltages[87];\r\n    if (test3_DW.Integrator_DSTATE_dsn >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_dsn = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_dsn <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_dsn = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_dsn >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_dsn = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_dsn <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_dsn = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S626>/Compare' incorporates:\r\n   *  Constant: '<S623>/Time constant'\r\n   *  Constant: '<S626>/Constant'\r\n   *  Sum: '<S623>/Sum1'\r\n   */\r\n  rtb_Compare_cm = ((real32_T)(0.031830988618379068 - test3_B.Probe_jw[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S628>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_o1 != 0U) {\r\n    test3_DW.Integrator_DSTATE_pc = test3_U.CellVoltages[88];\r\n    if (test3_DW.Integrator_DSTATE_pc >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_pc = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_pc <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_pc = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_cm || (test3_DW.Integrator_PrevResetState_mm != 0)) {\r\n    test3_DW.Integrator_DSTATE_pc = test3_U.CellVoltages[88];\r\n    if (test3_DW.Integrator_DSTATE_pc >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_pc = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_pc <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_pc = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_pc >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_pc = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_pc <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_pc = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S638>/Compare' incorporates:\r\n   *  Constant: '<S635>/Time constant'\r\n   *  Constant: '<S638>/Constant'\r\n   *  Sum: '<S635>/Sum1'\r\n   */\r\n  rtb_Compare_et = ((real32_T)(0.031830988618379068 - test3_B.Probe_g2[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S640>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_fcd != 0U) {\r\n    test3_DW.Integrator_DSTATE_eg = test3_U.CellVoltages[89];\r\n    if (test3_DW.Integrator_DSTATE_eg >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_eg = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_eg <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_eg = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_et || (test3_DW.Integrator_PrevResetState_pg != 0)) {\r\n    test3_DW.Integrator_DSTATE_eg = test3_U.CellVoltages[89];\r\n    if (test3_DW.Integrator_DSTATE_eg >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_eg = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_eg <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_eg = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_eg >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_eg = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_eg <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_eg = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S644>/Compare' incorporates:\r\n   *  Constant: '<S641>/Time constant'\r\n   *  Constant: '<S644>/Constant'\r\n   *  Sum: '<S641>/Sum1'\r\n   */\r\n  rtb_Compare_eo = ((real32_T)(0.031830988618379068 - test3_B.Probe_opc[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S646>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_bp != 0U) {\r\n    test3_DW.Integrator_DSTATE_jx = test3_U.CellVoltages[90];\r\n    if (test3_DW.Integrator_DSTATE_jx >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_jx = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_jx <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_jx = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_eo || (test3_DW.Integrator_PrevResetState_md != 0)) {\r\n    test3_DW.Integrator_DSTATE_jx = test3_U.CellVoltages[90];\r\n    if (test3_DW.Integrator_DSTATE_jx >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_jx = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_jx <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_jx = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_jx >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_jx = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_jx <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_jx = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S650>/Compare' incorporates:\r\n   *  Constant: '<S647>/Time constant'\r\n   *  Constant: '<S650>/Constant'\r\n   *  Sum: '<S647>/Sum1'\r\n   */\r\n  rtb_Compare_pd = ((real32_T)(0.031830988618379068 - test3_B.Probe_lf[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S652>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_ad != 0U) {\r\n    test3_DW.Integrator_DSTATE_im = test3_U.CellVoltages[91];\r\n    if (test3_DW.Integrator_DSTATE_im >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_im = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_im <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_im = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_pd || (test3_DW.Integrator_PrevResetState_bf != 0)) {\r\n    test3_DW.Integrator_DSTATE_im = test3_U.CellVoltages[91];\r\n    if (test3_DW.Integrator_DSTATE_im >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_im = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_im <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_im = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_im >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_im = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_im <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_im = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S656>/Compare' incorporates:\r\n   *  Constant: '<S653>/Time constant'\r\n   *  Constant: '<S656>/Constant'\r\n   *  Sum: '<S653>/Sum1'\r\n   */\r\n  rtb_Compare_is = ((real32_T)(0.031830988618379068 - test3_B.Probe_m5[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S658>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_kv != 0U) {\r\n    test3_DW.Integrator_DSTATE_hp = test3_U.CellVoltages[92];\r\n    if (test3_DW.Integrator_DSTATE_hp >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_hp = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_hp <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_hp = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_is || (test3_DW.Integrator_PrevResetState_fam != 0)) {\r\n    test3_DW.Integrator_DSTATE_hp = test3_U.CellVoltages[92];\r\n    if (test3_DW.Integrator_DSTATE_hp >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_hp = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_hp <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_hp = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_hp >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_hp = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_hp <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_hp = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S662>/Compare' incorporates:\r\n   *  Constant: '<S659>/Time constant'\r\n   *  Constant: '<S662>/Constant'\r\n   *  Sum: '<S659>/Sum1'\r\n   */\r\n  rtb_Compare_ee = ((real32_T)(0.031830988618379068 - test3_B.Probe_da[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S664>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_h20 != 0U) {\r\n    test3_DW.Integrator_DSTATE_aq = test3_U.CellVoltages[93];\r\n    if (test3_DW.Integrator_DSTATE_aq >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_aq = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_aq <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_aq = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_ee || (test3_DW.Integrator_PrevResetState_g2 != 0)) {\r\n    test3_DW.Integrator_DSTATE_aq = test3_U.CellVoltages[93];\r\n    if (test3_DW.Integrator_DSTATE_aq >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_aq = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_aq <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_aq = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_aq >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_aq = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_aq <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_aq = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S668>/Compare' incorporates:\r\n   *  Constant: '<S665>/Time constant'\r\n   *  Constant: '<S668>/Constant'\r\n   *  Sum: '<S665>/Sum1'\r\n   */\r\n  rtb_Compare_mpz = ((real32_T)(0.031830988618379068 - test3_B.Probe_he[0]) <=\r\n                     0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S670>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_d04 != 0U) {\r\n    test3_DW.Integrator_DSTATE_lx = test3_U.CellVoltages[94];\r\n    if (test3_DW.Integrator_DSTATE_lx >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_lx = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_lx <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_lx = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_mpz || (test3_DW.Integrator_PrevResetState_ou != 0)) {\r\n    test3_DW.Integrator_DSTATE_lx = test3_U.CellVoltages[94];\r\n    if (test3_DW.Integrator_DSTATE_lx >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_lx = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_lx <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_lx = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_lx >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_lx = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_lx <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_lx = 0.0F;\r\n  }\r\n\r\n  /* RelationalOperator: '<S674>/Compare' incorporates:\r\n   *  Constant: '<S671>/Time constant'\r\n   *  Constant: '<S674>/Constant'\r\n   *  Sum: '<S671>/Sum1'\r\n   */\r\n  rtb_Compare_ne = ((real32_T)(0.031830988618379068 - test3_B.Probe_ak[0]) <=\r\n                    0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S676>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   */\r\n  if (test3_DW.Integrator_IC_LOADING_jn != 0U) {\r\n    test3_DW.Integrator_DSTATE_l5 = test3_U.CellVoltages[95];\r\n    if (test3_DW.Integrator_DSTATE_l5 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_l5 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_l5 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_l5 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_ne || (test3_DW.Integrator_PrevResetState_k5 != 0)) {\r\n    test3_DW.Integrator_DSTATE_l5 = test3_U.CellVoltages[95];\r\n    if (test3_DW.Integrator_DSTATE_l5 >= 6.0F) {\r\n      test3_DW.Integrator_DSTATE_l5 = 6.0F;\r\n    } else if (test3_DW.Integrator_DSTATE_l5 <= 0.0F) {\r\n      test3_DW.Integrator_DSTATE_l5 = 0.0F;\r\n    }\r\n  }\r\n\r\n  if (test3_DW.Integrator_DSTATE_l5 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_l5 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_l5 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_l5 = 0.0F;\r\n  }\r\n\r\n  /* MinMax: '<Root>/Min' incorporates:\r\n   *  DiscreteIntegrator: '<S106>/Integrator'\r\n   *  DiscreteIntegrator: '<S112>/Integrator'\r\n   *  DiscreteIntegrator: '<S118>/Integrator'\r\n   *  DiscreteIntegrator: '<S124>/Integrator'\r\n   *  DiscreteIntegrator: '<S130>/Integrator'\r\n   *  DiscreteIntegrator: '<S136>/Integrator'\r\n   *  DiscreteIntegrator: '<S142>/Integrator'\r\n   *  DiscreteIntegrator: '<S148>/Integrator'\r\n   *  DiscreteIntegrator: '<S154>/Integrator'\r\n   *  DiscreteIntegrator: '<S160>/Integrator'\r\n   *  DiscreteIntegrator: '<S166>/Integrator'\r\n   *  DiscreteIntegrator: '<S172>/Integrator'\r\n   *  DiscreteIntegrator: '<S178>/Integrator'\r\n   *  DiscreteIntegrator: '<S184>/Integrator'\r\n   *  DiscreteIntegrator: '<S190>/Integrator'\r\n   *  DiscreteIntegrator: '<S196>/Integrator'\r\n   *  DiscreteIntegrator: '<S202>/Integrator'\r\n   *  DiscreteIntegrator: '<S208>/Integrator'\r\n   *  DiscreteIntegrator: '<S214>/Integrator'\r\n   *  DiscreteIntegrator: '<S220>/Integrator'\r\n   *  DiscreteIntegrator: '<S226>/Integrator'\r\n   *  DiscreteIntegrator: '<S232>/Integrator'\r\n   *  DiscreteIntegrator: '<S238>/Integrator'\r\n   *  DiscreteIntegrator: '<S244>/Integrator'\r\n   *  DiscreteIntegrator: '<S250>/Integrator'\r\n   *  DiscreteIntegrator: '<S256>/Integrator'\r\n   *  DiscreteIntegrator: '<S262>/Integrator'\r\n   *  DiscreteIntegrator: '<S268>/Integrator'\r\n   *  DiscreteIntegrator: '<S274>/Integrator'\r\n   *  DiscreteIntegrator: '<S280>/Integrator'\r\n   *  DiscreteIntegrator: '<S286>/Integrator'\r\n   *  DiscreteIntegrator: '<S292>/Integrator'\r\n   *  DiscreteIntegrator: '<S298>/Integrator'\r\n   *  DiscreteIntegrator: '<S304>/Integrator'\r\n   *  DiscreteIntegrator: '<S310>/Integrator'\r\n   *  DiscreteIntegrator: '<S316>/Integrator'\r\n   *  DiscreteIntegrator: '<S322>/Integrator'\r\n   *  DiscreteIntegrator: '<S328>/Integrator'\r\n   *  DiscreteIntegrator: '<S334>/Integrator'\r\n   *  DiscreteIntegrator: '<S340>/Integrator'\r\n   *  DiscreteIntegrator: '<S346>/Integrator'\r\n   *  DiscreteIntegrator: '<S352>/Integrator'\r\n   *  DiscreteIntegrator: '<S358>/Integrator'\r\n   *  DiscreteIntegrator: '<S364>/Integrator'\r\n   *  DiscreteIntegrator: '<S370>/Integrator'\r\n   *  DiscreteIntegrator: '<S376>/Integrator'\r\n   *  DiscreteIntegrator: '<S382>/Integrator'\r\n   *  DiscreteIntegrator: '<S388>/Integrator'\r\n   *  DiscreteIntegrator: '<S394>/Integrator'\r\n   *  DiscreteIntegrator: '<S400>/Integrator'\r\n   *  DiscreteIntegrator: '<S406>/Integrator'\r\n   *  DiscreteIntegrator: '<S412>/Integrator'\r\n   *  DiscreteIntegrator: '<S418>/Integrator'\r\n   *  DiscreteIntegrator: '<S424>/Integrator'\r\n   *  DiscreteIntegrator: '<S430>/Integrator'\r\n   *  DiscreteIntegrator: '<S436>/Integrator'\r\n   *  DiscreteIntegrator: '<S442>/Integrator'\r\n   *  DiscreteIntegrator: '<S448>/Integrator'\r\n   *  DiscreteIntegrator: '<S454>/Integrator'\r\n   *  DiscreteIntegrator: '<S460>/Integrator'\r\n   *  DiscreteIntegrator: '<S466>/Integrator'\r\n   *  DiscreteIntegrator: '<S472>/Integrator'\r\n   *  DiscreteIntegrator: '<S478>/Integrator'\r\n   *  DiscreteIntegrator: '<S484>/Integrator'\r\n   *  DiscreteIntegrator: '<S490>/Integrator'\r\n   *  DiscreteIntegrator: '<S496>/Integrator'\r\n   *  DiscreteIntegrator: '<S502>/Integrator'\r\n   *  DiscreteIntegrator: '<S508>/Integrator'\r\n   *  DiscreteIntegrator: '<S514>/Integrator'\r\n   *  DiscreteIntegrator: '<S520>/Integrator'\r\n   *  DiscreteIntegrator: '<S526>/Integrator'\r\n   *  DiscreteIntegrator: '<S532>/Integrator'\r\n   *  DiscreteIntegrator: '<S538>/Integrator'\r\n   *  DiscreteIntegrator: '<S544>/Integrator'\r\n   *  DiscreteIntegrator: '<S550>/Integrator'\r\n   *  DiscreteIntegrator: '<S556>/Integrator'\r\n   *  DiscreteIntegrator: '<S562>/Integrator'\r\n   *  DiscreteIntegrator: '<S568>/Integrator'\r\n   *  DiscreteIntegrator: '<S574>/Integrator'\r\n   *  DiscreteIntegrator: '<S580>/Integrator'\r\n   *  DiscreteIntegrator: '<S586>/Integrator'\r\n   *  DiscreteIntegrator: '<S592>/Integrator'\r\n   *  DiscreteIntegrator: '<S598>/Integrator'\r\n   *  DiscreteIntegrator: '<S604>/Integrator'\r\n   *  DiscreteIntegrator: '<S610>/Integrator'\r\n   *  DiscreteIntegrator: '<S616>/Integrator'\r\n   *  DiscreteIntegrator: '<S622>/Integrator'\r\n   *  DiscreteIntegrator: '<S628>/Integrator'\r\n   *  DiscreteIntegrator: '<S634>/Integrator'\r\n   *  DiscreteIntegrator: '<S640>/Integrator'\r\n   *  DiscreteIntegrator: '<S646>/Integrator'\r\n   *  DiscreteIntegrator: '<S652>/Integrator'\r\n   *  DiscreteIntegrator: '<S658>/Integrator'\r\n   *  DiscreteIntegrator: '<S664>/Integrator'\r\n   *  DiscreteIntegrator: '<S670>/Integrator'\r\n   *  DiscreteIntegrator: '<S676>/Integrator'\r\n   *  MinMax: '<Root>/Max'\r\n   *  Sum: '<Root>/Sum'\r\n   */\r\n  test3_B.TmpSignalConversionAtSFunctionI[0] = test3_DW.Integrator_DSTATE;\r\n  test3_B.TmpSignalConversionAtSFunctionI[1] = test3_DW.Integrator_DSTATE_a;\r\n  test3_B.TmpSignalConversionAtSFunctionI[2] = test3_DW.Integrator_DSTATE_n;\r\n  test3_B.TmpSignalConversionAtSFunctionI[3] = test3_DW.Integrator_DSTATE_b;\r\n  test3_B.TmpSignalConversionAtSFunctionI[4] = test3_DW.Integrator_DSTATE_g;\r\n  test3_B.TmpSignalConversionAtSFunctionI[5] = test3_DW.Integrator_DSTATE_i;\r\n  test3_B.TmpSignalConversionAtSFunctionI[6] = test3_DW.Integrator_DSTATE_e;\r\n  test3_B.TmpSignalConversionAtSFunctionI[7] = test3_DW.Integrator_DSTATE_id;\r\n  test3_B.TmpSignalConversionAtSFunctionI[8] = test3_DW.Integrator_DSTATE_is;\r\n  test3_B.TmpSignalConversionAtSFunctionI[9] = test3_DW.Integrator_DSTATE_j;\r\n  test3_B.TmpSignalConversionAtSFunctionI[10] = test3_DW.Integrator_DSTATE_j1;\r\n  test3_B.TmpSignalConversionAtSFunctionI[11] = test3_DW.Integrator_DSTATE_jr;\r\n  test3_B.TmpSignalConversionAtSFunctionI[12] = test3_DW.Integrator_DSTATE_p;\r\n  test3_B.TmpSignalConversionAtSFunctionI[13] = test3_DW.Integrator_DSTATE_o;\r\n  test3_B.TmpSignalConversionAtSFunctionI[14] = test3_DW.Integrator_DSTATE_f;\r\n  test3_B.TmpSignalConversionAtSFunctionI[15] = test3_DW.Integrator_DSTATE_fo;\r\n  test3_B.TmpSignalConversionAtSFunctionI[16] = test3_DW.Integrator_DSTATE_i1;\r\n  test3_B.TmpSignalConversionAtSFunctionI[17] = test3_DW.Integrator_DSTATE_fj;\r\n  test3_B.TmpSignalConversionAtSFunctionI[18] = test3_DW.Integrator_DSTATE_d;\r\n  test3_B.TmpSignalConversionAtSFunctionI[19] = test3_DW.Integrator_DSTATE_g5;\r\n  test3_B.TmpSignalConversionAtSFunctionI[20] = test3_DW.Integrator_DSTATE_pf;\r\n  test3_B.TmpSignalConversionAtSFunctionI[21] = test3_DW.Integrator_DSTATE_c;\r\n  test3_B.TmpSignalConversionAtSFunctionI[22] = test3_DW.Integrator_DSTATE_m;\r\n  test3_B.TmpSignalConversionAtSFunctionI[23] = test3_DW.Integrator_DSTATE_j2;\r\n  test3_B.TmpSignalConversionAtSFunctionI[24] = test3_DW.Integrator_DSTATE_iz;\r\n  test3_B.TmpSignalConversionAtSFunctionI[25] = test3_DW.Integrator_DSTATE_bh;\r\n  test3_B.TmpSignalConversionAtSFunctionI[26] = test3_DW.Integrator_DSTATE_ji;\r\n  test3_B.TmpSignalConversionAtSFunctionI[27] = test3_DW.Integrator_DSTATE_od;\r\n  test3_B.TmpSignalConversionAtSFunctionI[28] = test3_DW.Integrator_DSTATE_oy;\r\n  test3_B.TmpSignalConversionAtSFunctionI[29] = test3_DW.Integrator_DSTATE_nc;\r\n  test3_B.TmpSignalConversionAtSFunctionI[30] = test3_DW.Integrator_DSTATE_c2;\r\n  test3_B.TmpSignalConversionAtSFunctionI[31] = test3_DW.Integrator_DSTATE_pa;\r\n  test3_B.TmpSignalConversionAtSFunctionI[32] = test3_DW.Integrator_DSTATE_ez;\r\n  test3_B.TmpSignalConversionAtSFunctionI[33] = test3_DW.Integrator_DSTATE_bp;\r\n  test3_B.TmpSignalConversionAtSFunctionI[34] = test3_DW.Integrator_DSTATE_h;\r\n  test3_B.TmpSignalConversionAtSFunctionI[35] = test3_DW.Integrator_DSTATE_i4;\r\n  test3_B.TmpSignalConversionAtSFunctionI[36] = test3_DW.Integrator_DSTATE_fp;\r\n  test3_B.TmpSignalConversionAtSFunctionI[37] = test3_DW.Integrator_DSTATE_hx;\r\n  test3_B.TmpSignalConversionAtSFunctionI[38] = test3_DW.Integrator_DSTATE_k;\r\n  test3_B.TmpSignalConversionAtSFunctionI[39] = test3_DW.Integrator_DSTATE_g3;\r\n  test3_B.TmpSignalConversionAtSFunctionI[40] = test3_DW.Integrator_DSTATE_h4;\r\n  test3_B.TmpSignalConversionAtSFunctionI[41] = test3_DW.Integrator_DSTATE_e5;\r\n  test3_B.TmpSignalConversionAtSFunctionI[42] = test3_DW.Integrator_DSTATE_oc;\r\n  test3_B.TmpSignalConversionAtSFunctionI[43] = test3_DW.Integrator_DSTATE_n5;\r\n  test3_B.TmpSignalConversionAtSFunctionI[44] = test3_DW.Integrator_DSTATE_do;\r\n  test3_B.TmpSignalConversionAtSFunctionI[45] = test3_DW.Integrator_DSTATE_ds;\r\n  test3_B.TmpSignalConversionAtSFunctionI[46] = test3_DW.Integrator_DSTATE_bv;\r\n  test3_B.TmpSignalConversionAtSFunctionI[47] = test3_DW.Integrator_DSTATE_o3;\r\n  test3_B.TmpSignalConversionAtSFunctionI[48] = test3_DW.Integrator_DSTATE_fg;\r\n  test3_B.TmpSignalConversionAtSFunctionI[49] = test3_DW.Integrator_DSTATE_a4;\r\n  test3_B.TmpSignalConversionAtSFunctionI[50] = test3_DW.Integrator_DSTATE_l;\r\n  test3_B.TmpSignalConversionAtSFunctionI[51] = test3_DW.Integrator_DSTATE_eo;\r\n  test3_B.TmpSignalConversionAtSFunctionI[52] = test3_DW.Integrator_DSTATE_cl;\r\n  test3_B.TmpSignalConversionAtSFunctionI[53] = test3_DW.Integrator_DSTATE_bs;\r\n  test3_B.TmpSignalConversionAtSFunctionI[54] = test3_DW.Integrator_DSTATE_e2;\r\n  test3_B.TmpSignalConversionAtSFunctionI[55] = test3_DW.Integrator_DSTATE_lr;\r\n  test3_B.TmpSignalConversionAtSFunctionI[56] = test3_DW.Integrator_DSTATE_gx;\r\n  test3_B.TmpSignalConversionAtSFunctionI[57] = test3_DW.Integrator_DSTATE_nu;\r\n  test3_B.TmpSignalConversionAtSFunctionI[58] = test3_DW.Integrator_DSTATE_az;\r\n  test3_B.TmpSignalConversionAtSFunctionI[59] = test3_DW.Integrator_DSTATE_kc;\r\n  test3_B.TmpSignalConversionAtSFunctionI[60] = test3_DW.Integrator_DSTATE_mc;\r\n  test3_B.TmpSignalConversionAtSFunctionI[61] = test3_DW.Integrator_DSTATE_nm;\r\n  test3_B.TmpSignalConversionAtSFunctionI[62] = test3_DW.Integrator_DSTATE_po;\r\n  test3_B.TmpSignalConversionAtSFunctionI[63] = test3_DW.Integrator_DSTATE_bt;\r\n  test3_B.TmpSignalConversionAtSFunctionI[64] = test3_DW.Integrator_DSTATE_jt;\r\n  test3_B.TmpSignalConversionAtSFunctionI[65] = test3_DW.Integrator_DSTATE_dc;\r\n  test3_B.TmpSignalConversionAtSFunctionI[66] = test3_DW.Integrator_DSTATE_pb;\r\n  test3_B.TmpSignalConversionAtSFunctionI[67] = test3_DW.Integrator_DSTATE_oe;\r\n  test3_B.TmpSignalConversionAtSFunctionI[68] = test3_DW.Integrator_DSTATE_al;\r\n  test3_B.TmpSignalConversionAtSFunctionI[69] = test3_DW.Integrator_DSTATE_cx;\r\n  test3_B.TmpSignalConversionAtSFunctionI[70] = test3_DW.Integrator_DSTATE_cr;\r\n  test3_B.TmpSignalConversionAtSFunctionI[71] = test3_DW.Integrator_DSTATE_p3;\r\n  test3_B.TmpSignalConversionAtSFunctionI[72] = test3_DW.Integrator_DSTATE_kv;\r\n  test3_B.TmpSignalConversionAtSFunctionI[73] = test3_DW.Integrator_DSTATE_ed;\r\n  test3_B.TmpSignalConversionAtSFunctionI[74] = test3_DW.Integrator_DSTATE_fu;\r\n  test3_B.TmpSignalConversionAtSFunctionI[75] = test3_DW.Integrator_DSTATE_he;\r\n  test3_B.TmpSignalConversionAtSFunctionI[76] = test3_DW.Integrator_DSTATE_ot;\r\n  test3_B.TmpSignalConversionAtSFunctionI[77] = test3_DW.Integrator_DSTATE_my;\r\n  test3_B.TmpSignalConversionAtSFunctionI[78] = test3_DW.Integrator_DSTATE_lt;\r\n  test3_B.TmpSignalConversionAtSFunctionI[79] = test3_DW.Integrator_DSTATE_pd;\r\n  test3_B.TmpSignalConversionAtSFunctionI[80] = test3_DW.Integrator_DSTATE_en;\r\n  test3_B.TmpSignalConversionAtSFunctionI[81] = test3_DW.Integrator_DSTATE_ix;\r\n  test3_B.TmpSignalConversionAtSFunctionI[82] = test3_DW.Integrator_DSTATE_hg;\r\n  test3_B.TmpSignalConversionAtSFunctionI[83] = test3_DW.Integrator_DSTATE_fm;\r\n  test3_B.TmpSignalConversionAtSFunctionI[84] = test3_DW.Integrator_DSTATE_ok;\r\n  test3_B.TmpSignalConversionAtSFunctionI[85] = test3_DW.Integrator_DSTATE_ns;\r\n  test3_B.TmpSignalConversionAtSFunctionI[86] = test3_DW.Integrator_DSTATE_ga;\r\n  test3_B.TmpSignalConversionAtSFunctionI[87] = test3_DW.Integrator_DSTATE_dsn;\r\n  test3_B.TmpSignalConversionAtSFunctionI[88] = test3_DW.Integrator_DSTATE_pc;\r\n  test3_B.TmpSignalConversionAtSFunctionI[89] = test3_DW.Integrator_DSTATE_eg;\r\n  test3_B.TmpSignalConversionAtSFunctionI[90] = test3_DW.Integrator_DSTATE_jx;\r\n  test3_B.TmpSignalConversionAtSFunctionI[91] = test3_DW.Integrator_DSTATE_im;\r\n  test3_B.TmpSignalConversionAtSFunctionI[92] = test3_DW.Integrator_DSTATE_hp;\r\n  test3_B.TmpSignalConversionAtSFunctionI[93] = test3_DW.Integrator_DSTATE_aq;\r\n  test3_B.TmpSignalConversionAtSFunctionI[94] = test3_DW.Integrator_DSTATE_lx;\r\n  test3_B.TmpSignalConversionAtSFunctionI[95] = test3_DW.Integrator_DSTATE_l5;\r\n  test3_Y.MinCellVolt = test3_DW.Integrator_DSTATE;\r\n\r\n  /* MinMax: '<Root>/Max' incorporates:\r\n   *  DiscreteIntegrator: '<S106>/Integrator'\r\n   */\r\n  test3_Y.MaxCellVolt = test3_DW.Integrator_DSTATE;\r\n  for (test3_B.i = 0; test3_B.i < 95; test3_B.i++) {\r\n    /* MinMax: '<Root>/Min' incorporates:\r\n     *  MinMax: '<Root>/Max'\r\n     */\r\n    test3_B.Max = test3_B.TmpSignalConversionAtSFunctionI[(int32_T)(test3_B.i +\r\n      1)];\r\n    if ((!(test3_Y.MinCellVolt <= test3_B.Max)) && (!rtIsNaNF(test3_B.Max))) {\r\n      test3_Y.MinCellVolt = test3_B.Max;\r\n    }\r\n\r\n    /* MinMax: '<Root>/Max' */\r\n    if ((!(test3_Y.MaxCellVolt >= test3_B.Max)) && (!rtIsNaNF(test3_B.Max))) {\r\n      test3_Y.MaxCellVolt = test3_B.Max;\r\n    }\r\n  }\r\n\r\n  /* Sum: '<Root>/Sum' */\r\n  test3_Y.SumOfVoltages = -0.0F;\r\n  for (test3_B.i = 0; test3_B.i < 96; test3_B.i++) {\r\n    test3_Y.SumOfVoltages += test3_B.TmpSignalConversionAtSFunctionI[test3_B.i];\r\n  }\r\n\r\n  /* Outputs for Atomic SubSystem: '<Root>/Current_Limit' */\r\n  /* Lookup_n-D: '<S99>/Rdc' incorporates:\r\n   *  Inport: '<Root>/SOC'\r\n   *  MinMax: '<Root>/Min1'\r\n   *  Outport: '<Root>/MinCellTemp'\r\n   */\r\n  test3_B.Max = look2_iflf_pbinlcpw(test3_U.SOC, test3_Y.MinCellTemp,\r\n    test3_ConstP.Rdc_bp01Data, test3_ConstP.Rdc_bp02Data,\r\n    test3_ConstP.Rdc_tableData, test3_DW.m_bpIndex, test3_ConstP.Rdc_maxIndex,\r\n    11UL);\r\n\r\n  /* Product: '<S682>/Divide1' incorporates:\r\n   *  Constant: '<S682>/OverVoltageLimit'\r\n   *  Outport: '<Root>/MaxCellVolt'\r\n   *  Sum: '<S682>/Subtract1'\r\n   */\r\n  test3_B.cumRevIndex = (4.37F - test3_Y.MaxCellVolt) / test3_B.Max;\r\n\r\n  /* Lookup_n-D: '<S682>/LowTempDchrgCurrentLim' incorporates:\r\n   *  MinMax: '<Root>/Min1'\r\n   *  Outport: '<Root>/MinCellTemp'\r\n   */\r\n  test3_B.Saturation1 = look1_iflf_binlxpw(test3_Y.MinCellTemp,\r\n    test3_ConstP.pooled12, test3_ConstP.LowTempDchrgCurrentLim_tableDat, 90UL);\r\n\r\n  /* MinMax: '<S682>/MinMax2' */\r\n  if ((test3_B.cumRevIndex <= test3_B.Saturation1) || rtIsNaNF\r\n      (test3_B.Saturation1)) {\r\n    test3_B.Saturation1 = test3_B.cumRevIndex;\r\n  }\r\n\r\n  /* Lookup_n-D: '<S682>/HighTempChrgCurrentLim' incorporates:\r\n   *  MinMax: '<Root>/Max1'\r\n   *  Outport: '<Root>/MaxCellTemp'\r\n   */\r\n  test3_B.cumRevIndex = look1_iflf_binlxpw(test3_Y.MaxCellTemp,\r\n    test3_ConstP.pooled12, test3_ConstP.HighTempChrgCurrentLim_tableDat, 90UL);\r\n\r\n  /* MinMax: '<S682>/MinMax2' */\r\n  if ((test3_B.Saturation1 <= test3_B.cumRevIndex) || rtIsNaNF\r\n      (test3_B.cumRevIndex)) {\r\n    test3_B.cumRevIndex = test3_B.Saturation1;\r\n  }\r\n\r\n  /* Product: '<S682>/Divide' incorporates:\r\n   *  Inport: '<Root>/Req_Power'\r\n   *  Outport: '<Root>/SumOfVoltages'\r\n   */\r\n  test3_B.Saturation1 = test3_U.Req_Power / test3_Y.SumOfVoltages;\r\n\r\n  /* MinMax: '<S682>/MinMax2' incorporates:\r\n   *  Inport: '<Root>/Req_Current'\r\n   */\r\n  if ((test3_B.cumRevIndex <= test3_B.Saturation1) || rtIsNaNF\r\n      (test3_B.Saturation1)) {\r\n    test3_B.Saturation1 = test3_B.cumRevIndex;\r\n  }\r\n\r\n  if ((!(test3_B.Saturation1 <= test3_U.Req_Current)) && (!rtIsNaNF\r\n       (test3_U.Req_Current))) {\r\n    test3_B.Saturation1 = test3_U.Req_Current;\r\n  }\r\n\r\n  /* Saturate: '<S99>/Saturation1' */\r\n  if (test3_B.Saturation1 > 180.0F) {\r\n    test3_B.Saturation1 = 180.0F;\r\n  } else if (test3_B.Saturation1 < 0.0F) {\r\n    test3_B.Saturation1 = 0.0F;\r\n  }\r\n\r\n  /* End of Saturate: '<S99>/Saturation1' */\r\n\r\n  /* MATLABSystem: '<S99>/Moving Average' */\r\n  if (test3_DW.obj.TunablePropsChanged) {\r\n    test3_DW.obj.TunablePropsChanged = false;\r\n  }\r\n\r\n  obj = test3_DW.obj.pStatistic;\r\n  if (obj->isInitialized != 1L) {\r\n    obj->isSetupComplete = false;\r\n    obj->isInitialized = 1L;\r\n    obj->pCumSum = 0.0F;\r\n    for (test3_B.i = 0; test3_B.i < 11; test3_B.i++) {\r\n      obj->pCumSumRev[test3_B.i] = 0.0F;\r\n    }\r\n\r\n    obj->pCumRevIndex = 1.0F;\r\n    obj->pModValueRev = 0.0F;\r\n    obj->isSetupComplete = true;\r\n    obj->pCumSum = 0.0F;\r\n    for (test3_B.i = 0; test3_B.i < 11; test3_B.i++) {\r\n      obj->pCumSumRev[test3_B.i] = 0.0F;\r\n    }\r\n\r\n    obj->pCumRevIndex = 1.0F;\r\n    obj->pModValueRev = 0.0F;\r\n  }\r\n\r\n  test3_B.cumRevIndex = obj->pCumRevIndex;\r\n  test3_B.csum = obj->pCumSum;\r\n  for (test3_B.i = 0; test3_B.i < 11; test3_B.i++) {\r\n    test3_B.csumrev[test3_B.i] = obj->pCumSumRev[test3_B.i];\r\n  }\r\n\r\n  test3_B.modValueRev = obj->pModValueRev;\r\n  test3_B.z = 0.0F;\r\n\r\n  /* Outport: '<Root>/ChargeCurrentLimit' incorporates:\r\n   *  MATLABSystem: '<S99>/Moving Average'\r\n   */\r\n  test3_Y.ChargeCurrentLimit = 0.0F;\r\n\r\n  /* MATLABSystem: '<S99>/Moving Average' */\r\n  test3_B.csum += test3_B.Saturation1;\r\n  if (test3_B.modValueRev == 0.0F) {\r\n    test3_B.z = test3_B.csumrev[(int16_T)test3_B.cumRevIndex - 1] + test3_B.csum;\r\n  }\r\n\r\n  test3_B.csumrev[(int16_T)test3_B.cumRevIndex - 1] = test3_B.Saturation1;\r\n  if (test3_B.cumRevIndex != 11.0F) {\r\n    test3_B.cumRevIndex++;\r\n  } else {\r\n    test3_B.cumRevIndex = 1.0F;\r\n    test3_B.csum = 0.0F;\r\n    for (test3_B.i = 9; test3_B.i >= 0; test3_B.i--) {\r\n      test3_B.csumrev[test3_B.i] += test3_B.csumrev[test3_B.i + 1];\r\n    }\r\n  }\r\n\r\n  if (test3_B.modValueRev == 0.0F) {\r\n    /* Outport: '<Root>/ChargeCurrentLimit' */\r\n    test3_Y.ChargeCurrentLimit = test3_B.z / 12.0F;\r\n  }\r\n\r\n  obj->pCumSum = test3_B.csum;\r\n  for (test3_B.i = 0; test3_B.i < 11; test3_B.i++) {\r\n    obj->pCumSumRev[test3_B.i] = test3_B.csumrev[test3_B.i];\r\n  }\r\n\r\n  obj->pCumRevIndex = test3_B.cumRevIndex;\r\n  if (test3_B.modValueRev > 0.0F) {\r\n    obj->pModValueRev = test3_B.modValueRev - 1.0F;\r\n  } else {\r\n    obj->pModValueRev = 0.0F;\r\n  }\r\n\r\n  /* Saturate: '<S99>/Saturation' incorporates:\r\n   *  Inport: '<Root>/SOC'\r\n   *  Lookup_n-D: '<S683>/Rdc1'\r\n   */\r\n  test3_Y.DischargeCurrentLimit = look1_iflf_pbinlcpw(test3_U.SOC,\r\n    test3_ConstP.Rdc1_bp01Data, test3_ConstP.Rdc1_tableData,\r\n    &test3_DW.m_bpIndex_g, 6UL);\r\n\r\n  /* Product: '<S683>/Divide' incorporates:\r\n   *  Constant: '<S683>/Constant1'\r\n   *  Outport: '<Root>/MinCellVolt'\r\n   *  Product: '<S683>/Divide1'\r\n   *  Sum: '<S683>/Subtract'\r\n   */\r\n  test3_B.cumRevIndex = (test3_Y.MinCellVolt - 2.5F) /\r\n    (test3_Y.DischargeCurrentLimit * test3_B.Max);\r\n\r\n  /* Lookup_n-D: '<S683>/LowTempDchrgCurrentLim' incorporates:\r\n   *  MinMax: '<Root>/Min1'\r\n   *  Outport: '<Root>/MinCellTemp'\r\n   */\r\n  test3_B.Saturation1 = look1_iflf_binlxpw(test3_Y.MinCellTemp,\r\n    test3_ConstP.pooled13, test3_ConstP.LowTempDchrgCurrentLim_tableD_j, 100UL);\r\n\r\n  /* MinMax: '<S683>/MinMax2' */\r\n  if ((test3_B.cumRevIndex <= test3_B.Saturation1) || rtIsNaNF\r\n      (test3_B.Saturation1)) {\r\n    test3_B.Saturation1 = test3_B.cumRevIndex;\r\n  }\r\n\r\n  /* Saturate: '<S99>/Saturation' incorporates:\r\n   *  Lookup_n-D: '<S683>/HighTempDchrgCurrentLim'\r\n   *  MinMax: '<Root>/Max1'\r\n   *  Outport: '<Root>/MaxCellTemp'\r\n   */\r\n  test3_Y.DischargeCurrentLimit = look1_iflf_binlxpw(test3_Y.MaxCellTemp,\r\n    test3_ConstP.pooled13, test3_ConstP.HighTempDchrgCurrentLim_tableDa, 100UL);\r\n\r\n  /* MinMax: '<S683>/MinMax2' */\r\n  if ((test3_B.Saturation1 <= test3_Y.DischargeCurrentLimit) || rtIsNaNF\r\n      (test3_Y.DischargeCurrentLimit)) {\r\n    /* Saturate: '<S99>/Saturation' */\r\n    test3_Y.DischargeCurrentLimit = test3_B.Saturation1;\r\n  }\r\n\r\n  /* Saturate: '<S99>/Saturation' */\r\n  if (test3_Y.DischargeCurrentLimit > 420.0F) {\r\n    /* Saturate: '<S99>/Saturation' */\r\n    test3_Y.DischargeCurrentLimit = 420.0F;\r\n  } else if (test3_Y.DischargeCurrentLimit < 0.0F) {\r\n    /* Saturate: '<S99>/Saturation' */\r\n    test3_Y.DischargeCurrentLimit = 0.0F;\r\n  }\r\n\r\n  /* End of Saturate: '<S99>/Saturation' */\r\n\r\n  /* RateLimiter: '<S99>/Rate Limiter1' incorporates:\r\n   *  Outport: '<Root>/DischargeCurrentLimit'\r\n   */\r\n  test3_B.Max = test3_Y.DischargeCurrentLimit - test3_DW.PrevY;\r\n  if (test3_B.Max > 0.7F) {\r\n    /* Saturate: '<S99>/Saturation' */\r\n    test3_Y.DischargeCurrentLimit = test3_DW.PrevY + 0.7F;\r\n  } else if (test3_B.Max < -3.0F) {\r\n    /* Saturate: '<S99>/Saturation' */\r\n    test3_Y.DischargeCurrentLimit = test3_DW.PrevY + -3.0F;\r\n  }\r\n\r\n  test3_DW.PrevY = test3_Y.DischargeCurrentLimit;\r\n\r\n  /* End of RateLimiter: '<S99>/Rate Limiter1' */\r\n  /* End of Outputs for SubSystem: '<Root>/Current_Limit' */\r\n\r\n  /* Saturate: '<Root>/Saturation' incorporates:\r\n   *  Inport: '<Root>/SOC'\r\n   */\r\n  if (test3_U.SOC > 100.0F) {\r\n    /* Outport: '<Root>/Fake_SOC' */\r\n    test3_Y.Fake_SOC = 100.0F;\r\n  } else if (test3_U.SOC < 0.0F) {\r\n    /* Outport: '<Root>/Fake_SOC' */\r\n    test3_Y.Fake_SOC = 0.0F;\r\n  } else {\r\n    /* Outport: '<Root>/Fake_SOC' */\r\n    test3_Y.Fake_SOC = test3_U.SOC;\r\n  }\r\n\r\n  /* End of Saturate: '<Root>/Saturation' */\r\n\r\n  /* Outputs for Atomic SubSystem: '<Root>/BMS_Function' */\r\n  /* SignalConversion generated from: '<S677>/ SFunction ' incorporates:\r\n   *  Chart: '<S97>/Chart'\r\n   *  DiscreteIntegrator: '<S106>/Integrator'\r\n   *  DiscreteIntegrator: '<S112>/Integrator'\r\n   *  DiscreteIntegrator: '<S118>/Integrator'\r\n   *  DiscreteIntegrator: '<S124>/Integrator'\r\n   *  DiscreteIntegrator: '<S130>/Integrator'\r\n   *  DiscreteIntegrator: '<S136>/Integrator'\r\n   *  DiscreteIntegrator: '<S142>/Integrator'\r\n   *  DiscreteIntegrator: '<S148>/Integrator'\r\n   *  DiscreteIntegrator: '<S154>/Integrator'\r\n   *  DiscreteIntegrator: '<S160>/Integrator'\r\n   *  DiscreteIntegrator: '<S166>/Integrator'\r\n   *  DiscreteIntegrator: '<S172>/Integrator'\r\n   *  DiscreteIntegrator: '<S178>/Integrator'\r\n   *  DiscreteIntegrator: '<S184>/Integrator'\r\n   *  DiscreteIntegrator: '<S190>/Integrator'\r\n   *  DiscreteIntegrator: '<S196>/Integrator'\r\n   *  DiscreteIntegrator: '<S202>/Integrator'\r\n   *  DiscreteIntegrator: '<S208>/Integrator'\r\n   *  DiscreteIntegrator: '<S214>/Integrator'\r\n   *  DiscreteIntegrator: '<S220>/Integrator'\r\n   *  DiscreteIntegrator: '<S226>/Integrator'\r\n   *  DiscreteIntegrator: '<S232>/Integrator'\r\n   *  DiscreteIntegrator: '<S238>/Integrator'\r\n   *  DiscreteIntegrator: '<S244>/Integrator'\r\n   *  DiscreteIntegrator: '<S250>/Integrator'\r\n   *  DiscreteIntegrator: '<S256>/Integrator'\r\n   *  DiscreteIntegrator: '<S262>/Integrator'\r\n   *  DiscreteIntegrator: '<S268>/Integrator'\r\n   *  DiscreteIntegrator: '<S274>/Integrator'\r\n   *  DiscreteIntegrator: '<S280>/Integrator'\r\n   *  DiscreteIntegrator: '<S286>/Integrator'\r\n   *  DiscreteIntegrator: '<S292>/Integrator'\r\n   *  DiscreteIntegrator: '<S298>/Integrator'\r\n   *  DiscreteIntegrator: '<S304>/Integrator'\r\n   *  DiscreteIntegrator: '<S310>/Integrator'\r\n   *  DiscreteIntegrator: '<S316>/Integrator'\r\n   *  DiscreteIntegrator: '<S322>/Integrator'\r\n   *  DiscreteIntegrator: '<S328>/Integrator'\r\n   *  DiscreteIntegrator: '<S334>/Integrator'\r\n   *  DiscreteIntegrator: '<S340>/Integrator'\r\n   *  DiscreteIntegrator: '<S346>/Integrator'\r\n   *  DiscreteIntegrator: '<S352>/Integrator'\r\n   *  DiscreteIntegrator: '<S358>/Integrator'\r\n   *  DiscreteIntegrator: '<S364>/Integrator'\r\n   *  DiscreteIntegrator: '<S370>/Integrator'\r\n   *  DiscreteIntegrator: '<S376>/Integrator'\r\n   *  DiscreteIntegrator: '<S382>/Integrator'\r\n   *  DiscreteIntegrator: '<S388>/Integrator'\r\n   *  DiscreteIntegrator: '<S394>/Integrator'\r\n   *  DiscreteIntegrator: '<S400>/Integrator'\r\n   *  DiscreteIntegrator: '<S406>/Integrator'\r\n   *  DiscreteIntegrator: '<S412>/Integrator'\r\n   *  DiscreteIntegrator: '<S418>/Integrator'\r\n   *  DiscreteIntegrator: '<S424>/Integrator'\r\n   *  DiscreteIntegrator: '<S430>/Integrator'\r\n   *  DiscreteIntegrator: '<S436>/Integrator'\r\n   *  DiscreteIntegrator: '<S442>/Integrator'\r\n   *  DiscreteIntegrator: '<S448>/Integrator'\r\n   *  DiscreteIntegrator: '<S454>/Integrator'\r\n   *  DiscreteIntegrator: '<S460>/Integrator'\r\n   *  DiscreteIntegrator: '<S466>/Integrator'\r\n   *  DiscreteIntegrator: '<S472>/Integrator'\r\n   *  DiscreteIntegrator: '<S478>/Integrator'\r\n   *  DiscreteIntegrator: '<S484>/Integrator'\r\n   *  DiscreteIntegrator: '<S490>/Integrator'\r\n   *  DiscreteIntegrator: '<S496>/Integrator'\r\n   *  DiscreteIntegrator: '<S502>/Integrator'\r\n   *  DiscreteIntegrator: '<S508>/Integrator'\r\n   *  DiscreteIntegrator: '<S514>/Integrator'\r\n   *  DiscreteIntegrator: '<S520>/Integrator'\r\n   *  DiscreteIntegrator: '<S526>/Integrator'\r\n   *  DiscreteIntegrator: '<S532>/Integrator'\r\n   *  DiscreteIntegrator: '<S538>/Integrator'\r\n   *  DiscreteIntegrator: '<S544>/Integrator'\r\n   *  DiscreteIntegrator: '<S550>/Integrator'\r\n   *  DiscreteIntegrator: '<S556>/Integrator'\r\n   *  DiscreteIntegrator: '<S562>/Integrator'\r\n   *  DiscreteIntegrator: '<S568>/Integrator'\r\n   *  DiscreteIntegrator: '<S574>/Integrator'\r\n   *  DiscreteIntegrator: '<S580>/Integrator'\r\n   *  DiscreteIntegrator: '<S586>/Integrator'\r\n   *  DiscreteIntegrator: '<S592>/Integrator'\r\n   *  DiscreteIntegrator: '<S598>/Integrator'\r\n   *  DiscreteIntegrator: '<S604>/Integrator'\r\n   *  DiscreteIntegrator: '<S610>/Integrator'\r\n   *  DiscreteIntegrator: '<S616>/Integrator'\r\n   *  DiscreteIntegrator: '<S622>/Integrator'\r\n   *  DiscreteIntegrator: '<S628>/Integrator'\r\n   *  DiscreteIntegrator: '<S634>/Integrator'\r\n   *  DiscreteIntegrator: '<S640>/Integrator'\r\n   *  DiscreteIntegrator: '<S646>/Integrator'\r\n   *  DiscreteIntegrator: '<S652>/Integrator'\r\n   *  DiscreteIntegrator: '<S658>/Integrator'\r\n   *  DiscreteIntegrator: '<S664>/Integrator'\r\n   *  DiscreteIntegrator: '<S670>/Integrator'\r\n   *  DiscreteIntegrator: '<S676>/Integrator'\r\n   */\r\n  test3_B.TmpSignalConversionAtSFunctionI[0] = test3_DW.Integrator_DSTATE;\r\n  test3_B.TmpSignalConversionAtSFunctionI[1] = test3_DW.Integrator_DSTATE_a;\r\n  test3_B.TmpSignalConversionAtSFunctionI[2] = test3_DW.Integrator_DSTATE_n;\r\n  test3_B.TmpSignalConversionAtSFunctionI[3] = test3_DW.Integrator_DSTATE_b;\r\n  test3_B.TmpSignalConversionAtSFunctionI[4] = test3_DW.Integrator_DSTATE_g;\r\n  test3_B.TmpSignalConversionAtSFunctionI[5] = test3_DW.Integrator_DSTATE_i;\r\n  test3_B.TmpSignalConversionAtSFunctionI[6] = test3_DW.Integrator_DSTATE_e;\r\n  test3_B.TmpSignalConversionAtSFunctionI[7] = test3_DW.Integrator_DSTATE_id;\r\n  test3_B.TmpSignalConversionAtSFunctionI[8] = test3_DW.Integrator_DSTATE_is;\r\n  test3_B.TmpSignalConversionAtSFunctionI[9] = test3_DW.Integrator_DSTATE_j;\r\n  test3_B.TmpSignalConversionAtSFunctionI[10] = test3_DW.Integrator_DSTATE_j1;\r\n  test3_B.TmpSignalConversionAtSFunctionI[11] = test3_DW.Integrator_DSTATE_jr;\r\n  test3_B.TmpSignalConversionAtSFunctionI[12] = test3_DW.Integrator_DSTATE_p;\r\n  test3_B.TmpSignalConversionAtSFunctionI[13] = test3_DW.Integrator_DSTATE_o;\r\n  test3_B.TmpSignalConversionAtSFunctionI[14] = test3_DW.Integrator_DSTATE_f;\r\n  test3_B.TmpSignalConversionAtSFunctionI[15] = test3_DW.Integrator_DSTATE_fo;\r\n  test3_B.TmpSignalConversionAtSFunctionI[16] = test3_DW.Integrator_DSTATE_i1;\r\n  test3_B.TmpSignalConversionAtSFunctionI[17] = test3_DW.Integrator_DSTATE_fj;\r\n  test3_B.TmpSignalConversionAtSFunctionI[18] = test3_DW.Integrator_DSTATE_d;\r\n  test3_B.TmpSignalConversionAtSFunctionI[19] = test3_DW.Integrator_DSTATE_g5;\r\n  test3_B.TmpSignalConversionAtSFunctionI[20] = test3_DW.Integrator_DSTATE_pf;\r\n  test3_B.TmpSignalConversionAtSFunctionI[21] = test3_DW.Integrator_DSTATE_c;\r\n  test3_B.TmpSignalConversionAtSFunctionI[22] = test3_DW.Integrator_DSTATE_m;\r\n  test3_B.TmpSignalConversionAtSFunctionI[23] = test3_DW.Integrator_DSTATE_j2;\r\n  test3_B.TmpSignalConversionAtSFunctionI[24] = test3_DW.Integrator_DSTATE_iz;\r\n  test3_B.TmpSignalConversionAtSFunctionI[25] = test3_DW.Integrator_DSTATE_bh;\r\n  test3_B.TmpSignalConversionAtSFunctionI[26] = test3_DW.Integrator_DSTATE_ji;\r\n  test3_B.TmpSignalConversionAtSFunctionI[27] = test3_DW.Integrator_DSTATE_od;\r\n  test3_B.TmpSignalConversionAtSFunctionI[28] = test3_DW.Integrator_DSTATE_oy;\r\n  test3_B.TmpSignalConversionAtSFunctionI[29] = test3_DW.Integrator_DSTATE_nc;\r\n  test3_B.TmpSignalConversionAtSFunctionI[30] = test3_DW.Integrator_DSTATE_c2;\r\n  test3_B.TmpSignalConversionAtSFunctionI[31] = test3_DW.Integrator_DSTATE_pa;\r\n  test3_B.TmpSignalConversionAtSFunctionI[32] = test3_DW.Integrator_DSTATE_ez;\r\n  test3_B.TmpSignalConversionAtSFunctionI[33] = test3_DW.Integrator_DSTATE_bp;\r\n  test3_B.TmpSignalConversionAtSFunctionI[34] = test3_DW.Integrator_DSTATE_h;\r\n  test3_B.TmpSignalConversionAtSFunctionI[35] = test3_DW.Integrator_DSTATE_i4;\r\n  test3_B.TmpSignalConversionAtSFunctionI[36] = test3_DW.Integrator_DSTATE_fp;\r\n  test3_B.TmpSignalConversionAtSFunctionI[37] = test3_DW.Integrator_DSTATE_hx;\r\n  test3_B.TmpSignalConversionAtSFunctionI[38] = test3_DW.Integrator_DSTATE_k;\r\n  test3_B.TmpSignalConversionAtSFunctionI[39] = test3_DW.Integrator_DSTATE_g3;\r\n  test3_B.TmpSignalConversionAtSFunctionI[40] = test3_DW.Integrator_DSTATE_h4;\r\n  test3_B.TmpSignalConversionAtSFunctionI[41] = test3_DW.Integrator_DSTATE_e5;\r\n  test3_B.TmpSignalConversionAtSFunctionI[42] = test3_DW.Integrator_DSTATE_oc;\r\n  test3_B.TmpSignalConversionAtSFunctionI[43] = test3_DW.Integrator_DSTATE_n5;\r\n  test3_B.TmpSignalConversionAtSFunctionI[44] = test3_DW.Integrator_DSTATE_do;\r\n  test3_B.TmpSignalConversionAtSFunctionI[45] = test3_DW.Integrator_DSTATE_ds;\r\n  test3_B.TmpSignalConversionAtSFunctionI[46] = test3_DW.Integrator_DSTATE_bv;\r\n  test3_B.TmpSignalConversionAtSFunctionI[47] = test3_DW.Integrator_DSTATE_o3;\r\n  test3_B.TmpSignalConversionAtSFunctionI[48] = test3_DW.Integrator_DSTATE_fg;\r\n  test3_B.TmpSignalConversionAtSFunctionI[49] = test3_DW.Integrator_DSTATE_a4;\r\n  test3_B.TmpSignalConversionAtSFunctionI[50] = test3_DW.Integrator_DSTATE_l;\r\n  test3_B.TmpSignalConversionAtSFunctionI[51] = test3_DW.Integrator_DSTATE_eo;\r\n  test3_B.TmpSignalConversionAtSFunctionI[52] = test3_DW.Integrator_DSTATE_cl;\r\n  test3_B.TmpSignalConversionAtSFunctionI[53] = test3_DW.Integrator_DSTATE_bs;\r\n  test3_B.TmpSignalConversionAtSFunctionI[54] = test3_DW.Integrator_DSTATE_e2;\r\n  test3_B.TmpSignalConversionAtSFunctionI[55] = test3_DW.Integrator_DSTATE_lr;\r\n  test3_B.TmpSignalConversionAtSFunctionI[56] = test3_DW.Integrator_DSTATE_gx;\r\n  test3_B.TmpSignalConversionAtSFunctionI[57] = test3_DW.Integrator_DSTATE_nu;\r\n  test3_B.TmpSignalConversionAtSFunctionI[58] = test3_DW.Integrator_DSTATE_az;\r\n  test3_B.TmpSignalConversionAtSFunctionI[59] = test3_DW.Integrator_DSTATE_kc;\r\n  test3_B.TmpSignalConversionAtSFunctionI[60] = test3_DW.Integrator_DSTATE_mc;\r\n  test3_B.TmpSignalConversionAtSFunctionI[61] = test3_DW.Integrator_DSTATE_nm;\r\n  test3_B.TmpSignalConversionAtSFunctionI[62] = test3_DW.Integrator_DSTATE_po;\r\n  test3_B.TmpSignalConversionAtSFunctionI[63] = test3_DW.Integrator_DSTATE_bt;\r\n  test3_B.TmpSignalConversionAtSFunctionI[64] = test3_DW.Integrator_DSTATE_jt;\r\n  test3_B.TmpSignalConversionAtSFunctionI[65] = test3_DW.Integrator_DSTATE_dc;\r\n  test3_B.TmpSignalConversionAtSFunctionI[66] = test3_DW.Integrator_DSTATE_pb;\r\n  test3_B.TmpSignalConversionAtSFunctionI[67] = test3_DW.Integrator_DSTATE_oe;\r\n  test3_B.TmpSignalConversionAtSFunctionI[68] = test3_DW.Integrator_DSTATE_al;\r\n  test3_B.TmpSignalConversionAtSFunctionI[69] = test3_DW.Integrator_DSTATE_cx;\r\n  test3_B.TmpSignalConversionAtSFunctionI[70] = test3_DW.Integrator_DSTATE_cr;\r\n  test3_B.TmpSignalConversionAtSFunctionI[71] = test3_DW.Integrator_DSTATE_p3;\r\n  test3_B.TmpSignalConversionAtSFunctionI[72] = test3_DW.Integrator_DSTATE_kv;\r\n  test3_B.TmpSignalConversionAtSFunctionI[73] = test3_DW.Integrator_DSTATE_ed;\r\n  test3_B.TmpSignalConversionAtSFunctionI[74] = test3_DW.Integrator_DSTATE_fu;\r\n  test3_B.TmpSignalConversionAtSFunctionI[75] = test3_DW.Integrator_DSTATE_he;\r\n  test3_B.TmpSignalConversionAtSFunctionI[76] = test3_DW.Integrator_DSTATE_ot;\r\n  test3_B.TmpSignalConversionAtSFunctionI[77] = test3_DW.Integrator_DSTATE_my;\r\n  test3_B.TmpSignalConversionAtSFunctionI[78] = test3_DW.Integrator_DSTATE_lt;\r\n  test3_B.TmpSignalConversionAtSFunctionI[79] = test3_DW.Integrator_DSTATE_pd;\r\n  test3_B.TmpSignalConversionAtSFunctionI[80] = test3_DW.Integrator_DSTATE_en;\r\n  test3_B.TmpSignalConversionAtSFunctionI[81] = test3_DW.Integrator_DSTATE_ix;\r\n  test3_B.TmpSignalConversionAtSFunctionI[82] = test3_DW.Integrator_DSTATE_hg;\r\n  test3_B.TmpSignalConversionAtSFunctionI[83] = test3_DW.Integrator_DSTATE_fm;\r\n  test3_B.TmpSignalConversionAtSFunctionI[84] = test3_DW.Integrator_DSTATE_ok;\r\n  test3_B.TmpSignalConversionAtSFunctionI[85] = test3_DW.Integrator_DSTATE_ns;\r\n  test3_B.TmpSignalConversionAtSFunctionI[86] = test3_DW.Integrator_DSTATE_ga;\r\n  test3_B.TmpSignalConversionAtSFunctionI[87] = test3_DW.Integrator_DSTATE_dsn;\r\n  test3_B.TmpSignalConversionAtSFunctionI[88] = test3_DW.Integrator_DSTATE_pc;\r\n  test3_B.TmpSignalConversionAtSFunctionI[89] = test3_DW.Integrator_DSTATE_eg;\r\n  test3_B.TmpSignalConversionAtSFunctionI[90] = test3_DW.Integrator_DSTATE_jx;\r\n  test3_B.TmpSignalConversionAtSFunctionI[91] = test3_DW.Integrator_DSTATE_im;\r\n  test3_B.TmpSignalConversionAtSFunctionI[92] = test3_DW.Integrator_DSTATE_hp;\r\n  test3_B.TmpSignalConversionAtSFunctionI[93] = test3_DW.Integrator_DSTATE_aq;\r\n  test3_B.TmpSignalConversionAtSFunctionI[94] = test3_DW.Integrator_DSTATE_lx;\r\n  test3_B.TmpSignalConversionAtSFunctionI[95] = test3_DW.Integrator_DSTATE_l5;\r\n\r\n  /* SignalConversion generated from: '<S677>/ SFunction ' incorporates:\r\n   *  Chart: '<S97>/Chart'\r\n   */\r\n  test3_B.TmpSignalConversionAtSFunctio_g[0] =\r\n    test3_B.MovingAverage.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[1] =\r\n    test3_B.MovingAverage1.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[2] =\r\n    test3_B.MovingAverage2.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[3] =\r\n    test3_B.MovingAverage3.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[4] =\r\n    test3_B.MovingAverage4.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[5] =\r\n    test3_B.MovingAverage5.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[6] =\r\n    test3_B.MovingAverage6.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[7] =\r\n    test3_B.MovingAverage7.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[8] =\r\n    test3_B.MovingAverage8.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[9] =\r\n    test3_B.MovingAverage9.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[10] =\r\n    test3_B.MovingAverage10.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[11] =\r\n    test3_B.MovingAverage11.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[12] =\r\n    test3_B.MovingAverage12.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[13] =\r\n    test3_B.MovingAverage13.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[14] =\r\n    test3_B.MovingAverage14.ChargeCurrentLimit;\r\n  test3_B.TmpSignalConversionAtSFunctio_g[15] =\r\n    test3_B.MovingAverage15.ChargeCurrentLimit;\r\n\r\n  /* Chart: '<S97>/Chart' incorporates:\r\n   *  Inport: '<Root>/BMBFault'\r\n   *  Inport: '<Root>/Pack_Current'\r\n   *  Inport: '<Root>/SOC'\r\n   *  Outport: '<Root>/ChargeCurrentLimit'\r\n   *  Outport: '<Root>/DischargeCurrentLimit'\r\n   *  Outport: '<Root>/MaxCellTemp'\r\n   *  Outport: '<Root>/MaxCellVolt'\r\n   *  Outport: '<Root>/MinCellTemp'\r\n   *  Outport: '<Root>/MinCellVolt'\r\n   */\r\n  if (test3_DW.temporalCounter_i1_h < 131071UL) {\r\n    test3_DW.temporalCounter_i1_h++;\r\n  }\r\n\r\n  if (test3_DW.temporalCounter_i2 < MAX_uint32_T) {\r\n    test3_DW.temporalCounter_i2++;\r\n  }\r\n\r\n  if (test3_DW.temporalCounter_i3 < MAX_uint32_T) {\r\n    test3_DW.temporalCounter_i3++;\r\n  }\r\n\r\n  if (test3_DW.temporalCounter_i4 < 4194303UL) {\r\n    test3_DW.temporalCounter_i4++;\r\n  }\r\n\r\n  if (test3_DW.temporalCounter_i5 < MAX_uint32_T) {\r\n    test3_DW.temporalCounter_i5++;\r\n  }\r\n\r\n  if (test3_DW.is_active_c2_test3 == 0U) {\r\n    test3_DW.is_active_c2_test3 = 1U;\r\n    test3_enter_internal_Main();\r\n  } else {\r\n    test3_Main(test3_B.TmpSignalConversionAtSFunctio_g,\r\n               test3_B.TmpSignalConversionAtSFunctionI);\r\n  }\r\n\r\n  if (test3_U.Pack_Current >= 2.0F) {\r\n    test3_DW.durationCounter_1++;\r\n  } else {\r\n    test3_DW.durationCounter_1 = 0L;\r\n  }\r\n\r\n  if (test3_U.BMBFault == 1.0F) {\r\n    test3_DW.durationCounter_1_p++;\r\n  } else {\r\n    test3_DW.durationCounter_1_p = 0L;\r\n  }\r\n\r\n  if (test3_U.SOC <= 0.0F) {\r\n    test3_DW.durationCounter_2++;\r\n  } else {\r\n    test3_DW.durationCounter_2 = 0L;\r\n  }\r\n\r\n  test3_B.Max = test3_U.Pack_Current / test3_Y.DischargeCurrentLimit;\r\n  if (test3_B.Max > 1.1) {\r\n    test3_DW.durationCounter_1_k++;\r\n  } else {\r\n    test3_DW.durationCounter_1_k = 0L;\r\n  }\r\n\r\n  if (test3_B.Max > 1.5F) {\r\n    test3_DW.durationCounter_2_a++;\r\n  } else {\r\n    test3_DW.durationCounter_2_a = 0L;\r\n  }\r\n\r\n  if (test3_B.Max > 2.0F) {\r\n    test3_DW.durationCounter_3++;\r\n  } else {\r\n    test3_DW.durationCounter_3 = 0L;\r\n  }\r\n\r\n  if (test3_B.Max > 3.0F) {\r\n    test3_DW.durationCounter_4++;\r\n  } else {\r\n    test3_DW.durationCounter_4 = 0L;\r\n  }\r\n\r\n  test3_B.Max = -(test3_U.Pack_Current / test3_Y.ChargeCurrentLimit);\r\n  if (test3_B.Max > 1.1) {\r\n    test3_DW.durationCounter_5++;\r\n  } else {\r\n    test3_DW.durationCounter_5 = 0L;\r\n  }\r\n\r\n  if (test3_B.Max > 1.5F) {\r\n    test3_DW.durationCounter_6++;\r\n  } else {\r\n    test3_DW.durationCounter_6 = 0L;\r\n  }\r\n\r\n  if (test3_B.Max > 2.0F) {\r\n    test3_DW.durationCounter_7++;\r\n  } else {\r\n    test3_DW.durationCounter_7 = 0L;\r\n  }\r\n\r\n  if (test3_B.Max > 3.0F) {\r\n    test3_DW.durationCounter_8++;\r\n  } else {\r\n    test3_DW.durationCounter_8 = 0L;\r\n  }\r\n\r\n  if (test3_Y.MaxCellVolt >= 4.37F) {\r\n    test3_DW.durationCounter_1_c++;\r\n  } else {\r\n    test3_DW.durationCounter_1_c = 0L;\r\n  }\r\n\r\n  if (test3_Y.MinCellVolt <= 2.5F) {\r\n    test3_DW.durationCounter_2_aa++;\r\n  } else {\r\n    test3_DW.durationCounter_2_aa = 0L;\r\n  }\r\n\r\n  if (test3_Y.MaxCellTemp >= 328.15F) {\r\n    test3_DW.durationCounter_1_p1++;\r\n  } else {\r\n    test3_DW.durationCounter_1_p1 = 0L;\r\n  }\r\n\r\n  if (test3_Y.MinCellTemp <= 253.15F) {\r\n    test3_DW.durationCounter_2_h++;\r\n  } else {\r\n    test3_DW.durationCounter_2_h = 0L;\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<Root>/BMS_Function' */\r\n\r\n  /* Saturate: '<Root>/Saturation1' */\r\n  if (test3_B.ChargeCurrentReq > 180.0F) {\r\n    /* Outport: '<Root>/ChargeCurrentReq' */\r\n    test3_Y.ChargeCurrentReq = 180.0F;\r\n  } else if (test3_B.ChargeCurrentReq < 0.0F) {\r\n    /* Outport: '<Root>/ChargeCurrentReq' */\r\n    test3_Y.ChargeCurrentReq = 0.0F;\r\n  } else {\r\n    /* Outport: '<Root>/ChargeCurrentReq' */\r\n    test3_Y.ChargeCurrentReq = test3_B.ChargeCurrentReq;\r\n  }\r\n\r\n  /* End of Saturate: '<Root>/Saturation1' */\r\n\r\n  /* Outport: '<Root>/PreChargeRelay' incorporates:\r\n   *  Logic: '<Root>/PreChargeRelay0'\r\n   */\r\n  test3_Y.PreChargeRelay = (test3_B.PreChargeRelayInvtrCmd ||\r\n    test3_B.PreChargeRelayChgrCmd);\r\n\r\n  /* Logic: '<Root>/PosContactor0' */\r\n  test3_Y.PosContactor = (test3_B.PosContactorInvtrCmd ||\r\n    test3_B.PosContactorChgrCmd);\r\n\r\n  /* Logic: '<Root>/NegContactor0' */\r\n  test3_Y.NegContactor = (test3_B.NegContactorInvtrCmd ||\r\n    test3_B.NegContactorChgrCmd);\r\n\r\n  /* Outport: '<Root>/Contactor_State' incorporates:\r\n   *  Logic: '<Root>/AND'\r\n   */\r\n  test3_Y.Contactor_State = (test3_Y.PosContactor && test3_Y.NegContactor);\r\n\r\n  /* Outputs for Atomic SubSystem: '<Root>/RCTcc' */\r\n  /* Constant: '<Root>/Ah' incorporates:\r\n   *  Constant: '<Root>/Max_Mileage'\r\n   *  Inport: '<Root>/Pack_Current'\r\n   *  Inport: '<Root>/ReqSOC'\r\n   *  Outport: '<Root>/Add_Mileage_Range'\r\n   *  Outport: '<Root>/Fake_SOC'\r\n   *  Outport: '<Root>/RCT'\r\n   *  Outport: '<Root>/RD'\r\n   *  Outport: '<Root>/RDT'\r\n   *  RateTransition: '<Root>/RT4'\r\n   */\r\n  test3_RCTcc(130U, test3_U.Pack_Current, test3_U.ReqSOC, test3_Y.Fake_SOC,\r\n              test3_Y.Fake_SOC, 330.0F, &test3_Y.RCT, &test3_Y.RD, &test3_Y.RDT,\r\n              &test3_Y.Add_Mileage_Range, &test3_B.Max, &test3_B.Saturation1,\r\n              &test3_B.RCTcc, &test3_DW.RCTcc);\r\n\r\n  /* End of Outputs for SubSystem: '<Root>/RCTcc' */\r\n\r\n  /* Outputs for Atomic SubSystem: '<Root>/CAN_VCU_Fault' */\r\n  /* Chart: '<S98>/Chart1' incorporates:\r\n   *  Inport: '<Root>/CAN_VCU_Flag'\r\n   *  Inport: '<Root>/CAN_VCU_cnt_rst'\r\n   *  Outport: '<Root>/CAN_VCU_Fault_MSG_Dynmc_Abst_Cnt'\r\n   */\r\n  if (test3_DW.temporalCounter_i1 < MAX_uint32_T) {\r\n    test3_DW.temporalCounter_i1++;\r\n  }\r\n\r\n  if (test3_DW.is_active_c5_test3 == 0U) {\r\n    test3_DW.is_active_c5_test3 = 1U;\r\n    test3_DW.is_reseting_Counter = test3_IN_step1;\r\n    test3_DW.is_main_Task = test3_IN_MSG_Present;\r\n    test3_DW.temporalCounter_i1 = 0UL;\r\n    test3_B.i = 0;\r\n  } else {\r\n    if (test3_DW.is_reseting_Counter == 1U) {\r\n      if (test3_U.CAN_VCU_cnt_rst == 1U) {\r\n        test3_DW.is_reseting_Counter = test3_IN_step2;\r\n\r\n        /* Outport: '<Root>/CAN_VCU_Fault_MSG_Dynmc_Abst_Cnt' */\r\n        test3_Y.CAN_VCU_Fault_MSG_Dynmc_Abst_Cn = 0UL;\r\n      }\r\n\r\n      /* case IN_step2: */\r\n    } else if (test3_U.CAN_VCU_cnt_rst == 0U) {\r\n      test3_DW.is_reseting_Counter = test3_IN_step1;\r\n    }\r\n\r\n    if (test3_DW.is_main_Task == 1U) {\r\n      if (test3_U.CAN_VCU_Flag == 1U) {\r\n        test3_DW.is_main_Task = test3_IN_MSG_Present;\r\n        test3_DW.temporalCounter_i1 = 0UL;\r\n        test3_B.i = 0;\r\n      } else if (test3_DW.temporalCounter_i1 >= 2UL) {\r\n        test3_DW.temporalCounter_i1 = 0UL;\r\n        test3_B.i = 1;\r\n        test3_B.qY = test3_Y.CAN_VCU_Fault_MSG_Dynmc_Abst_Cn + /*MW:OvSatOk*/\r\n          1UL;\r\n        if (test3_Y.CAN_VCU_Fault_MSG_Dynmc_Abst_Cn + 1UL <\r\n            test3_Y.CAN_VCU_Fault_MSG_Dynmc_Abst_Cn) {\r\n          test3_B.qY = MAX_uint32_T;\r\n        }\r\n\r\n        /* Outport: '<Root>/CAN_VCU_Fault_MSG_Dynmc_Abst_Cnt' */\r\n        test3_Y.CAN_VCU_Fault_MSG_Dynmc_Abst_Cn = test3_B.qY;\r\n      } else {\r\n        test3_B.i = 1;\r\n      }\r\n\r\n      /* case IN_MSG_Present: */\r\n    } else if (test3_U.CAN_VCU_Flag == 1U) {\r\n      test3_DW.is_main_Task = test3_IN_MSG_Present;\r\n      test3_DW.temporalCounter_i1 = 0UL;\r\n      test3_B.i = 0;\r\n    } else if (test3_DW.temporalCounter_i1 >= 3UL) {\r\n      test3_DW.is_main_Task = test3_IN_MSG_Absent;\r\n      test3_DW.temporalCounter_i1 = 0UL;\r\n      test3_B.i = 1;\r\n      test3_B.qY = test3_Y.CAN_VCU_Fault_MSG_Dynmc_Abst_Cn + /*MW:OvSatOk*/ 1UL;\r\n      if (test3_Y.CAN_VCU_Fault_MSG_Dynmc_Abst_Cn + 1UL <\r\n          test3_Y.CAN_VCU_Fault_MSG_Dynmc_Abst_Cn) {\r\n        test3_B.qY = MAX_uint32_T;\r\n      }\r\n\r\n      /* Outport: '<Root>/CAN_VCU_Fault_MSG_Dynmc_Abst_Cnt' */\r\n      test3_Y.CAN_VCU_Fault_MSG_Dynmc_Abst_Cn = test3_B.qY;\r\n    } else {\r\n      test3_B.i = 0;\r\n    }\r\n  }\r\n\r\n  /* End of Chart: '<S98>/Chart1' */\r\n\r\n  /* Chart: '<S98>/Chart' */\r\n  if (test3_DW.temporalCounter_i1_j < 63U) {\r\n    test3_DW.temporalCounter_i1_j = (uint16_T)((int16_T)\r\n      test3_DW.temporalCounter_i1_j + 1);\r\n  }\r\n\r\n  if (test3_DW.is_active_c4_test3 == 0U) {\r\n    test3_DW.is_active_c4_test3 = 1U;\r\n    test3_DW.is_c4_test3 = test3_IN_Static_present;\r\n\r\n    /* Outport: '<Root>/CAN_VCU_Fault_Static_Absent' */\r\n    test3_Y.CAN_VCU_Fault_Static_Absent = 0U;\r\n    test3_DW.is_Static_present = test3_IN_STEP1;\r\n  } else if (test3_DW.is_c4_test3 == 1U) {\r\n    /* Outport: '<Root>/CAN_VCU_Fault_Static_Absent' */\r\n    test3_Y.CAN_VCU_Fault_Static_Absent = 1U;\r\n    if (test3_DW.is_Static_Absent == 1U) {\r\n      if ((uint16_T)test3_B.i == 0U) {\r\n        test3_DW.is_Static_Absent = test3_IN_pre_present;\r\n        test3_DW.temporalCounter_i1_j = 0U;\r\n      }\r\n\r\n      /* case IN_pre_present: */\r\n    } else if ((uint16_T)test3_B.i == 1U) {\r\n      test3_DW.is_Static_Absent = test3_IN_STEP1;\r\n    } else if (test3_DW.temporalCounter_i1_j >= 40U) {\r\n      test3_DW.is_Static_Absent = test3_IN_NO_ACTIVE_CHILD_k;\r\n      test3_DW.is_c4_test3 = test3_IN_Static_present;\r\n\r\n      /* Outport: '<Root>/CAN_VCU_Fault_Static_Absent' */\r\n      test3_Y.CAN_VCU_Fault_Static_Absent = 0U;\r\n      test3_DW.is_Static_present = test3_IN_STEP1;\r\n    }\r\n  } else {\r\n    /* Outport: '<Root>/CAN_VCU_Fault_Static_Absent' */\r\n    /* case IN_Static_present: */\r\n    test3_Y.CAN_VCU_Fault_Static_Absent = 0U;\r\n    if (test3_DW.is_Static_present == 1U) {\r\n      if ((uint16_T)test3_B.i == 1U) {\r\n        test3_DW.is_Static_present = test3_IN_pre_Absent;\r\n        test3_DW.temporalCounter_i1_j = 0U;\r\n      }\r\n\r\n      /* case IN_pre_Absent: */\r\n    } else if ((uint16_T)test3_B.i == 0U) {\r\n      test3_DW.is_Static_present = test3_IN_STEP1;\r\n    } else if (test3_DW.temporalCounter_i1_j >= 40U) {\r\n      test3_DW.is_Static_present = test3_IN_NO_ACTIVE_CHILD_k;\r\n      test3_DW.is_c4_test3 = test3_IN_Static_Absent;\r\n\r\n      /* Outport: '<Root>/CAN_VCU_Fault_Static_Absent' */\r\n      test3_Y.CAN_VCU_Fault_Static_Absent = 1U;\r\n      test3_DW.is_Static_Absent = test3_IN_STEP1;\r\n    }\r\n  }\r\n\r\n  /* End of Chart: '<S98>/Chart' */\r\n  /* End of Outputs for SubSystem: '<Root>/CAN_VCU_Fault' */\r\n\r\n  /* Outport: '<Root>/CAN_VCU_Fault_MSG_Dynmc_Abst' */\r\n  test3_Y.CAN_VCU_Fault_MSG_Dynmc_Abst = (uint16_T)test3_B.i;\r\n\r\n  /* Outport: '<Root>/DC_Link_Volt' incorporates:\r\n   *  Inport: '<Root>/Pack_Voltage'\r\n   */\r\n  test3_Y.DC_Link_Volt = test3_U.Pack_Voltage;\r\n\r\n  /* Outport: '<Root>/PackCurrent' incorporates:\r\n   *  Inport: '<Root>/Pack_Current'\r\n   */\r\n  test3_Y.PackCurrent = test3_U.Pack_Current;\r\n\r\n  /* Update for DiscreteIntegrator: '<S106>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING = 0U;\r\n\r\n  /* MinMax: '<S101>/Max' */\r\n  if (test3_B.Probe[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S106>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S101>/Max'\r\n   *  Product: '<S1>/1//T'\r\n   *  Sum: '<S1>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[0] - test3_DW.Integrator_DSTATE) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState = (int16_T)test3_B.Compare;\r\n\r\n  /* Update for DiscreteIntegrator: '<S172>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_p = 0U;\r\n\r\n  /* MinMax: '<S167>/Max' */\r\n  if (test3_B.Probe_l[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_l[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S172>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S167>/Max'\r\n   *  Product: '<S12>/1//T'\r\n   *  Sum: '<S12>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_a += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[1] - test3_DW.Integrator_DSTATE_a) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_a >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_a = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_a <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_a = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_p = (int16_T)test3_B.Compare_p;\r\n\r\n  /* Update for DiscreteIntegrator: '<S238>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_g = 0U;\r\n\r\n  /* MinMax: '<S233>/Max' */\r\n  if (test3_B.Probe_i[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_i[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S238>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S233>/Max'\r\n   *  Product: '<S23>/1//T'\r\n   *  Sum: '<S23>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_n += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[2] - test3_DW.Integrator_DSTATE_n) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_n >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_n = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_n <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_n = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_o = (int16_T)test3_B.Compare_h;\r\n\r\n  /* Update for DiscreteIntegrator: '<S304>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_j = 0U;\r\n\r\n  /* MinMax: '<S299>/Max' */\r\n  if (test3_B.Probe_o[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_o[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S304>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S299>/Max'\r\n   *  Product: '<S34>/1//T'\r\n   *  Sum: '<S34>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_b += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[3] - test3_DW.Integrator_DSTATE_b) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_b >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_b = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_b <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_b = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_e = (int16_T)test3_B.Compare_o;\r\n\r\n  /* Update for DiscreteIntegrator: '<S370>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_h = 0U;\r\n\r\n  /* MinMax: '<S365>/Max' */\r\n  if (test3_B.Probe_ii[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_ii[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S370>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S365>/Max'\r\n   *  Product: '<S45>/1//T'\r\n   *  Sum: '<S45>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_g += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[4] - test3_DW.Integrator_DSTATE_g) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_g >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_g = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_g <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_g = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_oy = (int16_T)test3_B.Compare_k;\r\n\r\n  /* Update for DiscreteIntegrator: '<S436>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_k = 0U;\r\n\r\n  /* MinMax: '<S431>/Max' */\r\n  if (test3_B.Probe_e[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_e[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S436>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S431>/Max'\r\n   *  Product: '<S56>/1//T'\r\n   *  Sum: '<S56>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_i += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[5] - test3_DW.Integrator_DSTATE_i) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_i >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_i = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_i <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_i = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_c = (int16_T)test3_B.Compare_i;\r\n\r\n  /* Update for DiscreteIntegrator: '<S502>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_o = 0U;\r\n\r\n  /* MinMax: '<S497>/Max' */\r\n  if (test3_B.Probe_n[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_n[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S502>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S497>/Max'\r\n   *  Product: '<S67>/1//T'\r\n   *  Sum: '<S67>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_e += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[6] - test3_DW.Integrator_DSTATE_e) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_e >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_e = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_e <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_e = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_a = (int16_T)test3_B.Compare_e;\r\n\r\n  /* Update for DiscreteIntegrator: '<S568>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_g2 = 0U;\r\n\r\n  /* MinMax: '<S563>/Max' */\r\n  if (test3_B.Probe_ng[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_ng[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S568>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S563>/Max'\r\n   *  Product: '<S78>/1//T'\r\n   *  Sum: '<S78>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_id += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[7] - test3_DW.Integrator_DSTATE_id) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_id >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_id = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_id <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_id = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_ch = (int16_T)test3_B.Compare_k5;\r\n\r\n  /* Update for DiscreteIntegrator: '<S634>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_d = 0U;\r\n\r\n  /* MinMax: '<S629>/Max' */\r\n  if (test3_B.Probe_no[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_no[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S634>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S629>/Max'\r\n   *  Product: '<S89>/1//T'\r\n   *  Sum: '<S89>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_is += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[8] - test3_DW.Integrator_DSTATE_is) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_is >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_is = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_is <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_is = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_h = (int16_T)test3_B.Compare_l;\r\n\r\n  /* Update for DiscreteIntegrator: '<S112>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_pv = 0U;\r\n\r\n  /* MinMax: '<S107>/Max' */\r\n  if (test3_B.Probe_b[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_b[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S112>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S107>/Max'\r\n   *  Product: '<S2>/1//T'\r\n   *  Sum: '<S2>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_j += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[9] - test3_DW.Integrator_DSTATE_j) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_j >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_j = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_j <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_j = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_i = (int16_T)test3_B.Compare_iz;\r\n\r\n  /* Update for DiscreteIntegrator: '<S118>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_m = 0U;\r\n\r\n  /* MinMax: '<S113>/Max' */\r\n  if (test3_B.Probe_j[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_j[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S118>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S113>/Max'\r\n   *  Product: '<S3>/1//T'\r\n   *  Sum: '<S3>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_j1 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[10] - test3_DW.Integrator_DSTATE_j1) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_j1 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_j1 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_j1 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_j1 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_iy = (int16_T)test3_B.Compare_d;\r\n\r\n  /* Update for DiscreteIntegrator: '<S124>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_hr = 0U;\r\n\r\n  /* MinMax: '<S119>/Max' */\r\n  if (test3_B.Probe_os[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_os[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S124>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S119>/Max'\r\n   *  Product: '<S4>/1//T'\r\n   *  Sum: '<S4>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_jr += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[11] - test3_DW.Integrator_DSTATE_jr) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_jr >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_jr = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_jr <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_jr = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_g = (int16_T)test3_B.Compare_a;\r\n\r\n  /* Update for DiscreteIntegrator: '<S130>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_i = 0U;\r\n\r\n  /* MinMax: '<S125>/Max' */\r\n  if (test3_B.Probe_m[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_m[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S130>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S125>/Max'\r\n   *  Product: '<S5>/1//T'\r\n   *  Sum: '<S5>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_p += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[12] - test3_DW.Integrator_DSTATE_p) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_p >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_p = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_p <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_p = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_f = (int16_T)test3_B.Compare_p3;\r\n\r\n  /* Update for DiscreteIntegrator: '<S136>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_e = 0U;\r\n\r\n  /* MinMax: '<S131>/Max' */\r\n  if (test3_B.Probe_c[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_c[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S136>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S131>/Max'\r\n   *  Product: '<S6>/1//T'\r\n   *  Sum: '<S6>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_o += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[13] - test3_DW.Integrator_DSTATE_o) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_o >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_o = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_o <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_o = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_fi = (int16_T)test3_B.Compare_o1;\r\n\r\n  /* Update for DiscreteIntegrator: '<S142>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_df = 0U;\r\n\r\n  /* MinMax: '<S137>/Max' */\r\n  if (test3_B.Probe_lt[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_lt[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S142>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S137>/Max'\r\n   *  Product: '<S7>/1//T'\r\n   *  Sum: '<S7>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_f += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[14] - test3_DW.Integrator_DSTATE_f) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_f >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_f = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_f <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_f = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_fm = (int16_T)test3_B.Compare_ob;\r\n\r\n  /* Update for DiscreteIntegrator: '<S148>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_ip = 0U;\r\n\r\n  /* MinMax: '<S143>/Max' */\r\n  if (test3_B.Probe_ik[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_ik[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S148>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S143>/Max'\r\n   *  Product: '<S8>/1//T'\r\n   *  Sum: '<S8>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_fo += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[15] - test3_DW.Integrator_DSTATE_fo) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_fo >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_fo = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_fo <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_fo = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_gh = (int16_T)test3_B.Compare_n;\r\n\r\n  /* Update for DiscreteIntegrator: '<S154>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_a = 0U;\r\n\r\n  /* MinMax: '<S149>/Max' */\r\n  if (test3_B.Probe_ct[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_ct[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S154>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S149>/Max'\r\n   *  Product: '<S9>/1//T'\r\n   *  Sum: '<S9>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_i1 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[16] - test3_DW.Integrator_DSTATE_i1) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_i1 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_i1 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_i1 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_i1 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_b = (int16_T)test3_B.Compare_ii;\r\n\r\n  /* Update for DiscreteIntegrator: '<S160>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_ic = 0U;\r\n\r\n  /* MinMax: '<S155>/Max' */\r\n  if (test3_B.Probe_f[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_f[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S160>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S155>/Max'\r\n   *  Product: '<S10>/1//T'\r\n   *  Sum: '<S10>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_fj += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[17] - test3_DW.Integrator_DSTATE_fj) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_fj >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_fj = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_fj <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_fj = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_bl = (int16_T)test3_B.Compare_b;\r\n\r\n  /* Update for DiscreteIntegrator: '<S166>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_ab = 0U;\r\n\r\n  /* MinMax: '<S161>/Max' */\r\n  if (test3_B.Probe_fp[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_fp[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S166>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S161>/Max'\r\n   *  Product: '<S11>/1//T'\r\n   *  Sum: '<S11>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_d += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[18] - test3_DW.Integrator_DSTATE_d) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_d >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_d = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_d <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_d = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_fie = (int16_T)test3_B.Compare_f;\r\n\r\n  /* Update for DiscreteIntegrator: '<S178>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_oe = 0U;\r\n\r\n  /* MinMax: '<S173>/Max' */\r\n  if (test3_B.Probe_g[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_g[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S178>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S173>/Max'\r\n   *  Product: '<S13>/1//T'\r\n   *  Sum: '<S13>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_g5 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[19] - test3_DW.Integrator_DSTATE_g5) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_g5 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_g5 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_g5 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_g5 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_d = (int16_T)test3_B.Compare_km;\r\n\r\n  /* Update for DiscreteIntegrator: '<S184>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_op = 0U;\r\n\r\n  /* MinMax: '<S179>/Max' */\r\n  if (test3_B.Probe_h[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_h[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S184>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S179>/Max'\r\n   *  Product: '<S14>/1//T'\r\n   *  Sum: '<S14>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_pf += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[20] - test3_DW.Integrator_DSTATE_pf) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_pf >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_pf = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_pf <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_pf = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_k = (int16_T)test3_B.Compare_in;\r\n\r\n  /* Update for DiscreteIntegrator: '<S190>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_hg = 0U;\r\n\r\n  /* MinMax: '<S185>/Max' */\r\n  if (test3_B.Probe_o4[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_o4[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S190>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S185>/Max'\r\n   *  Product: '<S15>/1//T'\r\n   *  Sum: '<S15>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_c += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[21] - test3_DW.Integrator_DSTATE_c) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_c >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_c = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_c <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_c = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_n = (int16_T)test3_B.Compare_lv;\r\n\r\n  /* Update for DiscreteIntegrator: '<S196>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_l = 0U;\r\n\r\n  /* MinMax: '<S191>/Max' */\r\n  if (test3_B.Probe_fc[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_fc[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S196>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S191>/Max'\r\n   *  Product: '<S16>/1//T'\r\n   *  Sum: '<S16>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_m += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[22] - test3_DW.Integrator_DSTATE_m) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_m >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_m = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_m <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_m = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_fz = (int16_T)test3_B.Compare_ed;\r\n\r\n  /* Update for DiscreteIntegrator: '<S202>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_iw = 0U;\r\n\r\n  /* MinMax: '<S197>/Max' */\r\n  if (test3_B.Probe_f1[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_f1[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S202>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S197>/Max'\r\n   *  Product: '<S17>/1//T'\r\n   *  Sum: '<S17>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_j2 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[23] - test3_DW.Integrator_DSTATE_j2) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_j2 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_j2 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_j2 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_j2 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_m = (int16_T)test3_B.Compare_el;\r\n\r\n  /* Update for DiscreteIntegrator: '<S208>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_ky = 0U;\r\n\r\n  /* MinMax: '<S203>/Max' */\r\n  if (test3_B.Probe_bf[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_bf[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S208>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S203>/Max'\r\n   *  Product: '<S18>/1//T'\r\n   *  Sum: '<S18>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_iz += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[24] - test3_DW.Integrator_DSTATE_iz) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_iz >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_iz = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_iz <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_iz = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_hi = (int16_T)test3_B.Compare_kl;\r\n\r\n  /* Update for DiscreteIntegrator: '<S214>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_b = 0U;\r\n\r\n  /* MinMax: '<S209>/Max' */\r\n  if (test3_B.Probe_gu[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_gu[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S214>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S209>/Max'\r\n   *  Product: '<S19>/1//T'\r\n   *  Sum: '<S19>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_bh += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[25] - test3_DW.Integrator_DSTATE_bh) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_bh >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_bh = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_bh <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_bh = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_fy = (int16_T)test3_B.Compare_kf;\r\n\r\n  /* Update for DiscreteIntegrator: '<S220>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_gu = 0U;\r\n\r\n  /* MinMax: '<S215>/Max' */\r\n  if (test3_B.Probe_er[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_er[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S220>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S215>/Max'\r\n   *  Product: '<S20>/1//T'\r\n   *  Sum: '<S20>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_ji += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[26] - test3_DW.Integrator_DSTATE_ji) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_ji >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ji = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ji <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ji = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_ok = (int16_T)test3_B.Compare_hy;\r\n\r\n  /* Update for DiscreteIntegrator: '<S226>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_ao = 0U;\r\n\r\n  /* MinMax: '<S221>/Max' */\r\n  if (test3_B.Probe_hq[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_hq[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S226>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S221>/Max'\r\n   *  Product: '<S21>/1//T'\r\n   *  Sum: '<S21>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_od += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[27] - test3_DW.Integrator_DSTATE_od) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_od >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_od = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_od <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_od = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_j = (int16_T)test3_B.Compare_oi;\r\n\r\n  /* Update for DiscreteIntegrator: '<S232>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_f = 0U;\r\n\r\n  /* MinMax: '<S227>/Max' */\r\n  if (test3_B.Probe_md[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_md[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S232>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S227>/Max'\r\n   *  Product: '<S22>/1//T'\r\n   *  Sum: '<S22>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_oy += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[28] - test3_DW.Integrator_DSTATE_oy) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_oy >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_oy = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_oy <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_oy = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_dh = (int16_T)test3_B.Compare_i1;\r\n\r\n  /* Update for DiscreteIntegrator: '<S244>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_c = 0U;\r\n\r\n  /* MinMax: '<S239>/Max' */\r\n  if (test3_B.Probe_p[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_p[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S244>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S239>/Max'\r\n   *  Product: '<S24>/1//T'\r\n   *  Sum: '<S24>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_nc += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[29] - test3_DW.Integrator_DSTATE_nc) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_nc >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_nc = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_nc <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_nc = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_ne = (int16_T)test3_B.Compare_g;\r\n\r\n  /* Update for DiscreteIntegrator: '<S250>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_fc = 0U;\r\n\r\n  /* MinMax: '<S245>/Max' */\r\n  if (test3_B.Probe_pe[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_pe[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S250>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S245>/Max'\r\n   *  Product: '<S25>/1//T'\r\n   *  Sum: '<S25>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_c2 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[30] - test3_DW.Integrator_DSTATE_c2) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_c2 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_c2 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_c2 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_c2 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_fl = (int16_T)test3_B.Compare_ec;\r\n\r\n  /* Update for DiscreteIntegrator: '<S256>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_bd = 0U;\r\n\r\n  /* MinMax: '<S251>/Max' */\r\n  if (test3_B.Probe_gb[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_gb[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S256>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S251>/Max'\r\n   *  Product: '<S26>/1//T'\r\n   *  Sum: '<S26>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_pa += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[31] - test3_DW.Integrator_DSTATE_pa) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_pa >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_pa = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_pa <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_pa = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_ib = (int16_T)test3_B.Compare_kh;\r\n\r\n  /* Update for DiscreteIntegrator: '<S262>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_n = 0U;\r\n\r\n  /* MinMax: '<S257>/Max' */\r\n  if (test3_B.Probe_gs[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_gs[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S262>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S257>/Max'\r\n   *  Product: '<S27>/1//T'\r\n   *  Sum: '<S27>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_ez += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[32] - test3_DW.Integrator_DSTATE_ez) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_ez >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ez = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ez <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ez = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_dz = (int16_T)test3_B.Compare_go;\r\n\r\n  /* Update for DiscreteIntegrator: '<S268>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_aoc = 0U;\r\n\r\n  /* MinMax: '<S263>/Max' */\r\n  if (test3_B.Probe_p1[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_p1[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S268>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S263>/Max'\r\n   *  Product: '<S28>/1//T'\r\n   *  Sum: '<S28>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_bp += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[33] - test3_DW.Integrator_DSTATE_bp) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_bp >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_bp = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_bp <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_bp = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_l = (int16_T)test3_B.Compare_hb;\r\n\r\n  /* Update for DiscreteIntegrator: '<S274>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_kr = 0U;\r\n\r\n  /* MinMax: '<S269>/Max' */\r\n  if (test3_B.Probe_j0[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_j0[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S274>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S269>/Max'\r\n   *  Product: '<S29>/1//T'\r\n   *  Sum: '<S29>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_h += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[34] - test3_DW.Integrator_DSTATE_h) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_h >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_h = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_h <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_h = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_hm = (int16_T)test3_B.Compare_d2;\r\n\r\n  /* Update for DiscreteIntegrator: '<S280>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_n3 = 0U;\r\n\r\n  /* MinMax: '<S275>/Max' */\r\n  if (test3_B.Probe_ib[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_ib[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S280>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S275>/Max'\r\n   *  Product: '<S30>/1//T'\r\n   *  Sum: '<S30>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_i4 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[35] - test3_DW.Integrator_DSTATE_i4) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_i4 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_i4 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_i4 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_i4 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_lo = (int16_T)test3_B.Compare_kfs;\r\n\r\n  /* Update for DiscreteIntegrator: '<S286>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_pe = 0U;\r\n\r\n  /* MinMax: '<S281>/Max' */\r\n  if (test3_B.Probe_nm[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_nm[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S286>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S281>/Max'\r\n   *  Product: '<S31>/1//T'\r\n   *  Sum: '<S31>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_fp += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[36] - test3_DW.Integrator_DSTATE_fp) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_fp >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_fp = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_fp <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_fp = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_dk = (int16_T)test3_B.Compare_b3;\r\n\r\n  /* Update for DiscreteIntegrator: '<S292>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_gb = 0U;\r\n\r\n  /* MinMax: '<S287>/Max' */\r\n  if (test3_B.Probe_hh[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_hh[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S292>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S287>/Max'\r\n   *  Product: '<S32>/1//T'\r\n   *  Sum: '<S32>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_hx += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[37] - test3_DW.Integrator_DSTATE_hx) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_hx >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_hx = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_hx <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_hx = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_es = (int16_T)test3_B.Compare_kd;\r\n\r\n  /* Update for DiscreteIntegrator: '<S298>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_gg = 0U;\r\n\r\n  /* MinMax: '<S293>/Max' */\r\n  if (test3_B.Probe_d[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_d[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S298>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S293>/Max'\r\n   *  Product: '<S33>/1//T'\r\n   *  Sum: '<S33>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_k += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[38] - test3_DW.Integrator_DSTATE_k) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_k >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_k = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_k <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_k = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_fu = (int16_T)test3_B.Compare_dh;\r\n\r\n  /* Update for DiscreteIntegrator: '<S310>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_bb = 0U;\r\n\r\n  /* MinMax: '<S305>/Max' */\r\n  if (test3_B.Probe_fv[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_fv[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S310>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S305>/Max'\r\n   *  Product: '<S35>/1//T'\r\n   *  Sum: '<S35>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_g3 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[39] - test3_DW.Integrator_DSTATE_g3) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_g3 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_g3 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_g3 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_g3 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_cv = (int16_T)test3_B.Compare_kv;\r\n\r\n  /* Update for DiscreteIntegrator: '<S316>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_p4 = 0U;\r\n\r\n  /* MinMax: '<S311>/Max' */\r\n  if (test3_B.Probe_ij[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_ij[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S316>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S311>/Max'\r\n   *  Product: '<S36>/1//T'\r\n   *  Sum: '<S36>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_h4 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[40] - test3_DW.Integrator_DSTATE_h4) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_h4 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_h4 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_h4 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_h4 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_ke = (int16_T)test3_B.Compare_of;\r\n\r\n  /* Update for DiscreteIntegrator: '<S322>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_mv = 0U;\r\n\r\n  /* MinMax: '<S317>/Max' */\r\n  if (test3_B.Probe_pk[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_pk[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S322>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S317>/Max'\r\n   *  Product: '<S37>/1//T'\r\n   *  Sum: '<S37>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_e5 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[41] - test3_DW.Integrator_DSTATE_e5) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_e5 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_e5 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_e5 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_e5 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_fa = (int16_T)test3_B.Compare_bn;\r\n\r\n  /* Update for DiscreteIntegrator: '<S328>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_j1 = 0U;\r\n\r\n  /* MinMax: '<S323>/Max' */\r\n  if (test3_B.Probe_a[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_a[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S328>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S323>/Max'\r\n   *  Product: '<S38>/1//T'\r\n   *  Sum: '<S38>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_oc += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[42] - test3_DW.Integrator_DSTATE_oc) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_oc >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_oc = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_oc <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_oc = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_h4 = (int16_T)test3_B.Compare_ix;\r\n\r\n  /* Update for DiscreteIntegrator: '<S334>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_az = 0U;\r\n\r\n  /* MinMax: '<S329>/Max' */\r\n  if (test3_B.Probe_fpu[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_fpu[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S334>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S329>/Max'\r\n   *  Product: '<S39>/1//T'\r\n   *  Sum: '<S39>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_n5 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[43] - test3_DW.Integrator_DSTATE_n5) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_n5 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_n5 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_n5 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_n5 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_io = (int16_T)test3_B.Compare_gy;\r\n\r\n  /* Update for DiscreteIntegrator: '<S340>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_bm = 0U;\r\n\r\n  /* MinMax: '<S335>/Max' */\r\n  if (test3_B.Probe_m0[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_m0[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S340>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S335>/Max'\r\n   *  Product: '<S40>/1//T'\r\n   *  Sum: '<S40>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_do += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[44] - test3_DW.Integrator_DSTATE_do) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_do >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_do = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_do <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_do = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_k3 = (int16_T)test3_B.Compare_kz;\r\n\r\n  /* Update for DiscreteIntegrator: '<S346>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_c0 = 0U;\r\n\r\n  /* MinMax: '<S341>/Max' */\r\n  if (test3_B.Probe_mt[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_mt[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S346>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S341>/Max'\r\n   *  Product: '<S41>/1//T'\r\n   *  Sum: '<S41>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_ds += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[45] - test3_DW.Integrator_DSTATE_ds) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_ds >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ds = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ds <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ds = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_ed = (int16_T)test3_B.Compare_hi;\r\n\r\n  /* Update for DiscreteIntegrator: '<S352>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_p0 = 0U;\r\n\r\n  /* MinMax: '<S347>/Max' */\r\n  if (test3_B.Probe_fn[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_fn[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S352>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S347>/Max'\r\n   *  Product: '<S42>/1//T'\r\n   *  Sum: '<S42>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_bv += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[46] - test3_DW.Integrator_DSTATE_bv) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_bv >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_bv = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_bv <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_bv = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_on = (int16_T)test3_B.Compare_by;\r\n\r\n  /* Update for DiscreteIntegrator: '<S358>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_j3 = 0U;\r\n\r\n  /* MinMax: '<S353>/Max' */\r\n  if (test3_B.Probe_op[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_op[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S358>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S353>/Max'\r\n   *  Product: '<S43>/1//T'\r\n   *  Sum: '<S43>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_o3 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[47] - test3_DW.Integrator_DSTATE_o3) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_o3 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_o3 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_o3 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_o3 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_cb = (int16_T)test3_B.Compare_pn;\r\n\r\n  /* Update for DiscreteIntegrator: '<S364>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_hf = 0U;\r\n\r\n  /* MinMax: '<S359>/Max' */\r\n  if (test3_B.Probe_k[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_k[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S364>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S359>/Max'\r\n   *  Product: '<S44>/1//T'\r\n   *  Sum: '<S44>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_fg += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[48] - test3_DW.Integrator_DSTATE_fg) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_fg >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_fg = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_fg <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_fg = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_fj = (int16_T)test3_B.Compare_ep;\r\n\r\n  /* Update for DiscreteIntegrator: '<S376>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_ms = 0U;\r\n\r\n  /* MinMax: '<S371>/Max' */\r\n  if (test3_B.Probe_ll[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_ll[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S376>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S371>/Max'\r\n   *  Product: '<S46>/1//T'\r\n   *  Sum: '<S46>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_a4 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[49] - test3_DW.Integrator_DSTATE_a4) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_a4 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_a4 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_a4 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_a4 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_kk = (int16_T)test3_B.Compare_ev;\r\n\r\n  /* Update for DiscreteIntegrator: '<S382>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_me = 0U;\r\n\r\n  /* MinMax: '<S377>/Max' */\r\n  if (test3_B.Probe_dm[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_dm[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S382>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S377>/Max'\r\n   *  Product: '<S47>/1//T'\r\n   *  Sum: '<S47>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_l += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[50] - test3_DW.Integrator_DSTATE_l) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_l >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_l = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_l <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_l = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_ie = (int16_T)test3_B.Compare_bm;\r\n\r\n  /* Update for DiscreteIntegrator: '<S388>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_oq = 0U;\r\n\r\n  /* MinMax: '<S383>/Max' */\r\n  if (test3_B.Probe_ba[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_ba[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S388>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S383>/Max'\r\n   *  Product: '<S48>/1//T'\r\n   *  Sum: '<S48>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_eo += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[51] - test3_DW.Integrator_DSTATE_eo) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_eo >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_eo = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_eo <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_eo = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_pp = (int16_T)test3_B.Compare_io;\r\n\r\n  /* Update for DiscreteIntegrator: '<S394>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_kz = 0U;\r\n\r\n  /* MinMax: '<S389>/Max' */\r\n  if (test3_B.Probe_j0k[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_j0k[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S394>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S389>/Max'\r\n   *  Product: '<S49>/1//T'\r\n   *  Sum: '<S49>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_cl += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[52] - test3_DW.Integrator_DSTATE_cl) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_cl >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_cl = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_cl <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_cl = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_ox = (int16_T)test3_B.Compare_ax;\r\n\r\n  /* Update for DiscreteIntegrator: '<S400>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_b1 = 0U;\r\n\r\n  /* MinMax: '<S395>/Max' */\r\n  if (test3_B.Probe_gj[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_gj[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S400>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S395>/Max'\r\n   *  Product: '<S50>/1//T'\r\n   *  Sum: '<S50>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_bs += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[53] - test3_DW.Integrator_DSTATE_bs) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_bs >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_bs = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_bs <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_bs = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_fn = (int16_T)test3_B.Compare_gr;\r\n\r\n  /* Update for DiscreteIntegrator: '<S406>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_j3b = 0U;\r\n\r\n  /* MinMax: '<S401>/Max' */\r\n  if (test3_B.Probe_po[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_po[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S406>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S401>/Max'\r\n   *  Product: '<S51>/1//T'\r\n   *  Sum: '<S51>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_e2 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[54] - test3_DW.Integrator_DSTATE_e2) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_e2 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_e2 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_e2 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_e2 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_mk = (int16_T)test3_B.Compare_fw;\r\n\r\n  /* Update for DiscreteIntegrator: '<S412>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_ar = 0U;\r\n\r\n  /* MinMax: '<S407>/Max' */\r\n  if (test3_B.Probe_f2[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_f2[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S412>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S407>/Max'\r\n   *  Product: '<S52>/1//T'\r\n   *  Sum: '<S52>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_lr += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[55] - test3_DW.Integrator_DSTATE_lr) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_lr >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_lr = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_lr <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_lr = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_m1 = (int16_T)test3_B.Compare_j;\r\n\r\n  /* Update for DiscreteIntegrator: '<S418>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_abx = 0U;\r\n\r\n  /* MinMax: '<S413>/Max' */\r\n  if (test3_B.Probe_iz[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_iz[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S418>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S413>/Max'\r\n   *  Product: '<S53>/1//T'\r\n   *  Sum: '<S53>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_gx += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[56] - test3_DW.Integrator_DSTATE_gx) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_gx >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_gx = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_gx <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_gx = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_dzx = (int16_T)test3_B.Compare_m;\r\n\r\n  /* Update for DiscreteIntegrator: '<S424>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_cy = 0U;\r\n\r\n  /* MinMax: '<S419>/Max' */\r\n  if (test3_B.Probe_lv[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_lv[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S424>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S419>/Max'\r\n   *  Product: '<S54>/1//T'\r\n   *  Sum: '<S54>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_nu += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[57] - test3_DW.Integrator_DSTATE_nu) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_nu >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_nu = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_nu <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_nu = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_m5 = (int16_T)test3_B.Compare_ac;\r\n\r\n  /* Update for DiscreteIntegrator: '<S430>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_b2 = 0U;\r\n\r\n  /* MinMax: '<S425>/Max' */\r\n  if (test3_B.Probe_ms[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_ms[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S430>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S425>/Max'\r\n   *  Product: '<S55>/1//T'\r\n   *  Sum: '<S55>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_az += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[58] - test3_DW.Integrator_DSTATE_az) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_az >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_az = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_az <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_az = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_nv = (int16_T)test3_B.Compare_bo;\r\n\r\n  /* Update for DiscreteIntegrator: '<S442>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_br = 0U;\r\n\r\n  /* MinMax: '<S437>/Max' */\r\n  if (test3_B.Probe_it[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_it[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S442>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S437>/Max'\r\n   *  Product: '<S57>/1//T'\r\n   *  Sum: '<S57>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_kc += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[59] - test3_DW.Integrator_DSTATE_kc) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_kc >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_kc = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_kc <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_kc = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_bw = (int16_T)test3_B.Compare_ng;\r\n\r\n  /* Update for DiscreteIntegrator: '<S448>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_du = 0U;\r\n\r\n  /* MinMax: '<S443>/Max' */\r\n  if (test3_B.Probe_cs[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_cs[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S448>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S443>/Max'\r\n   *  Product: '<S58>/1//T'\r\n   *  Sum: '<S58>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_mc += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[60] - test3_DW.Integrator_DSTATE_mc) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_mc >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_mc = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_mc <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_mc = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_m3 = (int16_T)test3_B.Compare_ht;\r\n\r\n  /* Update for DiscreteIntegrator: '<S454>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_c3 = 0U;\r\n\r\n  /* MinMax: '<S449>/Max' */\r\n  if (test3_B.Probe_pa[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_pa[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S454>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S449>/Max'\r\n   *  Product: '<S59>/1//T'\r\n   *  Sum: '<S59>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_nm += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[61] - test3_DW.Integrator_DSTATE_nm) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_nm >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_nm = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_nm <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_nm = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_ei = (int16_T)test3_B.Compare_im;\r\n\r\n  /* Update for DiscreteIntegrator: '<S460>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_lm = 0U;\r\n\r\n  /* MinMax: '<S455>/Max' */\r\n  if (test3_B.Probe_oq[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_oq[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S460>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S455>/Max'\r\n   *  Product: '<S60>/1//T'\r\n   *  Sum: '<S60>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_po += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[62] - test3_DW.Integrator_DSTATE_po) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_po >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_po = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_po <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_po = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_o1 = (int16_T)test3_B.Compare_hg;\r\n\r\n  /* Update for DiscreteIntegrator: '<S466>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_kk = 0U;\r\n\r\n  /* MinMax: '<S461>/Max' */\r\n  if (test3_B.Probe_hl[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_hl[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S466>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S461>/Max'\r\n   *  Product: '<S61>/1//T'\r\n   *  Sum: '<S61>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_bt += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[63] - test3_DW.Integrator_DSTATE_bt) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_bt >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_bt = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_bt <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_bt = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_gv = (int16_T)test3_B.Compare_kj;\r\n\r\n  /* Update for DiscreteIntegrator: '<S472>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_km = 0U;\r\n\r\n  /* MinMax: '<S467>/Max' */\r\n  if (test3_B.Probe_hz[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_hz[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S472>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S467>/Max'\r\n   *  Product: '<S62>/1//T'\r\n   *  Sum: '<S62>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_jt += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[64] - test3_DW.Integrator_DSTATE_jt) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_jt >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_jt = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_jt <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_jt = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_hf = (int16_T)test3_B.Compare_id;\r\n\r\n  /* Update for DiscreteIntegrator: '<S478>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_oex = 0U;\r\n\r\n  /* MinMax: '<S473>/Max' */\r\n  if (test3_B.Probe_be[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_be[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S478>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S473>/Max'\r\n   *  Product: '<S63>/1//T'\r\n   *  Sum: '<S63>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_dc += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[65] - test3_DW.Integrator_DSTATE_dc) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_dc >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_dc = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_dc <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_dc = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_gs = (int16_T)test3_B.Compare_ff;\r\n\r\n  /* Update for DiscreteIntegrator: '<S484>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_kp = 0U;\r\n\r\n  /* MinMax: '<S479>/Max' */\r\n  if (test3_B.Probe_c2[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_c2[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S484>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S479>/Max'\r\n   *  Product: '<S64>/1//T'\r\n   *  Sum: '<S64>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_pb += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[66] - test3_DW.Integrator_DSTATE_pb) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_pb >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_pb = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_pb <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_pb = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_fyk = (int16_T)test3_B.Compare_kn;\r\n\r\n  /* Update for DiscreteIntegrator: '<S490>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_ew = 0U;\r\n\r\n  /* MinMax: '<S485>/Max' */\r\n  if (test3_B.Probe_eq[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_eq[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S490>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S485>/Max'\r\n   *  Product: '<S65>/1//T'\r\n   *  Sum: '<S65>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_oe += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[67] - test3_DW.Integrator_DSTATE_oe) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_oe >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_oe = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_oe <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_oe = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_kl = (int16_T)test3_B.Compare_g5;\r\n\r\n  /* Update for DiscreteIntegrator: '<S496>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_bk = 0U;\r\n\r\n  /* MinMax: '<S491>/Max' */\r\n  if (test3_B.Probe_aj[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_aj[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S496>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S491>/Max'\r\n   *  Product: '<S66>/1//T'\r\n   *  Sum: '<S66>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_al += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[68] - test3_DW.Integrator_DSTATE_al) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_al >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_al = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_al <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_al = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_nk = (int16_T)test3_B.Compare_ou;\r\n\r\n  /* Update for DiscreteIntegrator: '<S508>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_j31 = 0U;\r\n\r\n  /* MinMax: '<S503>/Max' */\r\n  if (test3_B.Probe_hs[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_hs[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S508>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S503>/Max'\r\n   *  Product: '<S68>/1//T'\r\n   *  Sum: '<S68>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_cx += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[69] - test3_DW.Integrator_DSTATE_cx) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_cx >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_cx = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_cx <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_cx = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_ln = (int16_T)test3_B.Compare_eq;\r\n\r\n  /* Update for DiscreteIntegrator: '<S514>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_mo = 0U;\r\n\r\n  /* MinMax: '<S509>/Max' */\r\n  if (test3_B.Probe_kp[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_kp[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S514>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S509>/Max'\r\n   *  Product: '<S69>/1//T'\r\n   *  Sum: '<S69>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_cr += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[70] - test3_DW.Integrator_DSTATE_cr) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_cr >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_cr = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_cr <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_cr = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_oe = (int16_T)test3_B.Compare_l5;\r\n\r\n  /* Update for DiscreteIntegrator: '<S520>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_abf = 0U;\r\n\r\n  /* MinMax: '<S515>/Max' */\r\n  if (test3_B.Probe_jn[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_jn[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S520>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S515>/Max'\r\n   *  Product: '<S70>/1//T'\r\n   *  Sum: '<S70>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_p3 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[71] - test3_DW.Integrator_DSTATE_p3) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_p3 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_p3 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_p3 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_p3 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_hu = (int16_T)test3_B.Compare_fs;\r\n\r\n  /* Update for DiscreteIntegrator: '<S526>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_ho = 0U;\r\n\r\n  /* MinMax: '<S521>/Max' */\r\n  if (test3_B.Probe_dh[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_dh[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S526>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S521>/Max'\r\n   *  Product: '<S71>/1//T'\r\n   *  Sum: '<S71>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_kv += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[72] - test3_DW.Integrator_DSTATE_kv) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_kv >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_kv = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_kv <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_kv = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_mr = (int16_T)test3_B.Compare_c;\r\n\r\n  /* Update for DiscreteIntegrator: '<S532>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_ph = 0U;\r\n\r\n  /* MinMax: '<S527>/Max' */\r\n  if (test3_B.Probe_bg[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_bg[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S532>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S527>/Max'\r\n   *  Product: '<S72>/1//T'\r\n   *  Sum: '<S72>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_ed += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[73] - test3_DW.Integrator_DSTATE_ed) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_ed >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ed = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ed <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ed = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_ec = (int16_T)test3_B.Compare_f3;\r\n\r\n  /* Update for DiscreteIntegrator: '<S538>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_da = 0U;\r\n\r\n  /* MinMax: '<S533>/Max' */\r\n  if (test3_B.Probe_hb[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_hb[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S538>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S533>/Max'\r\n   *  Product: '<S73>/1//T'\r\n   *  Sum: '<S73>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_fu += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[74] - test3_DW.Integrator_DSTATE_fu) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_fu >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_fu = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_fu <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_fu = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_bb = (int16_T)test3_B.Compare_lf;\r\n\r\n  /* Update for DiscreteIntegrator: '<S544>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_cg = 0U;\r\n\r\n  /* MinMax: '<S539>/Max' */\r\n  if (test3_B.Probe_gk[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_gk[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S544>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S539>/Max'\r\n   *  Product: '<S74>/1//T'\r\n   *  Sum: '<S74>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_he += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[75] - test3_DW.Integrator_DSTATE_he) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_he >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_he = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_he <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_he = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_n1 = (int16_T)test3_B.Compare_bi;\r\n\r\n  /* Update for DiscreteIntegrator: '<S550>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_d3 = 0U;\r\n\r\n  /* MinMax: '<S545>/Max' */\r\n  if (test3_B.Probe_ny[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_ny[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S550>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S545>/Max'\r\n   *  Product: '<S75>/1//T'\r\n   *  Sum: '<S75>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_ot += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[76] - test3_DW.Integrator_DSTATE_ot) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_ot >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ot = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ot <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ot = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_iw = (int16_T)test3_B.Compare_bnj;\r\n\r\n  /* Update for DiscreteIntegrator: '<S556>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_d0 = 0U;\r\n\r\n  /* MinMax: '<S551>/Max' */\r\n  if (test3_B.Probe_k0[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_k0[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S556>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S551>/Max'\r\n   *  Product: '<S76>/1//T'\r\n   *  Sum: '<S76>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_my += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[77] - test3_DW.Integrator_DSTATE_my) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_my >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_my = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_my <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_my = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_gg = (int16_T)rtb_Compare_aw;\r\n\r\n  /* Update for DiscreteIntegrator: '<S562>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_mg = 0U;\r\n\r\n  /* MinMax: '<S557>/Max' */\r\n  if (test3_B.Probe_ic[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_ic[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S562>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S557>/Max'\r\n   *  Product: '<S77>/1//T'\r\n   *  Sum: '<S77>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_lt += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[78] - test3_DW.Integrator_DSTATE_lt) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_lt >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_lt = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_lt <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_lt = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_lz = (int16_T)rtb_Compare_gz;\r\n\r\n  /* Update for DiscreteIntegrator: '<S574>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_e3 = 0U;\r\n\r\n  /* MinMax: '<S569>/Max' */\r\n  if (test3_B.Probe_lg[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_lg[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S574>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S569>/Max'\r\n   *  Product: '<S79>/1//T'\r\n   *  Sum: '<S79>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_pd += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[79] - test3_DW.Integrator_DSTATE_pd) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_pd >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_pd = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_pd <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_pd = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_dkv = (int16_T)rtb_Compare_ms;\r\n\r\n  /* Update for DiscreteIntegrator: '<S580>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_ns = 0U;\r\n\r\n  /* MinMax: '<S575>/Max' */\r\n  if (test3_B.Probe_fh[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_fh[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S580>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S575>/Max'\r\n   *  Product: '<S80>/1//T'\r\n   *  Sum: '<S80>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_en += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[80] - test3_DW.Integrator_DSTATE_en) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_en >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_en = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_en <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_en = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_bq = (int16_T)rtb_Compare_ar;\r\n\r\n  /* Update for DiscreteIntegrator: '<S586>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_hp = 0U;\r\n\r\n  /* MinMax: '<S581>/Max' */\r\n  if (test3_B.Probe_eh[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_eh[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S586>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S581>/Max'\r\n   *  Product: '<S81>/1//T'\r\n   *  Sum: '<S81>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_ix += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[81] - test3_DW.Integrator_DSTATE_ix) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_ix >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ix = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ix <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ix = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_pb = (int16_T)rtb_Compare_euj;\r\n\r\n  /* Update for DiscreteIntegrator: '<S592>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_a0 = 0U;\r\n\r\n  /* MinMax: '<S587>/Max' */\r\n  if (test3_B.Probe_nl[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_nl[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S592>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S587>/Max'\r\n   *  Product: '<S82>/1//T'\r\n   *  Sum: '<S82>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_hg += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[82] - test3_DW.Integrator_DSTATE_hg) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_hg >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_hg = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_hg <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_hg = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_ew = (int16_T)rtb_Compare_gk;\r\n\r\n  /* Update for DiscreteIntegrator: '<S598>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_bo = 0U;\r\n\r\n  /* MinMax: '<S593>/Max' */\r\n  if (test3_B.Probe_bo[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_bo[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S598>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S593>/Max'\r\n   *  Product: '<S83>/1//T'\r\n   *  Sum: '<S83>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_fm += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[83] - test3_DW.Integrator_DSTATE_fm) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_fm >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_fm = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_fm <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_fm = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_pl = (int16_T)rtb_Compare_lu;\r\n\r\n  /* Update for DiscreteIntegrator: '<S604>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_kq = 0U;\r\n\r\n  /* MinMax: '<S599>/Max' */\r\n  if (test3_B.Probe_kb[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_kb[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S604>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S599>/Max'\r\n   *  Product: '<S84>/1//T'\r\n   *  Sum: '<S84>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_ok += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[84] - test3_DW.Integrator_DSTATE_ok) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_ok >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ok = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ok <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ok = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_mu = (int16_T)rtb_Compare_gb;\r\n\r\n  /* Update for DiscreteIntegrator: '<S610>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_h2 = 0U;\r\n\r\n  /* MinMax: '<S605>/Max' */\r\n  if (test3_B.Probe_l3[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_l3[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S610>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S605>/Max'\r\n   *  Product: '<S85>/1//T'\r\n   *  Sum: '<S85>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_ns += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[85] - test3_DW.Integrator_DSTATE_ns) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_ns >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ns = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ns <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ns = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_e4 = (int16_T)rtb_Compare_b4;\r\n\r\n  /* Update for DiscreteIntegrator: '<S616>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_kkm = 0U;\r\n\r\n  /* MinMax: '<S611>/Max' */\r\n  if (test3_B.Probe_j0n[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_j0n[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S616>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S611>/Max'\r\n   *  Product: '<S86>/1//T'\r\n   *  Sum: '<S86>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_ga += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[86] - test3_DW.Integrator_DSTATE_ga) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_ga >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_ga = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_ga <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_ga = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_jl = (int16_T)rtb_Compare_l0;\r\n\r\n  /* Update for DiscreteIntegrator: '<S622>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_bz = 0U;\r\n\r\n  /* MinMax: '<S617>/Max' */\r\n  if (test3_B.Probe_pu[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_pu[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S622>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S617>/Max'\r\n   *  Product: '<S87>/1//T'\r\n   *  Sum: '<S87>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_dsn += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[87] - test3_DW.Integrator_DSTATE_dsn) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_dsn >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_dsn = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_dsn <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_dsn = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_cx = (int16_T)rtb_Compare_da;\r\n\r\n  /* Update for DiscreteIntegrator: '<S628>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_o1 = 0U;\r\n\r\n  /* MinMax: '<S623>/Max' */\r\n  if (test3_B.Probe_jw[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_jw[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S628>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S623>/Max'\r\n   *  Product: '<S88>/1//T'\r\n   *  Sum: '<S88>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_pc += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[88] - test3_DW.Integrator_DSTATE_pc) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_pc >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_pc = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_pc <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_pc = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_mm = (int16_T)rtb_Compare_cm;\r\n\r\n  /* Update for DiscreteIntegrator: '<S640>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_fcd = 0U;\r\n\r\n  /* MinMax: '<S635>/Max' */\r\n  if (test3_B.Probe_g2[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_g2[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S640>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S635>/Max'\r\n   *  Product: '<S90>/1//T'\r\n   *  Sum: '<S90>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_eg += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[89] - test3_DW.Integrator_DSTATE_eg) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_eg >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_eg = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_eg <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_eg = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_pg = (int16_T)rtb_Compare_et;\r\n\r\n  /* Update for DiscreteIntegrator: '<S646>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_bp = 0U;\r\n\r\n  /* MinMax: '<S641>/Max' */\r\n  if (test3_B.Probe_opc[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_opc[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S646>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S641>/Max'\r\n   *  Product: '<S91>/1//T'\r\n   *  Sum: '<S91>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_jx += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[90] - test3_DW.Integrator_DSTATE_jx) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_jx >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_jx = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_jx <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_jx = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_md = (int16_T)rtb_Compare_eo;\r\n\r\n  /* Update for DiscreteIntegrator: '<S652>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_ad = 0U;\r\n\r\n  /* MinMax: '<S647>/Max' */\r\n  if (test3_B.Probe_lf[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_lf[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S652>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S647>/Max'\r\n   *  Product: '<S92>/1//T'\r\n   *  Sum: '<S92>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_im += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[91] - test3_DW.Integrator_DSTATE_im) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_im >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_im = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_im <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_im = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_bf = (int16_T)rtb_Compare_pd;\r\n\r\n  /* Update for DiscreteIntegrator: '<S658>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_kv = 0U;\r\n\r\n  /* MinMax: '<S653>/Max' */\r\n  if (test3_B.Probe_m5[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_m5[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S658>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S653>/Max'\r\n   *  Product: '<S93>/1//T'\r\n   *  Sum: '<S93>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_hp += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[92] - test3_DW.Integrator_DSTATE_hp) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_hp >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_hp = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_hp <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_hp = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_fam = (int16_T)rtb_Compare_is;\r\n\r\n  /* Update for DiscreteIntegrator: '<S664>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_h20 = 0U;\r\n\r\n  /* MinMax: '<S659>/Max' */\r\n  if (test3_B.Probe_da[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_da[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S664>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S659>/Max'\r\n   *  Product: '<S94>/1//T'\r\n   *  Sum: '<S94>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_aq += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[93] - test3_DW.Integrator_DSTATE_aq) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_aq >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_aq = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_aq <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_aq = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_g2 = (int16_T)rtb_Compare_ee;\r\n\r\n  /* Update for DiscreteIntegrator: '<S670>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_d04 = 0U;\r\n\r\n  /* MinMax: '<S665>/Max' */\r\n  if (test3_B.Probe_he[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_he[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S670>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S665>/Max'\r\n   *  Product: '<S95>/1//T'\r\n   *  Sum: '<S95>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_lx += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[94] - test3_DW.Integrator_DSTATE_lx) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_lx >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_lx = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_lx <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_lx = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_ou = (int16_T)rtb_Compare_mpz;\r\n\r\n  /* Update for DiscreteIntegrator: '<S676>/Integrator' */\r\n  test3_DW.Integrator_IC_LOADING_jn = 0U;\r\n\r\n  /* MinMax: '<S671>/Max' */\r\n  if (test3_B.Probe_ak[0] >= 0.031830988618379068) {\r\n    test3_B.d = test3_B.Probe_ak[0];\r\n  } else {\r\n    test3_B.d = 0.031830988618379068;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S676>/Integrator' incorporates:\r\n   *  Inport: '<Root>/CellVoltages'\r\n   *  MinMax: '<S671>/Max'\r\n   *  Product: '<S96>/1//T'\r\n   *  Sum: '<S96>/Sum1'\r\n   */\r\n  test3_DW.Integrator_DSTATE_l5 += 1.0F / (real32_T)test3_B.d *\r\n    (test3_U.CellVoltages[95] - test3_DW.Integrator_DSTATE_l5) * 0.01F;\r\n  if (test3_DW.Integrator_DSTATE_l5 >= 6.0F) {\r\n    test3_DW.Integrator_DSTATE_l5 = 6.0F;\r\n  } else if (test3_DW.Integrator_DSTATE_l5 <= 0.0F) {\r\n    test3_DW.Integrator_DSTATE_l5 = 0.0F;\r\n  }\r\n\r\n  test3_DW.Integrator_PrevResetState_k5 = (int16_T)rtb_Compare_ne;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid test3_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize non-finites */\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n\r\n  /* initialize error status */\r\n  rtmSetErrorStatus(test3_M, (NULL));\r\n\r\n  /* block I/O */\r\n  (void) memset(((void *) &test3_B), 0,\r\n                sizeof(B_test3_T));\r\n\r\n  /* states (dwork) */\r\n  (void) memset((void *)&test3_DW, 0,\r\n                sizeof(DW_test3_T));\r\n\r\n  {\r\n    g_dsp_internal_SlidingWindo_k_T *iobj_0;\r\n    int16_T i;\r\n\r\n    /* Start for Probe: '<S101>/Probe' */\r\n    test3_B.Probe[0] = 0.01F;\r\n    test3_B.Probe[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S167>/Probe' */\r\n    test3_B.Probe_l[0] = 0.01F;\r\n    test3_B.Probe_l[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S233>/Probe' */\r\n    test3_B.Probe_i[0] = 0.01F;\r\n    test3_B.Probe_i[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S299>/Probe' */\r\n    test3_B.Probe_o[0] = 0.01F;\r\n    test3_B.Probe_o[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S365>/Probe' */\r\n    test3_B.Probe_ii[0] = 0.01F;\r\n    test3_B.Probe_ii[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S431>/Probe' */\r\n    test3_B.Probe_e[0] = 0.01F;\r\n    test3_B.Probe_e[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S497>/Probe' */\r\n    test3_B.Probe_n[0] = 0.01F;\r\n    test3_B.Probe_n[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S563>/Probe' */\r\n    test3_B.Probe_ng[0] = 0.01F;\r\n    test3_B.Probe_ng[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S629>/Probe' */\r\n    test3_B.Probe_no[0] = 0.01F;\r\n    test3_B.Probe_no[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S107>/Probe' */\r\n    test3_B.Probe_b[0] = 0.01F;\r\n    test3_B.Probe_b[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S113>/Probe' */\r\n    test3_B.Probe_j[0] = 0.01F;\r\n    test3_B.Probe_j[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S119>/Probe' */\r\n    test3_B.Probe_os[0] = 0.01F;\r\n    test3_B.Probe_os[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S125>/Probe' */\r\n    test3_B.Probe_m[0] = 0.01F;\r\n    test3_B.Probe_m[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S131>/Probe' */\r\n    test3_B.Probe_c[0] = 0.01F;\r\n    test3_B.Probe_c[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S137>/Probe' */\r\n    test3_B.Probe_lt[0] = 0.01F;\r\n    test3_B.Probe_lt[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S143>/Probe' */\r\n    test3_B.Probe_ik[0] = 0.01F;\r\n    test3_B.Probe_ik[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S149>/Probe' */\r\n    test3_B.Probe_ct[0] = 0.01F;\r\n    test3_B.Probe_ct[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S155>/Probe' */\r\n    test3_B.Probe_f[0] = 0.01F;\r\n    test3_B.Probe_f[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S161>/Probe' */\r\n    test3_B.Probe_fp[0] = 0.01F;\r\n    test3_B.Probe_fp[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S173>/Probe' */\r\n    test3_B.Probe_g[0] = 0.01F;\r\n    test3_B.Probe_g[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S179>/Probe' */\r\n    test3_B.Probe_h[0] = 0.01F;\r\n    test3_B.Probe_h[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S185>/Probe' */\r\n    test3_B.Probe_o4[0] = 0.01F;\r\n    test3_B.Probe_o4[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S191>/Probe' */\r\n    test3_B.Probe_fc[0] = 0.01F;\r\n    test3_B.Probe_fc[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S197>/Probe' */\r\n    test3_B.Probe_f1[0] = 0.01F;\r\n    test3_B.Probe_f1[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S203>/Probe' */\r\n    test3_B.Probe_bf[0] = 0.01F;\r\n    test3_B.Probe_bf[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S209>/Probe' */\r\n    test3_B.Probe_gu[0] = 0.01F;\r\n    test3_B.Probe_gu[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S215>/Probe' */\r\n    test3_B.Probe_er[0] = 0.01F;\r\n    test3_B.Probe_er[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S221>/Probe' */\r\n    test3_B.Probe_hq[0] = 0.01F;\r\n    test3_B.Probe_hq[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S227>/Probe' */\r\n    test3_B.Probe_md[0] = 0.01F;\r\n    test3_B.Probe_md[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S239>/Probe' */\r\n    test3_B.Probe_p[0] = 0.01F;\r\n    test3_B.Probe_p[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S245>/Probe' */\r\n    test3_B.Probe_pe[0] = 0.01F;\r\n    test3_B.Probe_pe[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S251>/Probe' */\r\n    test3_B.Probe_gb[0] = 0.01F;\r\n    test3_B.Probe_gb[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S257>/Probe' */\r\n    test3_B.Probe_gs[0] = 0.01F;\r\n    test3_B.Probe_gs[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S263>/Probe' */\r\n    test3_B.Probe_p1[0] = 0.01F;\r\n    test3_B.Probe_p1[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S269>/Probe' */\r\n    test3_B.Probe_j0[0] = 0.01F;\r\n    test3_B.Probe_j0[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S275>/Probe' */\r\n    test3_B.Probe_ib[0] = 0.01F;\r\n    test3_B.Probe_ib[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S281>/Probe' */\r\n    test3_B.Probe_nm[0] = 0.01F;\r\n    test3_B.Probe_nm[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S287>/Probe' */\r\n    test3_B.Probe_hh[0] = 0.01F;\r\n    test3_B.Probe_hh[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S293>/Probe' */\r\n    test3_B.Probe_d[0] = 0.01F;\r\n    test3_B.Probe_d[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S305>/Probe' */\r\n    test3_B.Probe_fv[0] = 0.01F;\r\n    test3_B.Probe_fv[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S311>/Probe' */\r\n    test3_B.Probe_ij[0] = 0.01F;\r\n    test3_B.Probe_ij[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S317>/Probe' */\r\n    test3_B.Probe_pk[0] = 0.01F;\r\n    test3_B.Probe_pk[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S323>/Probe' */\r\n    test3_B.Probe_a[0] = 0.01F;\r\n    test3_B.Probe_a[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S329>/Probe' */\r\n    test3_B.Probe_fpu[0] = 0.01F;\r\n    test3_B.Probe_fpu[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S335>/Probe' */\r\n    test3_B.Probe_m0[0] = 0.01F;\r\n    test3_B.Probe_m0[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S341>/Probe' */\r\n    test3_B.Probe_mt[0] = 0.01F;\r\n    test3_B.Probe_mt[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S347>/Probe' */\r\n    test3_B.Probe_fn[0] = 0.01F;\r\n    test3_B.Probe_fn[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S353>/Probe' */\r\n    test3_B.Probe_op[0] = 0.01F;\r\n    test3_B.Probe_op[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S359>/Probe' */\r\n    test3_B.Probe_k[0] = 0.01F;\r\n    test3_B.Probe_k[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S371>/Probe' */\r\n    test3_B.Probe_ll[0] = 0.01F;\r\n    test3_B.Probe_ll[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S377>/Probe' */\r\n    test3_B.Probe_dm[0] = 0.01F;\r\n    test3_B.Probe_dm[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S383>/Probe' */\r\n    test3_B.Probe_ba[0] = 0.01F;\r\n    test3_B.Probe_ba[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S389>/Probe' */\r\n    test3_B.Probe_j0k[0] = 0.01F;\r\n    test3_B.Probe_j0k[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S395>/Probe' */\r\n    test3_B.Probe_gj[0] = 0.01F;\r\n    test3_B.Probe_gj[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S401>/Probe' */\r\n    test3_B.Probe_po[0] = 0.01F;\r\n    test3_B.Probe_po[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S407>/Probe' */\r\n    test3_B.Probe_f2[0] = 0.01F;\r\n    test3_B.Probe_f2[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S413>/Probe' */\r\n    test3_B.Probe_iz[0] = 0.01F;\r\n    test3_B.Probe_iz[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S419>/Probe' */\r\n    test3_B.Probe_lv[0] = 0.01F;\r\n    test3_B.Probe_lv[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S425>/Probe' */\r\n    test3_B.Probe_ms[0] = 0.01F;\r\n    test3_B.Probe_ms[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S437>/Probe' */\r\n    test3_B.Probe_it[0] = 0.01F;\r\n    test3_B.Probe_it[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S443>/Probe' */\r\n    test3_B.Probe_cs[0] = 0.01F;\r\n    test3_B.Probe_cs[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S449>/Probe' */\r\n    test3_B.Probe_pa[0] = 0.01F;\r\n    test3_B.Probe_pa[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S455>/Probe' */\r\n    test3_B.Probe_oq[0] = 0.01F;\r\n    test3_B.Probe_oq[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S461>/Probe' */\r\n    test3_B.Probe_hl[0] = 0.01F;\r\n    test3_B.Probe_hl[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S467>/Probe' */\r\n    test3_B.Probe_hz[0] = 0.01F;\r\n    test3_B.Probe_hz[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S473>/Probe' */\r\n    test3_B.Probe_be[0] = 0.01F;\r\n    test3_B.Probe_be[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S479>/Probe' */\r\n    test3_B.Probe_c2[0] = 0.01F;\r\n    test3_B.Probe_c2[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S485>/Probe' */\r\n    test3_B.Probe_eq[0] = 0.01F;\r\n    test3_B.Probe_eq[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S491>/Probe' */\r\n    test3_B.Probe_aj[0] = 0.01F;\r\n    test3_B.Probe_aj[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S503>/Probe' */\r\n    test3_B.Probe_hs[0] = 0.01F;\r\n    test3_B.Probe_hs[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S509>/Probe' */\r\n    test3_B.Probe_kp[0] = 0.01F;\r\n    test3_B.Probe_kp[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S515>/Probe' */\r\n    test3_B.Probe_jn[0] = 0.01F;\r\n    test3_B.Probe_jn[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S521>/Probe' */\r\n    test3_B.Probe_dh[0] = 0.01F;\r\n    test3_B.Probe_dh[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S527>/Probe' */\r\n    test3_B.Probe_bg[0] = 0.01F;\r\n    test3_B.Probe_bg[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S533>/Probe' */\r\n    test3_B.Probe_hb[0] = 0.01F;\r\n    test3_B.Probe_hb[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S539>/Probe' */\r\n    test3_B.Probe_gk[0] = 0.01F;\r\n    test3_B.Probe_gk[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S545>/Probe' */\r\n    test3_B.Probe_ny[0] = 0.01F;\r\n    test3_B.Probe_ny[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S551>/Probe' */\r\n    test3_B.Probe_k0[0] = 0.01F;\r\n    test3_B.Probe_k0[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S557>/Probe' */\r\n    test3_B.Probe_ic[0] = 0.01F;\r\n    test3_B.Probe_ic[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S569>/Probe' */\r\n    test3_B.Probe_lg[0] = 0.01F;\r\n    test3_B.Probe_lg[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S575>/Probe' */\r\n    test3_B.Probe_fh[0] = 0.01F;\r\n    test3_B.Probe_fh[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S581>/Probe' */\r\n    test3_B.Probe_eh[0] = 0.01F;\r\n    test3_B.Probe_eh[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S587>/Probe' */\r\n    test3_B.Probe_nl[0] = 0.01F;\r\n    test3_B.Probe_nl[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S593>/Probe' */\r\n    test3_B.Probe_bo[0] = 0.01F;\r\n    test3_B.Probe_bo[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S599>/Probe' */\r\n    test3_B.Probe_kb[0] = 0.01F;\r\n    test3_B.Probe_kb[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S605>/Probe' */\r\n    test3_B.Probe_l3[0] = 0.01F;\r\n    test3_B.Probe_l3[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S611>/Probe' */\r\n    test3_B.Probe_j0n[0] = 0.01F;\r\n    test3_B.Probe_j0n[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S617>/Probe' */\r\n    test3_B.Probe_pu[0] = 0.01F;\r\n    test3_B.Probe_pu[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S623>/Probe' */\r\n    test3_B.Probe_jw[0] = 0.01F;\r\n    test3_B.Probe_jw[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S635>/Probe' */\r\n    test3_B.Probe_g2[0] = 0.01F;\r\n    test3_B.Probe_g2[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S641>/Probe' */\r\n    test3_B.Probe_opc[0] = 0.01F;\r\n    test3_B.Probe_opc[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S647>/Probe' */\r\n    test3_B.Probe_lf[0] = 0.01F;\r\n    test3_B.Probe_lf[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S653>/Probe' */\r\n    test3_B.Probe_m5[0] = 0.01F;\r\n    test3_B.Probe_m5[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S659>/Probe' */\r\n    test3_B.Probe_da[0] = 0.01F;\r\n    test3_B.Probe_da[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S665>/Probe' */\r\n    test3_B.Probe_he[0] = 0.01F;\r\n    test3_B.Probe_he[1] = 0.0F;\r\n\r\n    /* Start for Probe: '<S671>/Probe' */\r\n    test3_B.Probe_ak[0] = 0.01F;\r\n    test3_B.Probe_ak[1] = 0.0F;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S106>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState = 0;\r\n    test3_DW.Integrator_IC_LOADING = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S172>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_p = 0;\r\n    test3_DW.Integrator_IC_LOADING_p = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S238>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_o = 0;\r\n    test3_DW.Integrator_IC_LOADING_g = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S304>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_e = 0;\r\n    test3_DW.Integrator_IC_LOADING_j = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S370>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_oy = 0;\r\n    test3_DW.Integrator_IC_LOADING_h = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S436>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_c = 0;\r\n    test3_DW.Integrator_IC_LOADING_k = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S502>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_a = 0;\r\n    test3_DW.Integrator_IC_LOADING_o = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S568>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_ch = 0;\r\n    test3_DW.Integrator_IC_LOADING_g2 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S634>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_h = 0;\r\n    test3_DW.Integrator_IC_LOADING_d = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S112>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_i = 0;\r\n    test3_DW.Integrator_IC_LOADING_pv = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S118>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_iy = 0;\r\n    test3_DW.Integrator_IC_LOADING_m = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S124>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_g = 0;\r\n    test3_DW.Integrator_IC_LOADING_hr = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S130>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_f = 0;\r\n    test3_DW.Integrator_IC_LOADING_i = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S136>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_fi = 0;\r\n    test3_DW.Integrator_IC_LOADING_e = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S142>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_fm = 0;\r\n    test3_DW.Integrator_IC_LOADING_df = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S148>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_gh = 0;\r\n    test3_DW.Integrator_IC_LOADING_ip = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S154>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_b = 0;\r\n    test3_DW.Integrator_IC_LOADING_a = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S160>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_bl = 0;\r\n    test3_DW.Integrator_IC_LOADING_ic = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S166>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_fie = 0;\r\n    test3_DW.Integrator_IC_LOADING_ab = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S178>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_d = 0;\r\n    test3_DW.Integrator_IC_LOADING_oe = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S184>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_k = 0;\r\n    test3_DW.Integrator_IC_LOADING_op = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S190>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_n = 0;\r\n    test3_DW.Integrator_IC_LOADING_hg = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S196>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_fz = 0;\r\n    test3_DW.Integrator_IC_LOADING_l = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S202>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_m = 0;\r\n    test3_DW.Integrator_IC_LOADING_iw = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S208>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_hi = 0;\r\n    test3_DW.Integrator_IC_LOADING_ky = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S214>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_fy = 0;\r\n    test3_DW.Integrator_IC_LOADING_b = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S220>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_ok = 0;\r\n    test3_DW.Integrator_IC_LOADING_gu = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S226>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_j = 0;\r\n    test3_DW.Integrator_IC_LOADING_ao = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S232>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_dh = 0;\r\n    test3_DW.Integrator_IC_LOADING_f = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S244>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_ne = 0;\r\n    test3_DW.Integrator_IC_LOADING_c = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S250>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_fl = 0;\r\n    test3_DW.Integrator_IC_LOADING_fc = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S256>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_ib = 0;\r\n    test3_DW.Integrator_IC_LOADING_bd = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S262>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_dz = 0;\r\n    test3_DW.Integrator_IC_LOADING_n = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S268>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_l = 0;\r\n    test3_DW.Integrator_IC_LOADING_aoc = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S274>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_hm = 0;\r\n    test3_DW.Integrator_IC_LOADING_kr = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S280>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_lo = 0;\r\n    test3_DW.Integrator_IC_LOADING_n3 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S286>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_dk = 0;\r\n    test3_DW.Integrator_IC_LOADING_pe = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S292>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_es = 0;\r\n    test3_DW.Integrator_IC_LOADING_gb = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S298>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_fu = 0;\r\n    test3_DW.Integrator_IC_LOADING_gg = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S310>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_cv = 0;\r\n    test3_DW.Integrator_IC_LOADING_bb = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S316>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_ke = 0;\r\n    test3_DW.Integrator_IC_LOADING_p4 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S322>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_fa = 0;\r\n    test3_DW.Integrator_IC_LOADING_mv = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S328>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_h4 = 0;\r\n    test3_DW.Integrator_IC_LOADING_j1 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S334>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_io = 0;\r\n    test3_DW.Integrator_IC_LOADING_az = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S340>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_k3 = 0;\r\n    test3_DW.Integrator_IC_LOADING_bm = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S346>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_ed = 0;\r\n    test3_DW.Integrator_IC_LOADING_c0 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S352>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_on = 0;\r\n    test3_DW.Integrator_IC_LOADING_p0 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S358>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_cb = 0;\r\n    test3_DW.Integrator_IC_LOADING_j3 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S364>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_fj = 0;\r\n    test3_DW.Integrator_IC_LOADING_hf = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S376>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_kk = 0;\r\n    test3_DW.Integrator_IC_LOADING_ms = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S382>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_ie = 0;\r\n    test3_DW.Integrator_IC_LOADING_me = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S388>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_pp = 0;\r\n    test3_DW.Integrator_IC_LOADING_oq = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S394>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_ox = 0;\r\n    test3_DW.Integrator_IC_LOADING_kz = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S400>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_fn = 0;\r\n    test3_DW.Integrator_IC_LOADING_b1 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S406>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_mk = 0;\r\n    test3_DW.Integrator_IC_LOADING_j3b = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S412>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_m1 = 0;\r\n    test3_DW.Integrator_IC_LOADING_ar = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S418>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_dzx = 0;\r\n    test3_DW.Integrator_IC_LOADING_abx = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S424>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_m5 = 0;\r\n    test3_DW.Integrator_IC_LOADING_cy = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S430>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_nv = 0;\r\n    test3_DW.Integrator_IC_LOADING_b2 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S442>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_bw = 0;\r\n    test3_DW.Integrator_IC_LOADING_br = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S448>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_m3 = 0;\r\n    test3_DW.Integrator_IC_LOADING_du = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S454>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_ei = 0;\r\n    test3_DW.Integrator_IC_LOADING_c3 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S460>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_o1 = 0;\r\n    test3_DW.Integrator_IC_LOADING_lm = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S466>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_gv = 0;\r\n    test3_DW.Integrator_IC_LOADING_kk = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S472>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_hf = 0;\r\n    test3_DW.Integrator_IC_LOADING_km = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S478>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_gs = 0;\r\n    test3_DW.Integrator_IC_LOADING_oex = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S484>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_fyk = 0;\r\n    test3_DW.Integrator_IC_LOADING_kp = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S490>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_kl = 0;\r\n    test3_DW.Integrator_IC_LOADING_ew = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S496>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_nk = 0;\r\n    test3_DW.Integrator_IC_LOADING_bk = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S508>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_ln = 0;\r\n    test3_DW.Integrator_IC_LOADING_j31 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S514>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_oe = 0;\r\n    test3_DW.Integrator_IC_LOADING_mo = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S520>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_hu = 0;\r\n    test3_DW.Integrator_IC_LOADING_abf = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S526>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_mr = 0;\r\n    test3_DW.Integrator_IC_LOADING_ho = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S532>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_ec = 0;\r\n    test3_DW.Integrator_IC_LOADING_ph = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S538>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_bb = 0;\r\n    test3_DW.Integrator_IC_LOADING_da = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S544>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_n1 = 0;\r\n    test3_DW.Integrator_IC_LOADING_cg = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S550>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_iw = 0;\r\n    test3_DW.Integrator_IC_LOADING_d3 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S556>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_gg = 0;\r\n    test3_DW.Integrator_IC_LOADING_d0 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S562>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_lz = 0;\r\n    test3_DW.Integrator_IC_LOADING_mg = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S574>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_dkv = 0;\r\n    test3_DW.Integrator_IC_LOADING_e3 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S580>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_bq = 0;\r\n    test3_DW.Integrator_IC_LOADING_ns = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S586>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_pb = 0;\r\n    test3_DW.Integrator_IC_LOADING_hp = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S592>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_ew = 0;\r\n    test3_DW.Integrator_IC_LOADING_a0 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S598>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_pl = 0;\r\n    test3_DW.Integrator_IC_LOADING_bo = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S604>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_mu = 0;\r\n    test3_DW.Integrator_IC_LOADING_kq = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S610>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_e4 = 0;\r\n    test3_DW.Integrator_IC_LOADING_h2 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S616>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_jl = 0;\r\n    test3_DW.Integrator_IC_LOADING_kkm = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S622>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_cx = 0;\r\n    test3_DW.Integrator_IC_LOADING_bz = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S628>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_mm = 0;\r\n    test3_DW.Integrator_IC_LOADING_o1 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S640>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_pg = 0;\r\n    test3_DW.Integrator_IC_LOADING_fcd = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S646>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_md = 0;\r\n    test3_DW.Integrator_IC_LOADING_bp = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S652>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_bf = 0;\r\n    test3_DW.Integrator_IC_LOADING_ad = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S658>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_fam = 0;\r\n    test3_DW.Integrator_IC_LOADING_kv = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S664>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_g2 = 0;\r\n    test3_DW.Integrator_IC_LOADING_h20 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S670>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_ou = 0;\r\n    test3_DW.Integrator_IC_LOADING_d04 = 1U;\r\n\r\n    /* InitializeConditions for DiscreteIntegrator: '<S676>/Integrator' */\r\n    test3_DW.Integrator_PrevResetState_k5 = 0;\r\n    test3_DW.Integrator_IC_LOADING_jn = 1U;\r\n\r\n    /* SystemInitialize for Atomic SubSystem: '<Root>/Current_Limit' */\r\n    /* InitializeConditions for RateLimiter: '<S99>/Rate Limiter1' */\r\n    test3_DW.PrevY = 100.0F;\r\n\r\n    /* Start for MATLABSystem: '<S99>/Moving Average' */\r\n    test3_DW.obj.matlabCodegenIsDeleted = true;\r\n    test3_DW.obj.isInitialized = 0L;\r\n    test3_DW.obj.NumChannels = -1L;\r\n    test3_DW.obj.matlabCodegenIsDeleted = false;\r\n    test3_DW.obj.isSetupComplete = false;\r\n    test3_DW.obj.isInitialized = 1L;\r\n    test3_DW.obj.NumChannels = 1L;\r\n    iobj_0 = &test3_DW.obj._pobj0;\r\n    iobj_0->isInitialized = 0L;\r\n    iobj_0->isInitialized = 0L;\r\n    test3_DW.obj.pStatistic = iobj_0;\r\n    test3_DW.obj.isSetupComplete = true;\r\n    test3_DW.obj.TunablePropsChanged = false;\r\n\r\n    /* InitializeConditions for MATLABSystem: '<S99>/Moving Average' */\r\n    iobj_0 = test3_DW.obj.pStatistic;\r\n    if (iobj_0->isInitialized == 1L) {\r\n      iobj_0->pCumSum = 0.0F;\r\n      for (i = 0; i < 11; i++) {\r\n        iobj_0->pCumSumRev[i] = 0.0F;\r\n      }\r\n\r\n      iobj_0->pCumRevIndex = 1.0F;\r\n      iobj_0->pModValueRev = 0.0F;\r\n    }\r\n\r\n    /* End of InitializeConditions for MATLABSystem: '<S99>/Moving Average' */\r\n    /* End of SystemInitialize for SubSystem: '<Root>/Current_Limit' */\r\n\r\n    /* SystemInitialize for Atomic SubSystem: '<Root>/BMS_Function' */\r\n    /* SystemInitialize for Chart: '<S97>/Chart' */\r\n    test3_DW.is_Balancing = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_BalancingON = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.temporalCounter_i4 = 0UL;\r\n    test3_DW.is_ChargerContactorState = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_CloseChgrContactors = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_OpenChgrContactors = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.temporalCounter_i5 = 0UL;\r\n    test3_DW.is_MonitorCellTemp = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_MonitorCellVoltage = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_MonitorCurrLim = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_MonitorFault_In = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_InverterContactorState = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_CloseInvtrContactors = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_OpenInvtrContactors = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.temporalCounter_i3 = 0UL;\r\n    test3_DW.is_MainStateMachine = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_Charginig = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.temporalCounter_i2 = 0UL;\r\n    test3_DW.is_test = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.temporalCounter_i1_h = 0UL;\r\n    test3_DW.is_active_c2_test3 = 0U;\r\n    test3_DW.FaultPresent = false;\r\n    test3_DW.InvtrCntctState = Open;\r\n    test3_DW.ChrgCntctState = Open;\r\n    test3_DW.DeltaCellVolt = 0.0F;\r\n    test3_DW.flgBalCompl = false;\r\n    test3_DW.PreContact = 0.0;\r\n\r\n    /* InitializeConditions for Sum: '<S679>/Add1' incorporates:\r\n     *  Chart: '<S97>/Chart'\r\n     *  Merge: '<S677>/ Merge '\r\n     * */\r\n    test3_B.ChargeCurrentReq = 0.0F;\r\n\r\n    /* SystemInitialize for Chart: '<S97>/Chart' incorporates:\r\n     *  Outport: '<Root>/Faults'\r\n     */\r\n    test3_Y.Faults_d.VoltSensor = false;\r\n    test3_Y.Faults_d.OverCurrent = false;\r\n    test3_Y.Faults_d.HighTemp = false;\r\n    test3_Y.Faults_d.LowTemp = false;\r\n    test3_Y.Faults_d.OverVolt = false;\r\n    test3_Y.Faults_d.UnderVolt = false;\r\n    test3_Y.Faults_d.Charger = false;\r\n    test3_Y.Faults_d.Inverter = false;\r\n    test3_Y.Faults_d.PreChargeFault = false;\r\n    test3_Y.Faults_d.OverDischargeCurrent = false;\r\n    test3_Y.Faults_d.OverChargeCurrent = false;\r\n    test3_Y.Faults_d.BalEn = false;\r\n    test3_Y.Faults_d.ShortCircuitFault = false;\r\n    test3_Y.Faults_d.BMBFault = false;\r\n    test3_Y.Faults_d.CurrentSensor = false;\r\n    test3_Y.Faults_d.MemoryFault = false;\r\n    test3_Y.Faults_d.InputPowerFault = false;\r\n    test3_Y.Faults_d.TempSensor = false;\r\n    test3_Y.Faults_d.CAN_VCU_Fault = false;\r\n    test3_Y.Faults_d.LowSOC = false;\r\n    test3_B.PreChargeRelayInvtrCmd = false;\r\n    test3_B.PosContactorInvtrCmd = false;\r\n    test3_B.NegContactorInvtrCmd = false;\r\n    test3_B.PosContactorChgrCmd = false;\r\n    test3_B.PreChargeRelayChgrCmd = false;\r\n    test3_B.NegContactorChgrCmd = false;\r\n    for (i = 0; i < 96; i++) {\r\n      test3_B.BalCmd[i] = false;\r\n    }\r\n\r\n    /* End of SystemInitialize for SubSystem: '<Root>/BMS_Function' */\r\n\r\n    /* SystemInitialize for Atomic SubSystem: '<Root>/RCTcc' */\r\n    test3_RCTcc_Init(&test3_B.RCTcc, &test3_DW.RCTcc);\r\n\r\n    /* End of SystemInitialize for SubSystem: '<Root>/RCTcc' */\r\n\r\n    /* SystemInitialize for Atomic SubSystem: '<Root>/CAN_VCU_Fault' */\r\n    /* SystemInitialize for Chart: '<S98>/Chart1' */\r\n    test3_DW.is_main_Task = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.temporalCounter_i1 = 0UL;\r\n    test3_DW.is_reseting_Counter = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_active_c5_test3 = 0U;\r\n\r\n    /* SystemInitialize for Chart: '<S98>/Chart' */\r\n    test3_DW.is_Static_Absent = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.is_Static_present = test3_IN_NO_ACTIVE_CHILD_k;\r\n    test3_DW.temporalCounter_i1_j = 0U;\r\n    test3_DW.is_active_c4_test3 = 0U;\r\n    test3_DW.is_c4_test3 = test3_IN_NO_ACTIVE_CHILD_k;\r\n\r\n    /* End of SystemInitialize for SubSystem: '<Root>/CAN_VCU_Fault' */\r\n\r\n    /* SystemInitialize for Inport: '<Root>/CellTemperatures' */\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage1);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage2);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage3);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage4);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage5);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage6);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage7);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage8);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage9);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage10);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage11);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage12);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage13);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage14);\r\n    test3_MovingAverage_Init(&test3_DW.MovingAverage15);\r\n  }\r\n}\r\n\r\n/* Model terminate function */\r\nvoid test3_terminate(void)\r\n{\r\n  g_dsp_internal_SlidingWindo_k_T *obj;\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage1);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage2);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage3);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage4);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage5);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage6);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage7);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage8);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage9);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage10);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage11);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage12);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage13);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage14);\r\n  test3_MovingAverage_Term(&test3_DW.MovingAverage15);\r\n\r\n  /* Terminate for Atomic SubSystem: '<Root>/Current_Limit' */\r\n  /* Terminate for MATLABSystem: '<S99>/Moving Average' */\r\n  if (!test3_DW.obj.matlabCodegenIsDeleted) {\r\n    test3_DW.obj.matlabCodegenIsDeleted = true;\r\n    if ((test3_DW.obj.isInitialized == 1L) && test3_DW.obj.isSetupComplete) {\r\n      obj = test3_DW.obj.pStatistic;\r\n      if (obj->isInitialized == 1L) {\r\n        obj->isInitialized = 2L;\r\n      }\r\n\r\n      test3_DW.obj.NumChannels = -1L;\r\n    }\r\n  }\r\n\r\n  /* End of Terminate for MATLABSystem: '<S99>/Moving Average' */\r\n  /* End of Terminate for SubSystem: '<Root>/Current_Limit' */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"test3.h","type":"header","group":"model","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: test3.h\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_test3_h_\r\n#define RTW_HEADER_test3_h_\r\n#ifndef test3_COMMON_INCLUDES_\r\n#define test3_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#endif                                 /* test3_COMMON_INCLUDES_ */\r\n\r\n#include \"test3_types.h\"\r\n#include \"RCTcc.h\"\r\n#include <stddef.h>\r\n#include <string.h>\r\n#include \"rtGetInf.h\"\r\n#include \"rt_nonfinite.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Block signals for system '<Root>/Moving Average' */\r\ntypedef struct {\r\n  real32_T ChargeCurrentLimit;         /* '<Root>/Moving Average' */\r\n} B_MovingAverage_test3_T;\r\n\r\n/* Block states (default storage) for system '<Root>/Moving Average' */\r\ntypedef struct {\r\n  dsp_simulink_MovingAverage_te_T obj; /* '<Root>/Moving Average' */\r\n  boolean_T objisempty;                /* '<Root>/Moving Average' */\r\n} DW_MovingAverage_test3_T;\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  real32_T TmpSignalConversionAtSFunctionI[96];\r\n  boolean_T BalCmd[96];                /* '<S97>/Chart' */\r\n  real32_T TmpSignalConversionAtSFunctio_g[16];\r\n  real32_T csumrev[11];\r\n  real_T d;\r\n  real32_T Probe[2];                   /* '<S101>/Probe' */\r\n  real32_T Probe_l[2];                 /* '<S167>/Probe' */\r\n  real32_T Probe_i[2];                 /* '<S233>/Probe' */\r\n  real32_T Probe_o[2];                 /* '<S299>/Probe' */\r\n  real32_T Probe_ii[2];                /* '<S365>/Probe' */\r\n  real32_T Probe_e[2];                 /* '<S431>/Probe' */\r\n  real32_T Probe_n[2];                 /* '<S497>/Probe' */\r\n  real32_T Probe_ng[2];                /* '<S563>/Probe' */\r\n  real32_T Probe_no[2];                /* '<S629>/Probe' */\r\n  real32_T Probe_b[2];                 /* '<S107>/Probe' */\r\n  real32_T Probe_j[2];                 /* '<S113>/Probe' */\r\n  real32_T Probe_os[2];                /* '<S119>/Probe' */\r\n  real32_T Probe_m[2];                 /* '<S125>/Probe' */\r\n  real32_T Probe_c[2];                 /* '<S131>/Probe' */\r\n  real32_T Probe_lt[2];                /* '<S137>/Probe' */\r\n  real32_T Probe_ik[2];                /* '<S143>/Probe' */\r\n  real32_T Probe_ct[2];                /* '<S149>/Probe' */\r\n  real32_T Probe_f[2];                 /* '<S155>/Probe' */\r\n  real32_T Probe_fp[2];                /* '<S161>/Probe' */\r\n  real32_T Probe_g[2];                 /* '<S173>/Probe' */\r\n  real32_T Probe_h[2];                 /* '<S179>/Probe' */\r\n  real32_T Probe_o4[2];                /* '<S185>/Probe' */\r\n  real32_T Probe_fc[2];                /* '<S191>/Probe' */\r\n  real32_T Probe_f1[2];                /* '<S197>/Probe' */\r\n  real32_T Probe_bf[2];                /* '<S203>/Probe' */\r\n  real32_T Probe_gu[2];                /* '<S209>/Probe' */\r\n  real32_T Probe_er[2];                /* '<S215>/Probe' */\r\n  real32_T Probe_hq[2];                /* '<S221>/Probe' */\r\n  real32_T Probe_md[2];                /* '<S227>/Probe' */\r\n  real32_T Probe_p[2];                 /* '<S239>/Probe' */\r\n  real32_T Probe_pe[2];                /* '<S245>/Probe' */\r\n  real32_T Probe_gb[2];                /* '<S251>/Probe' */\r\n  real32_T Probe_gs[2];                /* '<S257>/Probe' */\r\n  real32_T Probe_p1[2];                /* '<S263>/Probe' */\r\n  real32_T Probe_j0[2];                /* '<S269>/Probe' */\r\n  real32_T Probe_ib[2];                /* '<S275>/Probe' */\r\n  real32_T Probe_nm[2];                /* '<S281>/Probe' */\r\n  real32_T Probe_hh[2];                /* '<S287>/Probe' */\r\n  real32_T Probe_d[2];                 /* '<S293>/Probe' */\r\n  real32_T Probe_fv[2];                /* '<S305>/Probe' */\r\n  real32_T Probe_ij[2];                /* '<S311>/Probe' */\r\n  real32_T Probe_pk[2];                /* '<S317>/Probe' */\r\n  real32_T Probe_a[2];                 /* '<S323>/Probe' */\r\n  real32_T Probe_fpu[2];               /* '<S329>/Probe' */\r\n  real32_T Probe_m0[2];                /* '<S335>/Probe' */\r\n  real32_T Probe_mt[2];                /* '<S341>/Probe' */\r\n  real32_T Probe_fn[2];                /* '<S347>/Probe' */\r\n  real32_T Probe_op[2];                /* '<S353>/Probe' */\r\n  real32_T Probe_k[2];                 /* '<S359>/Probe' */\r\n  real32_T Probe_ll[2];                /* '<S371>/Probe' */\r\n  real32_T Probe_dm[2];                /* '<S377>/Probe' */\r\n  real32_T Probe_ba[2];                /* '<S383>/Probe' */\r\n  real32_T Probe_j0k[2];               /* '<S389>/Probe' */\r\n  real32_T Probe_gj[2];                /* '<S395>/Probe' */\r\n  real32_T Probe_po[2];                /* '<S401>/Probe' */\r\n  real32_T Probe_f2[2];                /* '<S407>/Probe' */\r\n  real32_T Probe_iz[2];                /* '<S413>/Probe' */\r\n  real32_T Probe_lv[2];                /* '<S419>/Probe' */\r\n  real32_T Probe_ms[2];                /* '<S425>/Probe' */\r\n  real32_T Probe_it[2];                /* '<S437>/Probe' */\r\n  real32_T Probe_cs[2];                /* '<S443>/Probe' */\r\n  real32_T Probe_pa[2];                /* '<S449>/Probe' */\r\n  real32_T Probe_oq[2];                /* '<S455>/Probe' */\r\n  real32_T Probe_hl[2];                /* '<S461>/Probe' */\r\n  real32_T Probe_hz[2];                /* '<S467>/Probe' */\r\n  real32_T Probe_be[2];                /* '<S473>/Probe' */\r\n  real32_T Probe_c2[2];                /* '<S479>/Probe' */\r\n  real32_T Probe_eq[2];                /* '<S485>/Probe' */\r\n  real32_T Probe_aj[2];                /* '<S491>/Probe' */\r\n  real32_T Probe_hs[2];                /* '<S503>/Probe' */\r\n  real32_T Probe_kp[2];                /* '<S509>/Probe' */\r\n  real32_T Probe_jn[2];                /* '<S515>/Probe' */\r\n  real32_T Probe_dh[2];                /* '<S521>/Probe' */\r\n  real32_T Probe_bg[2];                /* '<S527>/Probe' */\r\n  real32_T Probe_hb[2];                /* '<S533>/Probe' */\r\n  real32_T Probe_gk[2];                /* '<S539>/Probe' */\r\n  real32_T Probe_ny[2];                /* '<S545>/Probe' */\r\n  real32_T Probe_k0[2];                /* '<S551>/Probe' */\r\n  real32_T Probe_ic[2];                /* '<S557>/Probe' */\r\n  real32_T Probe_lg[2];                /* '<S569>/Probe' */\r\n  real32_T Probe_fh[2];                /* '<S575>/Probe' */\r\n  real32_T Probe_eh[2];                /* '<S581>/Probe' */\r\n  real32_T Probe_nl[2];                /* '<S587>/Probe' */\r\n  real32_T Probe_bo[2];                /* '<S593>/Probe' */\r\n  real32_T Probe_kb[2];                /* '<S599>/Probe' */\r\n  real32_T Probe_l3[2];                /* '<S605>/Probe' */\r\n  real32_T Probe_j0n[2];               /* '<S611>/Probe' */\r\n  real32_T Probe_pu[2];                /* '<S617>/Probe' */\r\n  real32_T Probe_jw[2];                /* '<S623>/Probe' */\r\n  real32_T Probe_g2[2];                /* '<S635>/Probe' */\r\n  real32_T Probe_opc[2];               /* '<S641>/Probe' */\r\n  real32_T Probe_lf[2];                /* '<S647>/Probe' */\r\n  real32_T Probe_m5[2];                /* '<S653>/Probe' */\r\n  real32_T Probe_da[2];                /* '<S659>/Probe' */\r\n  real32_T Probe_he[2];                /* '<S665>/Probe' */\r\n  real32_T Probe_ak[2];                /* '<S671>/Probe' */\r\n  real32_T ChargeCurrentReq;           /* '<S97>/Chart' */\r\n  real32_T cumRevIndex;\r\n  real32_T csum;\r\n  real32_T modValueRev;\r\n  real32_T z;\r\n  real32_T Max;                        /* '<S101>/Max' */\r\n  real32_T Saturation1;                /* '<S99>/Saturation1' */\r\n  real32_T f;\r\n  uint32_T qY;\r\n  int16_T i;\r\n  int16_T i_m;\r\n  int16_T i_c;\r\n  int16_T i_k;\r\n  int16_T i_cx;\r\n  int16_T i1;\r\n  boolean_T PreChargeRelayInvtrCmd;    /* '<S97>/Chart' */\r\n  boolean_T PosContactorInvtrCmd;      /* '<S97>/Chart' */\r\n  boolean_T NegContactorInvtrCmd;      /* '<S97>/Chart' */\r\n  boolean_T PosContactorChgrCmd;       /* '<S97>/Chart' */\r\n  boolean_T PreChargeRelayChgrCmd;     /* '<S97>/Chart' */\r\n  boolean_T NegContactorChgrCmd;       /* '<S97>/Chart' */\r\n  boolean_T Compare;                   /* '<S104>/Compare' */\r\n  boolean_T Compare_p;                 /* '<S170>/Compare' */\r\n  boolean_T Compare_h;                 /* '<S236>/Compare' */\r\n  boolean_T Compare_o;                 /* '<S302>/Compare' */\r\n  boolean_T Compare_k;                 /* '<S368>/Compare' */\r\n  boolean_T Compare_i;                 /* '<S434>/Compare' */\r\n  boolean_T Compare_e;                 /* '<S500>/Compare' */\r\n  boolean_T Compare_k5;                /* '<S566>/Compare' */\r\n  boolean_T Compare_l;                 /* '<S632>/Compare' */\r\n  boolean_T Compare_iz;                /* '<S110>/Compare' */\r\n  boolean_T Compare_d;                 /* '<S116>/Compare' */\r\n  boolean_T Compare_a;                 /* '<S122>/Compare' */\r\n  boolean_T Compare_p3;                /* '<S128>/Compare' */\r\n  boolean_T Compare_o1;                /* '<S134>/Compare' */\r\n  boolean_T Compare_ob;                /* '<S140>/Compare' */\r\n  boolean_T Compare_n;                 /* '<S146>/Compare' */\r\n  boolean_T Compare_ii;                /* '<S152>/Compare' */\r\n  boolean_T Compare_b;                 /* '<S158>/Compare' */\r\n  boolean_T Compare_f;                 /* '<S164>/Compare' */\r\n  boolean_T Compare_km;                /* '<S176>/Compare' */\r\n  boolean_T Compare_in;                /* '<S182>/Compare' */\r\n  boolean_T Compare_lv;                /* '<S188>/Compare' */\r\n  boolean_T Compare_ed;                /* '<S194>/Compare' */\r\n  boolean_T Compare_el;                /* '<S200>/Compare' */\r\n  boolean_T Compare_kl;                /* '<S206>/Compare' */\r\n  boolean_T Compare_kf;                /* '<S212>/Compare' */\r\n  boolean_T Compare_hy;                /* '<S218>/Compare' */\r\n  boolean_T Compare_oi;                /* '<S224>/Compare' */\r\n  boolean_T Compare_i1;                /* '<S230>/Compare' */\r\n  boolean_T Compare_g;                 /* '<S242>/Compare' */\r\n  boolean_T Compare_ec;                /* '<S248>/Compare' */\r\n  boolean_T Compare_kh;                /* '<S254>/Compare' */\r\n  boolean_T Compare_go;                /* '<S260>/Compare' */\r\n  boolean_T Compare_hb;                /* '<S266>/Compare' */\r\n  boolean_T Compare_d2;                /* '<S272>/Compare' */\r\n  boolean_T Compare_kfs;               /* '<S278>/Compare' */\r\n  boolean_T Compare_b3;                /* '<S284>/Compare' */\r\n  boolean_T Compare_kd;                /* '<S290>/Compare' */\r\n  boolean_T Compare_dh;                /* '<S296>/Compare' */\r\n  boolean_T Compare_kv;                /* '<S308>/Compare' */\r\n  boolean_T Compare_of;                /* '<S314>/Compare' */\r\n  boolean_T Compare_bn;                /* '<S320>/Compare' */\r\n  boolean_T Compare_ix;                /* '<S326>/Compare' */\r\n  boolean_T Compare_gy;                /* '<S332>/Compare' */\r\n  boolean_T Compare_kz;                /* '<S338>/Compare' */\r\n  boolean_T Compare_hi;                /* '<S344>/Compare' */\r\n  boolean_T Compare_by;                /* '<S350>/Compare' */\r\n  boolean_T Compare_pn;                /* '<S356>/Compare' */\r\n  boolean_T Compare_ep;                /* '<S362>/Compare' */\r\n  boolean_T Compare_ev;                /* '<S374>/Compare' */\r\n  boolean_T Compare_bm;                /* '<S380>/Compare' */\r\n  boolean_T Compare_io;                /* '<S386>/Compare' */\r\n  boolean_T Compare_ax;                /* '<S392>/Compare' */\r\n  boolean_T Compare_gr;                /* '<S398>/Compare' */\r\n  boolean_T Compare_fw;                /* '<S404>/Compare' */\r\n  boolean_T Compare_j;                 /* '<S410>/Compare' */\r\n  boolean_T Compare_m;                 /* '<S416>/Compare' */\r\n  boolean_T Compare_ac;                /* '<S422>/Compare' */\r\n  boolean_T Compare_bo;                /* '<S428>/Compare' */\r\n  boolean_T Compare_ng;                /* '<S440>/Compare' */\r\n  boolean_T Compare_ht;                /* '<S446>/Compare' */\r\n  boolean_T Compare_im;                /* '<S452>/Compare' */\r\n  boolean_T Compare_hg;                /* '<S458>/Compare' */\r\n  boolean_T Compare_kj;                /* '<S464>/Compare' */\r\n  boolean_T Compare_id;                /* '<S470>/Compare' */\r\n  boolean_T Compare_ff;                /* '<S476>/Compare' */\r\n  boolean_T Compare_kn;                /* '<S482>/Compare' */\r\n  boolean_T Compare_g5;                /* '<S488>/Compare' */\r\n  boolean_T Compare_ou;                /* '<S494>/Compare' */\r\n  boolean_T Compare_eq;                /* '<S506>/Compare' */\r\n  boolean_T Compare_l5;                /* '<S512>/Compare' */\r\n  boolean_T Compare_fs;                /* '<S518>/Compare' */\r\n  boolean_T Compare_c;                 /* '<S524>/Compare' */\r\n  boolean_T Compare_f3;                /* '<S530>/Compare' */\r\n  boolean_T Compare_lf;                /* '<S536>/Compare' */\r\n  boolean_T Compare_bi;                /* '<S542>/Compare' */\r\n  boolean_T Compare_bnj;               /* '<S548>/Compare' */\r\n  B_RCTcc_test3_T RCTcc;               /* '<Root>/RCTcc' */\r\n  B_MovingAverage_test3_T MovingAverage9;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage8;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage7;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage6;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage5;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage4;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage3;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage2;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage15;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage14;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage13;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage12;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage11;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage10;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage1;/* '<Root>/Moving Average' */\r\n  B_MovingAverage_test3_T MovingAverage;/* '<Root>/Moving Average' */\r\n} B_test3_T;\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  dsp_simulink_MovingAverage_k_T obj;  /* '<S99>/Moving Average' */\r\n  real_T PreContact;                   /* '<S97>/Chart' */\r\n  real32_T Integrator_DSTATE;          /* '<S106>/Integrator' */\r\n  real32_T Integrator_DSTATE_a;        /* '<S172>/Integrator' */\r\n  real32_T Integrator_DSTATE_n;        /* '<S238>/Integrator' */\r\n  real32_T Integrator_DSTATE_b;        /* '<S304>/Integrator' */\r\n  real32_T Integrator_DSTATE_g;        /* '<S370>/Integrator' */\r\n  real32_T Integrator_DSTATE_i;        /* '<S436>/Integrator' */\r\n  real32_T Integrator_DSTATE_e;        /* '<S502>/Integrator' */\r\n  real32_T Integrator_DSTATE_id;       /* '<S568>/Integrator' */\r\n  real32_T Integrator_DSTATE_is;       /* '<S634>/Integrator' */\r\n  real32_T Integrator_DSTATE_j;        /* '<S112>/Integrator' */\r\n  real32_T Integrator_DSTATE_j1;       /* '<S118>/Integrator' */\r\n  real32_T Integrator_DSTATE_jr;       /* '<S124>/Integrator' */\r\n  real32_T Integrator_DSTATE_p;        /* '<S130>/Integrator' */\r\n  real32_T Integrator_DSTATE_o;        /* '<S136>/Integrator' */\r\n  real32_T Integrator_DSTATE_f;        /* '<S142>/Integrator' */\r\n  real32_T Integrator_DSTATE_fo;       /* '<S148>/Integrator' */\r\n  real32_T Integrator_DSTATE_i1;       /* '<S154>/Integrator' */\r\n  real32_T Integrator_DSTATE_fj;       /* '<S160>/Integrator' */\r\n  real32_T Integrator_DSTATE_d;        /* '<S166>/Integrator' */\r\n  real32_T Integrator_DSTATE_g5;       /* '<S178>/Integrator' */\r\n  real32_T Integrator_DSTATE_pf;       /* '<S184>/Integrator' */\r\n  real32_T Integrator_DSTATE_c;        /* '<S190>/Integrator' */\r\n  real32_T Integrator_DSTATE_m;        /* '<S196>/Integrator' */\r\n  real32_T Integrator_DSTATE_j2;       /* '<S202>/Integrator' */\r\n  real32_T Integrator_DSTATE_iz;       /* '<S208>/Integrator' */\r\n  real32_T Integrator_DSTATE_bh;       /* '<S214>/Integrator' */\r\n  real32_T Integrator_DSTATE_ji;       /* '<S220>/Integrator' */\r\n  real32_T Integrator_DSTATE_od;       /* '<S226>/Integrator' */\r\n  real32_T Integrator_DSTATE_oy;       /* '<S232>/Integrator' */\r\n  real32_T Integrator_DSTATE_nc;       /* '<S244>/Integrator' */\r\n  real32_T Integrator_DSTATE_c2;       /* '<S250>/Integrator' */\r\n  real32_T Integrator_DSTATE_pa;       /* '<S256>/Integrator' */\r\n  real32_T Integrator_DSTATE_ez;       /* '<S262>/Integrator' */\r\n  real32_T Integrator_DSTATE_bp;       /* '<S268>/Integrator' */\r\n  real32_T Integrator_DSTATE_h;        /* '<S274>/Integrator' */\r\n  real32_T Integrator_DSTATE_i4;       /* '<S280>/Integrator' */\r\n  real32_T Integrator_DSTATE_fp;       /* '<S286>/Integrator' */\r\n  real32_T Integrator_DSTATE_hx;       /* '<S292>/Integrator' */\r\n  real32_T Integrator_DSTATE_k;        /* '<S298>/Integrator' */\r\n  real32_T Integrator_DSTATE_g3;       /* '<S310>/Integrator' */\r\n  real32_T Integrator_DSTATE_h4;       /* '<S316>/Integrator' */\r\n  real32_T Integrator_DSTATE_e5;       /* '<S322>/Integrator' */\r\n  real32_T Integrator_DSTATE_oc;       /* '<S328>/Integrator' */\r\n  real32_T Integrator_DSTATE_n5;       /* '<S334>/Integrator' */\r\n  real32_T Integrator_DSTATE_do;       /* '<S340>/Integrator' */\r\n  real32_T Integrator_DSTATE_ds;       /* '<S346>/Integrator' */\r\n  real32_T Integrator_DSTATE_bv;       /* '<S352>/Integrator' */\r\n  real32_T Integrator_DSTATE_o3;       /* '<S358>/Integrator' */\r\n  real32_T Integrator_DSTATE_fg;       /* '<S364>/Integrator' */\r\n  real32_T Integrator_DSTATE_a4;       /* '<S376>/Integrator' */\r\n  real32_T Integrator_DSTATE_l;        /* '<S382>/Integrator' */\r\n  real32_T Integrator_DSTATE_eo;       /* '<S388>/Integrator' */\r\n  real32_T Integrator_DSTATE_cl;       /* '<S394>/Integrator' */\r\n  real32_T Integrator_DSTATE_bs;       /* '<S400>/Integrator' */\r\n  real32_T Integrator_DSTATE_e2;       /* '<S406>/Integrator' */\r\n  real32_T Integrator_DSTATE_lr;       /* '<S412>/Integrator' */\r\n  real32_T Integrator_DSTATE_gx;       /* '<S418>/Integrator' */\r\n  real32_T Integrator_DSTATE_nu;       /* '<S424>/Integrator' */\r\n  real32_T Integrator_DSTATE_az;       /* '<S430>/Integrator' */\r\n  real32_T Integrator_DSTATE_kc;       /* '<S442>/Integrator' */\r\n  real32_T Integrator_DSTATE_mc;       /* '<S448>/Integrator' */\r\n  real32_T Integrator_DSTATE_nm;       /* '<S454>/Integrator' */\r\n  real32_T Integrator_DSTATE_po;       /* '<S460>/Integrator' */\r\n  real32_T Integrator_DSTATE_bt;       /* '<S466>/Integrator' */\r\n  real32_T Integrator_DSTATE_jt;       /* '<S472>/Integrator' */\r\n  real32_T Integrator_DSTATE_dc;       /* '<S478>/Integrator' */\r\n  real32_T Integrator_DSTATE_pb;       /* '<S484>/Integrator' */\r\n  real32_T Integrator_DSTATE_oe;       /* '<S490>/Integrator' */\r\n  real32_T Integrator_DSTATE_al;       /* '<S496>/Integrator' */\r\n  real32_T Integrator_DSTATE_cx;       /* '<S508>/Integrator' */\r\n  real32_T Integrator_DSTATE_cr;       /* '<S514>/Integrator' */\r\n  real32_T Integrator_DSTATE_p3;       /* '<S520>/Integrator' */\r\n  real32_T Integrator_DSTATE_kv;       /* '<S526>/Integrator' */\r\n  real32_T Integrator_DSTATE_ed;       /* '<S532>/Integrator' */\r\n  real32_T Integrator_DSTATE_fu;       /* '<S538>/Integrator' */\r\n  real32_T Integrator_DSTATE_he;       /* '<S544>/Integrator' */\r\n  real32_T Integrator_DSTATE_ot;       /* '<S550>/Integrator' */\r\n  real32_T Integrator_DSTATE_my;       /* '<S556>/Integrator' */\r\n  real32_T Integrator_DSTATE_lt;       /* '<S562>/Integrator' */\r\n  real32_T Integrator_DSTATE_pd;       /* '<S574>/Integrator' */\r\n  real32_T Integrator_DSTATE_en;       /* '<S580>/Integrator' */\r\n  real32_T Integrator_DSTATE_ix;       /* '<S586>/Integrator' */\r\n  real32_T Integrator_DSTATE_hg;       /* '<S592>/Integrator' */\r\n  real32_T Integrator_DSTATE_fm;       /* '<S598>/Integrator' */\r\n  real32_T Integrator_DSTATE_ok;       /* '<S604>/Integrator' */\r\n  real32_T Integrator_DSTATE_ns;       /* '<S610>/Integrator' */\r\n  real32_T Integrator_DSTATE_ga;       /* '<S616>/Integrator' */\r\n  real32_T Integrator_DSTATE_dsn;      /* '<S622>/Integrator' */\r\n  real32_T Integrator_DSTATE_pc;       /* '<S628>/Integrator' */\r\n  real32_T Integrator_DSTATE_eg;       /* '<S640>/Integrator' */\r\n  real32_T Integrator_DSTATE_jx;       /* '<S646>/Integrator' */\r\n  real32_T Integrator_DSTATE_im;       /* '<S652>/Integrator' */\r\n  real32_T Integrator_DSTATE_hp;       /* '<S658>/Integrator' */\r\n  real32_T Integrator_DSTATE_aq;       /* '<S664>/Integrator' */\r\n  real32_T Integrator_DSTATE_lx;       /* '<S670>/Integrator' */\r\n  real32_T Integrator_DSTATE_l5;       /* '<S676>/Integrator' */\r\n  real32_T DiscreteTimeIntegrator_DSTATE;/* '<S679>/Discrete-Time Integrator' */\r\n  real32_T DiscreteTimeIntegrator_DSTATE_d;/* '<S678>/Discrete-Time Integrator' */\r\n  real32_T PrevY;                      /* '<S99>/Rate Limiter1' */\r\n  real32_T DeltaCellVolt;              /* '<S97>/Chart' */\r\n  int32_T durationCounter_1;           /* '<S97>/Chart' */\r\n  int32_T durationCounter_1_p;         /* '<S97>/Chart' */\r\n  int32_T durationCounter_2;           /* '<S97>/Chart' */\r\n  int32_T durationCounter_1_k;         /* '<S97>/Chart' */\r\n  int32_T durationCounter_2_a;         /* '<S97>/Chart' */\r\n  int32_T durationCounter_3;           /* '<S97>/Chart' */\r\n  int32_T durationCounter_4;           /* '<S97>/Chart' */\r\n  int32_T durationCounter_5;           /* '<S97>/Chart' */\r\n  int32_T durationCounter_6;           /* '<S97>/Chart' */\r\n  int32_T durationCounter_7;           /* '<S97>/Chart' */\r\n  int32_T durationCounter_8;           /* '<S97>/Chart' */\r\n  int32_T durationCounter_1_c;         /* '<S97>/Chart' */\r\n  int32_T durationCounter_2_aa;        /* '<S97>/Chart' */\r\n  int32_T durationCounter_1_p1;        /* '<S97>/Chart' */\r\n  int32_T durationCounter_2_h;         /* '<S97>/Chart' */\r\n  uint32_T m_bpIndex[2];               /* '<S99>/Rdc' */\r\n  uint32_T m_bpIndex_g;                /* '<S683>/Rdc1' */\r\n  uint32_T temporalCounter_i1;         /* '<S98>/Chart1' */\r\n  uint32_T temporalCounter_i1_h;       /* '<S97>/Chart' */\r\n  uint32_T temporalCounter_i2;         /* '<S97>/Chart' */\r\n  uint32_T temporalCounter_i3;         /* '<S97>/Chart' */\r\n  uint32_T temporalCounter_i4;         /* '<S97>/Chart' */\r\n  uint32_T temporalCounter_i5;         /* '<S97>/Chart' */\r\n  int16_T Integrator_PrevResetState;   /* '<S106>/Integrator' */\r\n  int16_T Integrator_PrevResetState_p; /* '<S172>/Integrator' */\r\n  int16_T Integrator_PrevResetState_o; /* '<S238>/Integrator' */\r\n  int16_T Integrator_PrevResetState_e; /* '<S304>/Integrator' */\r\n  int16_T Integrator_PrevResetState_oy;/* '<S370>/Integrator' */\r\n  int16_T Integrator_PrevResetState_c; /* '<S436>/Integrator' */\r\n  int16_T Integrator_PrevResetState_a; /* '<S502>/Integrator' */\r\n  int16_T Integrator_PrevResetState_ch;/* '<S568>/Integrator' */\r\n  int16_T Integrator_PrevResetState_h; /* '<S634>/Integrator' */\r\n  int16_T Integrator_PrevResetState_i; /* '<S112>/Integrator' */\r\n  int16_T Integrator_PrevResetState_iy;/* '<S118>/Integrator' */\r\n  int16_T Integrator_PrevResetState_g; /* '<S124>/Integrator' */\r\n  int16_T Integrator_PrevResetState_f; /* '<S130>/Integrator' */\r\n  int16_T Integrator_PrevResetState_fi;/* '<S136>/Integrator' */\r\n  int16_T Integrator_PrevResetState_fm;/* '<S142>/Integrator' */\r\n  int16_T Integrator_PrevResetState_gh;/* '<S148>/Integrator' */\r\n  int16_T Integrator_PrevResetState_b; /* '<S154>/Integrator' */\r\n  int16_T Integrator_PrevResetState_bl;/* '<S160>/Integrator' */\r\n  int16_T Integrator_PrevResetState_fie;/* '<S166>/Integrator' */\r\n  int16_T Integrator_PrevResetState_d; /* '<S178>/Integrator' */\r\n  int16_T Integrator_PrevResetState_k; /* '<S184>/Integrator' */\r\n  int16_T Integrator_PrevResetState_n; /* '<S190>/Integrator' */\r\n  int16_T Integrator_PrevResetState_fz;/* '<S196>/Integrator' */\r\n  int16_T Integrator_PrevResetState_m; /* '<S202>/Integrator' */\r\n  int16_T Integrator_PrevResetState_hi;/* '<S208>/Integrator' */\r\n  int16_T Integrator_PrevResetState_fy;/* '<S214>/Integrator' */\r\n  int16_T Integrator_PrevResetState_ok;/* '<S220>/Integrator' */\r\n  int16_T Integrator_PrevResetState_j; /* '<S226>/Integrator' */\r\n  int16_T Integrator_PrevResetState_dh;/* '<S232>/Integrator' */\r\n  int16_T Integrator_PrevResetState_ne;/* '<S244>/Integrator' */\r\n  int16_T Integrator_PrevResetState_fl;/* '<S250>/Integrator' */\r\n  int16_T Integrator_PrevResetState_ib;/* '<S256>/Integrator' */\r\n  int16_T Integrator_PrevResetState_dz;/* '<S262>/Integrator' */\r\n  int16_T Integrator_PrevResetState_l; /* '<S268>/Integrator' */\r\n  int16_T Integrator_PrevResetState_hm;/* '<S274>/Integrator' */\r\n  int16_T Integrator_PrevResetState_lo;/* '<S280>/Integrator' */\r\n  int16_T Integrator_PrevResetState_dk;/* '<S286>/Integrator' */\r\n  int16_T Integrator_PrevResetState_es;/* '<S292>/Integrator' */\r\n  int16_T Integrator_PrevResetState_fu;/* '<S298>/Integrator' */\r\n  int16_T Integrator_PrevResetState_cv;/* '<S310>/Integrator' */\r\n  int16_T Integrator_PrevResetState_ke;/* '<S316>/Integrator' */\r\n  int16_T Integrator_PrevResetState_fa;/* '<S322>/Integrator' */\r\n  int16_T Integrator_PrevResetState_h4;/* '<S328>/Integrator' */\r\n  int16_T Integrator_PrevResetState_io;/* '<S334>/Integrator' */\r\n  int16_T Integrator_PrevResetState_k3;/* '<S340>/Integrator' */\r\n  int16_T Integrator_PrevResetState_ed;/* '<S346>/Integrator' */\r\n  int16_T Integrator_PrevResetState_on;/* '<S352>/Integrator' */\r\n  int16_T Integrator_PrevResetState_cb;/* '<S358>/Integrator' */\r\n  int16_T Integrator_PrevResetState_fj;/* '<S364>/Integrator' */\r\n  int16_T Integrator_PrevResetState_kk;/* '<S376>/Integrator' */\r\n  int16_T Integrator_PrevResetState_ie;/* '<S382>/Integrator' */\r\n  int16_T Integrator_PrevResetState_pp;/* '<S388>/Integrator' */\r\n  int16_T Integrator_PrevResetState_ox;/* '<S394>/Integrator' */\r\n  int16_T Integrator_PrevResetState_fn;/* '<S400>/Integrator' */\r\n  int16_T Integrator_PrevResetState_mk;/* '<S406>/Integrator' */\r\n  int16_T Integrator_PrevResetState_m1;/* '<S412>/Integrator' */\r\n  int16_T Integrator_PrevResetState_dzx;/* '<S418>/Integrator' */\r\n  int16_T Integrator_PrevResetState_m5;/* '<S424>/Integrator' */\r\n  int16_T Integrator_PrevResetState_nv;/* '<S430>/Integrator' */\r\n  int16_T Integrator_PrevResetState_bw;/* '<S442>/Integrator' */\r\n  int16_T Integrator_PrevResetState_m3;/* '<S448>/Integrator' */\r\n  int16_T Integrator_PrevResetState_ei;/* '<S454>/Integrator' */\r\n  int16_T Integrator_PrevResetState_o1;/* '<S460>/Integrator' */\r\n  int16_T Integrator_PrevResetState_gv;/* '<S466>/Integrator' */\r\n  int16_T Integrator_PrevResetState_hf;/* '<S472>/Integrator' */\r\n  int16_T Integrator_PrevResetState_gs;/* '<S478>/Integrator' */\r\n  int16_T Integrator_PrevResetState_fyk;/* '<S484>/Integrator' */\r\n  int16_T Integrator_PrevResetState_kl;/* '<S490>/Integrator' */\r\n  int16_T Integrator_PrevResetState_nk;/* '<S496>/Integrator' */\r\n  int16_T Integrator_PrevResetState_ln;/* '<S508>/Integrator' */\r\n  int16_T Integrator_PrevResetState_oe;/* '<S514>/Integrator' */\r\n  int16_T Integrator_PrevResetState_hu;/* '<S520>/Integrator' */\r\n  int16_T Integrator_PrevResetState_mr;/* '<S526>/Integrator' */\r\n  int16_T Integrator_PrevResetState_ec;/* '<S532>/Integrator' */\r\n  int16_T Integrator_PrevResetState_bb;/* '<S538>/Integrator' */\r\n  int16_T Integrator_PrevResetState_n1;/* '<S544>/Integrator' */\r\n  int16_T Integrator_PrevResetState_iw;/* '<S550>/Integrator' */\r\n  int16_T Integrator_PrevResetState_gg;/* '<S556>/Integrator' */\r\n  int16_T Integrator_PrevResetState_lz;/* '<S562>/Integrator' */\r\n  int16_T Integrator_PrevResetState_dkv;/* '<S574>/Integrator' */\r\n  int16_T Integrator_PrevResetState_bq;/* '<S580>/Integrator' */\r\n  int16_T Integrator_PrevResetState_pb;/* '<S586>/Integrator' */\r\n  int16_T Integrator_PrevResetState_ew;/* '<S592>/Integrator' */\r\n  int16_T Integrator_PrevResetState_pl;/* '<S598>/Integrator' */\r\n  int16_T Integrator_PrevResetState_mu;/* '<S604>/Integrator' */\r\n  int16_T Integrator_PrevResetState_e4;/* '<S610>/Integrator' */\r\n  int16_T Integrator_PrevResetState_jl;/* '<S616>/Integrator' */\r\n  int16_T Integrator_PrevResetState_cx;/* '<S622>/Integrator' */\r\n  int16_T Integrator_PrevResetState_mm;/* '<S628>/Integrator' */\r\n  int16_T Integrator_PrevResetState_pg;/* '<S640>/Integrator' */\r\n  int16_T Integrator_PrevResetState_md;/* '<S646>/Integrator' */\r\n  int16_T Integrator_PrevResetState_bf;/* '<S652>/Integrator' */\r\n  int16_T Integrator_PrevResetState_fam;/* '<S658>/Integrator' */\r\n  int16_T Integrator_PrevResetState_g2;/* '<S664>/Integrator' */\r\n  int16_T Integrator_PrevResetState_ou;/* '<S670>/Integrator' */\r\n  int16_T Integrator_PrevResetState_k5;/* '<S676>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING;      /* '<S106>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_p;    /* '<S172>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_g;    /* '<S238>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_j;    /* '<S304>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_h;    /* '<S370>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_k;    /* '<S436>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_o;    /* '<S502>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_g2;   /* '<S568>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_d;    /* '<S634>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_pv;   /* '<S112>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_m;    /* '<S118>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_hr;   /* '<S124>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_i;    /* '<S130>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_e;    /* '<S136>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_df;   /* '<S142>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_ip;   /* '<S148>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_a;    /* '<S154>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_ic;   /* '<S160>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_ab;   /* '<S166>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_oe;   /* '<S178>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_op;   /* '<S184>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_hg;   /* '<S190>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_l;    /* '<S196>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_iw;   /* '<S202>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_ky;   /* '<S208>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_b;    /* '<S214>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_gu;   /* '<S220>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_ao;   /* '<S226>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_f;    /* '<S232>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_c;    /* '<S244>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_fc;   /* '<S250>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_bd;   /* '<S256>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_n;    /* '<S262>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_aoc;  /* '<S268>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_kr;   /* '<S274>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_n3;   /* '<S280>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_pe;   /* '<S286>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_gb;   /* '<S292>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_gg;   /* '<S298>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_bb;   /* '<S310>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_p4;   /* '<S316>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_mv;   /* '<S322>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_j1;   /* '<S328>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_az;   /* '<S334>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_bm;   /* '<S340>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_c0;   /* '<S346>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_p0;   /* '<S352>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_j3;   /* '<S358>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_hf;   /* '<S364>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_ms;   /* '<S376>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_me;   /* '<S382>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_oq;   /* '<S388>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_kz;   /* '<S394>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_b1;   /* '<S400>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_j3b;  /* '<S406>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_ar;   /* '<S412>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_abx;  /* '<S418>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_cy;   /* '<S424>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_b2;   /* '<S430>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_br;   /* '<S442>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_du;   /* '<S448>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_c3;   /* '<S454>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_lm;   /* '<S460>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_kk;   /* '<S466>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_km;   /* '<S472>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_oex;  /* '<S478>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_kp;   /* '<S484>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_ew;   /* '<S490>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_bk;   /* '<S496>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_j31;  /* '<S508>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_mo;   /* '<S514>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_abf;  /* '<S520>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_ho;   /* '<S526>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_ph;   /* '<S532>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_da;   /* '<S538>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_cg;   /* '<S544>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_d3;   /* '<S550>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_d0;   /* '<S556>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_mg;   /* '<S562>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_e3;   /* '<S574>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_ns;   /* '<S580>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_hp;   /* '<S586>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_a0;   /* '<S592>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_bo;   /* '<S598>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_kq;   /* '<S604>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_h2;   /* '<S610>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_kkm;  /* '<S616>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_bz;   /* '<S622>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_o1;   /* '<S628>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_fcd;  /* '<S640>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_bp;   /* '<S646>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_ad;   /* '<S652>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_kv;   /* '<S658>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_h20;  /* '<S664>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_d04;  /* '<S670>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING_jn;   /* '<S676>/Integrator' */\r\n  uint16_T is_active_c5_test3;         /* '<S98>/Chart1' */\r\n  uint16_T is_reseting_Counter;        /* '<S98>/Chart1' */\r\n  uint16_T is_main_Task;               /* '<S98>/Chart1' */\r\n  uint16_T is_active_c4_test3;         /* '<S98>/Chart' */\r\n  uint16_T is_c4_test3;                /* '<S98>/Chart' */\r\n  uint16_T is_Static_present;          /* '<S98>/Chart' */\r\n  uint16_T is_Static_Absent;           /* '<S98>/Chart' */\r\n  uint16_T temporalCounter_i1_j;       /* '<S98>/Chart' */\r\n  uint16_T is_active_c2_test3;         /* '<S97>/Chart' */\r\n  uint16_T is_test;                    /* '<S97>/Chart' */\r\n  uint16_T is_MainStateMachine;        /* '<S97>/Chart' */\r\n  uint16_T is_Charginig;               /* '<S97>/Chart' */\r\n  uint16_T is_MonitorFault_In;         /* '<S97>/Chart' */\r\n  uint16_T is_MonitorCurrLim;          /* '<S97>/Chart' */\r\n  uint16_T is_MonitorCellVoltage;      /* '<S97>/Chart' */\r\n  uint16_T is_MonitorCellTemp;         /* '<S97>/Chart' */\r\n  uint16_T is_InverterContactorState;  /* '<S97>/Chart' */\r\n  uint16_T is_OpenInvtrContactors;     /* '<S97>/Chart' */\r\n  uint16_T is_CloseInvtrContactors;    /* '<S97>/Chart' */\r\n  uint16_T is_Balancing;               /* '<S97>/Chart' */\r\n  uint16_T is_BalancingON;             /* '<S97>/Chart' */\r\n  uint16_T is_ChargerContactorState;   /* '<S97>/Chart' */\r\n  uint16_T is_OpenChgrContactors;      /* '<S97>/Chart' */\r\n  uint16_T is_CloseChgrContactors;     /* '<S97>/Chart' */\r\n  boolean_T FaultPresent;              /* '<S97>/Chart' */\r\n  boolean_T flgBalCompl;               /* '<S97>/Chart' */\r\n  Contact InvtrCntctState;             /* '<S97>/Chart' */\r\n  Contact ChrgCntctState;              /* '<S97>/Chart' */\r\n  DW_RCTcc_test3_T RCTcc;              /* '<Root>/RCTcc' */\r\n  DW_MovingAverage_test3_T MovingAverage9;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage8;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage7;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage6;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage5;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage4;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage3;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage2;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage15;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage14;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage13;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage12;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage11;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage10;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage1;/* '<Root>/Moving Average' */\r\n  DW_MovingAverage_test3_T MovingAverage;/* '<Root>/Moving Average' */\r\n} DW_test3_T;\r\n\r\n/* Constant parameters (default storage) */\r\ntypedef struct {\r\n  /* Computed Parameter: Rdc_tableData\r\n   * Referenced by: '<S99>/Rdc'\r\n   */\r\n  real32_T Rdc_tableData[77];\r\n\r\n  /* Computed Parameter: Rdc_bp01Data\r\n   * Referenced by: '<S99>/Rdc'\r\n   */\r\n  real32_T Rdc_bp01Data[11];\r\n\r\n  /* Computed Parameter: Rdc_bp02Data\r\n   * Referenced by: '<S99>/Rdc'\r\n   */\r\n  real32_T Rdc_bp02Data[7];\r\n\r\n  /* Computed Parameter: HighTempChrgCurrentLim_tableDat\r\n   * Referenced by: '<S682>/HighTempChrgCurrentLim'\r\n   */\r\n  real32_T HighTempChrgCurrentLim_tableDat[91];\r\n\r\n  /* Pooled Parameter (Expression: 273.15+[-30:1:60])\r\n   * Referenced by:\r\n   *   '<S682>/HighTempChrgCurrentLim'\r\n   *   '<S682>/LowTempDchrgCurrentLim'\r\n   */\r\n  real32_T pooled12[91];\r\n\r\n  /* Computed Parameter: LowTempDchrgCurrentLim_tableDat\r\n   * Referenced by: '<S682>/LowTempDchrgCurrentLim'\r\n   */\r\n  real32_T LowTempDchrgCurrentLim_tableDat[91];\r\n\r\n  /* Computed Parameter: Rdc1_tableData\r\n   * Referenced by: '<S683>/Rdc1'\r\n   */\r\n  real32_T Rdc1_tableData[7];\r\n\r\n  /* Computed Parameter: Rdc1_bp01Data\r\n   * Referenced by: '<S683>/Rdc1'\r\n   */\r\n  real32_T Rdc1_bp01Data[7];\r\n\r\n  /* Computed Parameter: HighTempDchrgCurrentLim_tableDa\r\n   * Referenced by: '<S683>/HighTempDchrgCurrentLim'\r\n   */\r\n  real32_T HighTempDchrgCurrentLim_tableDa[101];\r\n\r\n  /* Pooled Parameter (Expression: 273.15+[-30:1:70])\r\n   * Referenced by:\r\n   *   '<S683>/HighTempDchrgCurrentLim'\r\n   *   '<S683>/LowTempDchrgCurrentLim'\r\n   */\r\n  real32_T pooled13[101];\r\n\r\n  /* Computed Parameter: LowTempDchrgCurrentLim_tableD_j\r\n   * Referenced by: '<S683>/LowTempDchrgCurrentLim'\r\n   */\r\n  real32_T LowTempDchrgCurrentLim_tableD_j[101];\r\n\r\n  /* Computed Parameter: uDLookupTable3_tableData\r\n   * Referenced by: '<S100>/1-D Lookup Table3'\r\n   */\r\n  real32_T uDLookupTable3_tableData[21];\r\n\r\n  /* Computed Parameter: uDLookupTable3_bp01Data\r\n   * Referenced by: '<S100>/1-D Lookup Table3'\r\n   */\r\n  real32_T uDLookupTable3_bp01Data[21];\r\n\r\n  /* Computed Parameter: Rdc_maxIndex\r\n   * Referenced by: '<S99>/Rdc'\r\n   */\r\n  uint32_T Rdc_maxIndex[2];\r\n} ConstP_test3_T;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real32_T BMBFault;                   /* '<Root>/BMBFault' */\r\n  real32_T CurrentSensorFault;         /* '<Root>/CurrentSensorFault' */\r\n  real32_T InputPowerFault;            /* '<Root>/InputPowerFault' */\r\n  real32_T MemoryFault;                /* '<Root>/MemoryFault' */\r\n  real32_T ShortCircuitFault;          /* '<Root>/ShortCircuitFault' */\r\n  real32_T Reset;                      /* '<Root>/Reset' */\r\n  real32_T Vout_Invtr;                 /* '<Root>/Vout_Invtr' */\r\n  real32_T Vout_Chgr;                  /* '<Root>/Vout_Chgr' */\r\n  real32_T Pack_Current;               /* '<Root>/Pack_Current' */\r\n  real32_T Pack_Voltage;               /* '<Root>/Pack_Voltage' */\r\n  real32_T Req_FastCh;                 /* '<Root>/Req_FastCh' */\r\n  uint16_T ReqSOC;                     /* '<Root>/ReqSOC' */\r\n  real32_T SOC;                        /* '<Root>/SOC' */\r\n  SRE StateRequest;                    /* '<Root>/StateRequest' */\r\n  real32_T CellVoltages[96];           /* '<Root>/CellVoltages' */\r\n  real32_T CellTemperatures[16];       /* '<Root>/CellTemperatures' */\r\n  real32_T Req_Power;                  /* '<Root>/Req_Power' */\r\n  real32_T Req_Current;                /* '<Root>/Req_Current' */\r\n  uint16_T CAN_VCU_Flag;               /* '<Root>/CAN_VCU_Flag' */\r\n  uint16_T CAN_VCU_cnt_rst;            /* '<Root>/CAN_VCU_cnt_rst' */\r\n} ExtU_test3_T;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  Faults Faults_d;                     /* '<Root>/Faults' */\r\n  real32_T DischargeCurrentLimit;      /* '<Root>/DischargeCurrentLimit' */\r\n  real32_T ChargeCurrentLimit;         /* '<Root>/ChargeCurrentLimit' */\r\n  BMS_State_Enum BMS_State;            /* '<Root>/BMS_State' */\r\n  ChargeCU_ModeReq ChargeModeReq;      /* '<Root>/ChargeModeReq' */\r\n  real32_T ChargeCurrentReq;           /* '<Root>/ChargeCurrentReq' */\r\n  real32_T ChargeVoltReq;              /* '<Root>/ChargeVoltReq' */\r\n  boolean_T PreChargeRelay;            /* '<Root>/PreChargeRelay' */\r\n  boolean_T PosContactor;              /* '<Root>/PosContactor' */\r\n  boolean_T NegContactor;              /* '<Root>/NegContactor' */\r\n  real32_T RCT;                        /* '<Root>/RCT' */\r\n  real32_T RD;                         /* '<Root>/RD' */\r\n  boolean_T BalCmd[96];                /* '<Root>/BalCmd' */\r\n  real_T led;                          /* '<Root>/led' */\r\n  real32_T RDT;                        /* '<Root>/RDT' */\r\n  real32_T MaxCellVolt;                /* '<Root>/MaxCellVolt' */\r\n  real32_T MinCellVolt;                /* '<Root>/MinCellVolt' */\r\n  real32_T MaxCellTemp;                /* '<Root>/MaxCellTemp' */\r\n  real32_T MinCellTemp;                /* '<Root>/MinCellTemp' */\r\n  real32_T DC_Link_Volt;               /* '<Root>/DC_Link_Volt' */\r\n  real32_T PackCurrent;                /* '<Root>/PackCurrent' */\r\n  boolean_T Contactor_State;           /* '<Root>/Contactor_State' */\r\n  real_T Charge_Complete;              /* '<Root>/Charge_Complete' */\r\n  real_T SOC_New;                      /* '<Root>/SOC_New' */\r\n  real32_T SumOfVoltages;              /* '<Root>/SumOfVoltages' */\r\n  real32_T Fake_SOC;                   /* '<Root>/Fake_SOC' */\r\n  uint16_T CAN_VCU_Fault_Static_Absent;\r\n                                      /* '<Root>/CAN_VCU_Fault_Static_Absent' */\r\n  uint16_T CAN_VCU_Fault_MSG_Dynmc_Abst;\r\n                                     /* '<Root>/CAN_VCU_Fault_MSG_Dynmc_Abst' */\r\n  uint32_T CAN_VCU_Fault_MSG_Dynmc_Abst_Cn;\r\n                                 /* '<Root>/CAN_VCU_Fault_MSG_Dynmc_Abst_Cnt' */\r\n  real32_T Add_Mileage_Range;          /* '<Root>/Add_Mileage_Range' */\r\n  boolean_T MaxCellCmd[96];            /* '<Root>/MaxCellCmd' */\r\n  boolean_T MinCellCmd[96];            /* '<Root>/MinCellCmd' */\r\n  boolean_T MaxTempCmd[16];            /* '<Root>/MaxTempCmd' */\r\n  boolean_T MinTempCmd[16];            /* '<Root>/MinTempCmd' */\r\n  real32_T DischargeCurrentReq;        /* '<Root>/DischargeCurrentReq' */\r\n} ExtY_test3_T;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_test3_T {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block signals (default storage) */\r\nextern B_test3_T test3_B;\r\n\r\n/* Block states (default storage) */\r\nextern DW_test3_T test3_DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU_test3_T test3_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY_test3_T test3_Y;\r\n\r\n/* Constant parameters (default storage) */\r\nextern const ConstP_test3_T test3_ConstP;\r\n\r\n/* Model entry point functions */\r\nextern void test3_initialize(void);\r\nextern void test3_step(void);\r\nextern void test3_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_test3_T *const test3_M;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S678>/Display' : Unused code path elimination\r\n * Block '<S678>/Display2' : Unused code path elimination\r\n * Block '<S678>/Display3' : Unused code path elimination\r\n * Block '<S678>/Display4' : Unused code path elimination\r\n * Block '<S678>/Display5' : Unused code path elimination\r\n * Block '<S678>/Scope' : Unused code path elimination\r\n * Block '<S678>/Scope2' : Unused code path elimination\r\n * Block '<S679>/Display' : Unused code path elimination\r\n * Block '<S679>/Display1' : Unused code path elimination\r\n * Block '<S679>/Display2' : Unused code path elimination\r\n * Block '<S679>/Display3' : Unused code path elimination\r\n * Block '<S679>/Display4' : Unused code path elimination\r\n * Block '<S679>/Display5' : Unused code path elimination\r\n * Block '<S679>/Display6' : Unused code path elimination\r\n * Block '<S679>/Scope' : Unused code path elimination\r\n * Block '<S679>/Scope2' : Unused code path elimination\r\n * Block '<S683>/Add' : Unused code path elimination\r\n * Block '<S683>/Display' : Unused code path elimination\r\n * Block '<S683>/Display1' : Unused code path elimination\r\n * Block '<S683>/Display2' : Unused code path elimination\r\n * Block '<S683>/Display3' : Unused code path elimination\r\n * Block '<S683>/Gain' : Unused code path elimination\r\n * Block '<S683>/Gain1' : Unused code path elimination\r\n * Block '<S99>/Display' : Unused code path elimination\r\n * Block '<S99>/Display1' : Unused code path elimination\r\n * Block '<S99>/Display2' : Unused code path elimination\r\n * Block '<S99>/Rac' : Unused code path elimination\r\n * Block '<S100>/Display' : Unused code path elimination\r\n * Block '<S100>/Display1' : Unused code path elimination\r\n * Block '<S100>/Display18' : Unused code path elimination\r\n * Block '<S100>/Display2' : Unused code path elimination\r\n * Block '<S100>/Display3' : Unused code path elimination\r\n * Block '<S100>/Display4' : Unused code path elimination\r\n * Block '<S100>/Display6' : Unused code path elimination\r\n * Block '<S100>/NEDC_F1' : Unused code path elimination\r\n * Block '<S100>/Scope16' : Unused code path elimination\r\n * Block '<S100>/Scope17' : Unused code path elimination\r\n * Block '<S100>/Scope3' : Unused code path elimination\r\n * Block '<S106>/Saturation' : Eliminated Saturate block\r\n * Block '<S1>/K' : Eliminated nontunable gain of 1\r\n * Block '<S112>/Saturation' : Eliminated Saturate block\r\n * Block '<S2>/K' : Eliminated nontunable gain of 1\r\n * Block '<S118>/Saturation' : Eliminated Saturate block\r\n * Block '<S3>/K' : Eliminated nontunable gain of 1\r\n * Block '<S124>/Saturation' : Eliminated Saturate block\r\n * Block '<S4>/K' : Eliminated nontunable gain of 1\r\n * Block '<S130>/Saturation' : Eliminated Saturate block\r\n * Block '<S5>/K' : Eliminated nontunable gain of 1\r\n * Block '<S136>/Saturation' : Eliminated Saturate block\r\n * Block '<S6>/K' : Eliminated nontunable gain of 1\r\n * Block '<S142>/Saturation' : Eliminated Saturate block\r\n * Block '<S7>/K' : Eliminated nontunable gain of 1\r\n * Block '<S148>/Saturation' : Eliminated Saturate block\r\n * Block '<S8>/K' : Eliminated nontunable gain of 1\r\n * Block '<S154>/Saturation' : Eliminated Saturate block\r\n * Block '<S9>/K' : Eliminated nontunable gain of 1\r\n * Block '<S160>/Saturation' : Eliminated Saturate block\r\n * Block '<S10>/K' : Eliminated nontunable gain of 1\r\n * Block '<S166>/Saturation' : Eliminated Saturate block\r\n * Block '<S11>/K' : Eliminated nontunable gain of 1\r\n * Block '<S172>/Saturation' : Eliminated Saturate block\r\n * Block '<S12>/K' : Eliminated nontunable gain of 1\r\n * Block '<S178>/Saturation' : Eliminated Saturate block\r\n * Block '<S13>/K' : Eliminated nontunable gain of 1\r\n * Block '<S184>/Saturation' : Eliminated Saturate block\r\n * Block '<S14>/K' : Eliminated nontunable gain of 1\r\n * Block '<S190>/Saturation' : Eliminated Saturate block\r\n * Block '<S15>/K' : Eliminated nontunable gain of 1\r\n * Block '<S196>/Saturation' : Eliminated Saturate block\r\n * Block '<S16>/K' : Eliminated nontunable gain of 1\r\n * Block '<S202>/Saturation' : Eliminated Saturate block\r\n * Block '<S17>/K' : Eliminated nontunable gain of 1\r\n * Block '<S208>/Saturation' : Eliminated Saturate block\r\n * Block '<S18>/K' : Eliminated nontunable gain of 1\r\n * Block '<S214>/Saturation' : Eliminated Saturate block\r\n * Block '<S19>/K' : Eliminated nontunable gain of 1\r\n * Block '<S220>/Saturation' : Eliminated Saturate block\r\n * Block '<S20>/K' : Eliminated nontunable gain of 1\r\n * Block '<S226>/Saturation' : Eliminated Saturate block\r\n * Block '<S21>/K' : Eliminated nontunable gain of 1\r\n * Block '<S232>/Saturation' : Eliminated Saturate block\r\n * Block '<S22>/K' : Eliminated nontunable gain of 1\r\n * Block '<S238>/Saturation' : Eliminated Saturate block\r\n * Block '<S23>/K' : Eliminated nontunable gain of 1\r\n * Block '<S244>/Saturation' : Eliminated Saturate block\r\n * Block '<S24>/K' : Eliminated nontunable gain of 1\r\n * Block '<S250>/Saturation' : Eliminated Saturate block\r\n * Block '<S25>/K' : Eliminated nontunable gain of 1\r\n * Block '<S256>/Saturation' : Eliminated Saturate block\r\n * Block '<S26>/K' : Eliminated nontunable gain of 1\r\n * Block '<S262>/Saturation' : Eliminated Saturate block\r\n * Block '<S27>/K' : Eliminated nontunable gain of 1\r\n * Block '<S268>/Saturation' : Eliminated Saturate block\r\n * Block '<S28>/K' : Eliminated nontunable gain of 1\r\n * Block '<S274>/Saturation' : Eliminated Saturate block\r\n * Block '<S29>/K' : Eliminated nontunable gain of 1\r\n * Block '<S280>/Saturation' : Eliminated Saturate block\r\n * Block '<S30>/K' : Eliminated nontunable gain of 1\r\n * Block '<S286>/Saturation' : Eliminated Saturate block\r\n * Block '<S31>/K' : Eliminated nontunable gain of 1\r\n * Block '<S292>/Saturation' : Eliminated Saturate block\r\n * Block '<S32>/K' : Eliminated nontunable gain of 1\r\n * Block '<S298>/Saturation' : Eliminated Saturate block\r\n * Block '<S33>/K' : Eliminated nontunable gain of 1\r\n * Block '<S304>/Saturation' : Eliminated Saturate block\r\n * Block '<S34>/K' : Eliminated nontunable gain of 1\r\n * Block '<S310>/Saturation' : Eliminated Saturate block\r\n * Block '<S35>/K' : Eliminated nontunable gain of 1\r\n * Block '<S316>/Saturation' : Eliminated Saturate block\r\n * Block '<S36>/K' : Eliminated nontunable gain of 1\r\n * Block '<S322>/Saturation' : Eliminated Saturate block\r\n * Block '<S37>/K' : Eliminated nontunable gain of 1\r\n * Block '<S328>/Saturation' : Eliminated Saturate block\r\n * Block '<S38>/K' : Eliminated nontunable gain of 1\r\n * Block '<S334>/Saturation' : Eliminated Saturate block\r\n * Block '<S39>/K' : Eliminated nontunable gain of 1\r\n * Block '<S340>/Saturation' : Eliminated Saturate block\r\n * Block '<S40>/K' : Eliminated nontunable gain of 1\r\n * Block '<S346>/Saturation' : Eliminated Saturate block\r\n * Block '<S41>/K' : Eliminated nontunable gain of 1\r\n * Block '<S352>/Saturation' : Eliminated Saturate block\r\n * Block '<S42>/K' : Eliminated nontunable gain of 1\r\n * Block '<S358>/Saturation' : Eliminated Saturate block\r\n * Block '<S43>/K' : Eliminated nontunable gain of 1\r\n * Block '<S364>/Saturation' : Eliminated Saturate block\r\n * Block '<S44>/K' : Eliminated nontunable gain of 1\r\n * Block '<S370>/Saturation' : Eliminated Saturate block\r\n * Block '<S45>/K' : Eliminated nontunable gain of 1\r\n * Block '<S376>/Saturation' : Eliminated Saturate block\r\n * Block '<S46>/K' : Eliminated nontunable gain of 1\r\n * Block '<S382>/Saturation' : Eliminated Saturate block\r\n * Block '<S47>/K' : Eliminated nontunable gain of 1\r\n * Block '<S388>/Saturation' : Eliminated Saturate block\r\n * Block '<S48>/K' : Eliminated nontunable gain of 1\r\n * Block '<S394>/Saturation' : Eliminated Saturate block\r\n * Block '<S49>/K' : Eliminated nontunable gain of 1\r\n * Block '<S400>/Saturation' : Eliminated Saturate block\r\n * Block '<S50>/K' : Eliminated nontunable gain of 1\r\n * Block '<S406>/Saturation' : Eliminated Saturate block\r\n * Block '<S51>/K' : Eliminated nontunable gain of 1\r\n * Block '<S412>/Saturation' : Eliminated Saturate block\r\n * Block '<S52>/K' : Eliminated nontunable gain of 1\r\n * Block '<S418>/Saturation' : Eliminated Saturate block\r\n * Block '<S53>/K' : Eliminated nontunable gain of 1\r\n * Block '<S424>/Saturation' : Eliminated Saturate block\r\n * Block '<S54>/K' : Eliminated nontunable gain of 1\r\n * Block '<S430>/Saturation' : Eliminated Saturate block\r\n * Block '<S55>/K' : Eliminated nontunable gain of 1\r\n * Block '<S436>/Saturation' : Eliminated Saturate block\r\n * Block '<S56>/K' : Eliminated nontunable gain of 1\r\n * Block '<S442>/Saturation' : Eliminated Saturate block\r\n * Block '<S57>/K' : Eliminated nontunable gain of 1\r\n * Block '<S448>/Saturation' : Eliminated Saturate block\r\n * Block '<S58>/K' : Eliminated nontunable gain of 1\r\n * Block '<S454>/Saturation' : Eliminated Saturate block\r\n * Block '<S59>/K' : Eliminated nontunable gain of 1\r\n * Block '<S460>/Saturation' : Eliminated Saturate block\r\n * Block '<S60>/K' : Eliminated nontunable gain of 1\r\n * Block '<S466>/Saturation' : Eliminated Saturate block\r\n * Block '<S61>/K' : Eliminated nontunable gain of 1\r\n * Block '<S472>/Saturation' : Eliminated Saturate block\r\n * Block '<S62>/K' : Eliminated nontunable gain of 1\r\n * Block '<S478>/Saturation' : Eliminated Saturate block\r\n * Block '<S63>/K' : Eliminated nontunable gain of 1\r\n * Block '<S484>/Saturation' : Eliminated Saturate block\r\n * Block '<S64>/K' : Eliminated nontunable gain of 1\r\n * Block '<S490>/Saturation' : Eliminated Saturate block\r\n * Block '<S65>/K' : Eliminated nontunable gain of 1\r\n * Block '<S496>/Saturation' : Eliminated Saturate block\r\n * Block '<S66>/K' : Eliminated nontunable gain of 1\r\n * Block '<S502>/Saturation' : Eliminated Saturate block\r\n * Block '<S67>/K' : Eliminated nontunable gain of 1\r\n * Block '<S508>/Saturation' : Eliminated Saturate block\r\n * Block '<S68>/K' : Eliminated nontunable gain of 1\r\n * Block '<S514>/Saturation' : Eliminated Saturate block\r\n * Block '<S69>/K' : Eliminated nontunable gain of 1\r\n * Block '<S520>/Saturation' : Eliminated Saturate block\r\n * Block '<S70>/K' : Eliminated nontunable gain of 1\r\n * Block '<S526>/Saturation' : Eliminated Saturate block\r\n * Block '<S71>/K' : Eliminated nontunable gain of 1\r\n * Block '<S532>/Saturation' : Eliminated Saturate block\r\n * Block '<S72>/K' : Eliminated nontunable gain of 1\r\n * Block '<S538>/Saturation' : Eliminated Saturate block\r\n * Block '<S73>/K' : Eliminated nontunable gain of 1\r\n * Block '<S544>/Saturation' : Eliminated Saturate block\r\n * Block '<S74>/K' : Eliminated nontunable gain of 1\r\n * Block '<S550>/Saturation' : Eliminated Saturate block\r\n * Block '<S75>/K' : Eliminated nontunable gain of 1\r\n * Block '<S556>/Saturation' : Eliminated Saturate block\r\n * Block '<S76>/K' : Eliminated nontunable gain of 1\r\n * Block '<S562>/Saturation' : Eliminated Saturate block\r\n * Block '<S77>/K' : Eliminated nontunable gain of 1\r\n * Block '<S568>/Saturation' : Eliminated Saturate block\r\n * Block '<S78>/K' : Eliminated nontunable gain of 1\r\n * Block '<S574>/Saturation' : Eliminated Saturate block\r\n * Block '<S79>/K' : Eliminated nontunable gain of 1\r\n * Block '<S580>/Saturation' : Eliminated Saturate block\r\n * Block '<S80>/K' : Eliminated nontunable gain of 1\r\n * Block '<S586>/Saturation' : Eliminated Saturate block\r\n * Block '<S81>/K' : Eliminated nontunable gain of 1\r\n * Block '<S592>/Saturation' : Eliminated Saturate block\r\n * Block '<S82>/K' : Eliminated nontunable gain of 1\r\n * Block '<S598>/Saturation' : Eliminated Saturate block\r\n * Block '<S83>/K' : Eliminated nontunable gain of 1\r\n * Block '<S604>/Saturation' : Eliminated Saturate block\r\n * Block '<S84>/K' : Eliminated nontunable gain of 1\r\n * Block '<S610>/Saturation' : Eliminated Saturate block\r\n * Block '<S85>/K' : Eliminated nontunable gain of 1\r\n * Block '<S616>/Saturation' : Eliminated Saturate block\r\n * Block '<S86>/K' : Eliminated nontunable gain of 1\r\n * Block '<S622>/Saturation' : Eliminated Saturate block\r\n * Block '<S87>/K' : Eliminated nontunable gain of 1\r\n * Block '<S628>/Saturation' : Eliminated Saturate block\r\n * Block '<S88>/K' : Eliminated nontunable gain of 1\r\n * Block '<S634>/Saturation' : Eliminated Saturate block\r\n * Block '<S89>/K' : Eliminated nontunable gain of 1\r\n * Block '<S640>/Saturation' : Eliminated Saturate block\r\n * Block '<S90>/K' : Eliminated nontunable gain of 1\r\n * Block '<S646>/Saturation' : Eliminated Saturate block\r\n * Block '<S91>/K' : Eliminated nontunable gain of 1\r\n * Block '<S652>/Saturation' : Eliminated Saturate block\r\n * Block '<S92>/K' : Eliminated nontunable gain of 1\r\n * Block '<S658>/Saturation' : Eliminated Saturate block\r\n * Block '<S93>/K' : Eliminated nontunable gain of 1\r\n * Block '<S664>/Saturation' : Eliminated Saturate block\r\n * Block '<S94>/K' : Eliminated nontunable gain of 1\r\n * Block '<S670>/Saturation' : Eliminated Saturate block\r\n * Block '<S95>/K' : Eliminated nontunable gain of 1\r\n * Block '<S676>/Saturation' : Eliminated Saturate block\r\n * Block '<S96>/K' : Eliminated nontunable gain of 1\r\n * Block '<S678>/KI' : Eliminated nontunable gain of 1\r\n * Block '<S679>/KI' : Eliminated nontunable gain of 1\r\n * Block '<S691>/Saturation' : Eliminated Saturate block\r\n * Block '<S684>/K' : Eliminated nontunable gain of 1\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'test3'\r\n * '<S1>'   : 'test3/1'\r\n * '<S2>'   : 'test3/10'\r\n * '<S3>'   : 'test3/11'\r\n * '<S4>'   : 'test3/12'\r\n * '<S5>'   : 'test3/13'\r\n * '<S6>'   : 'test3/14'\r\n * '<S7>'   : 'test3/15'\r\n * '<S8>'   : 'test3/16'\r\n * '<S9>'   : 'test3/17'\r\n * '<S10>'  : 'test3/18'\r\n * '<S11>'  : 'test3/19'\r\n * '<S12>'  : 'test3/2'\r\n * '<S13>'  : 'test3/20'\r\n * '<S14>'  : 'test3/21'\r\n * '<S15>'  : 'test3/22'\r\n * '<S16>'  : 'test3/23'\r\n * '<S17>'  : 'test3/24'\r\n * '<S18>'  : 'test3/25'\r\n * '<S19>'  : 'test3/26'\r\n * '<S20>'  : 'test3/27'\r\n * '<S21>'  : 'test3/28'\r\n * '<S22>'  : 'test3/29'\r\n * '<S23>'  : 'test3/3'\r\n * '<S24>'  : 'test3/30'\r\n * '<S25>'  : 'test3/31'\r\n * '<S26>'  : 'test3/32'\r\n * '<S27>'  : 'test3/33'\r\n * '<S28>'  : 'test3/34'\r\n * '<S29>'  : 'test3/35'\r\n * '<S30>'  : 'test3/36'\r\n * '<S31>'  : 'test3/37'\r\n * '<S32>'  : 'test3/38'\r\n * '<S33>'  : 'test3/39'\r\n * '<S34>'  : 'test3/4'\r\n * '<S35>'  : 'test3/40'\r\n * '<S36>'  : 'test3/41'\r\n * '<S37>'  : 'test3/42'\r\n * '<S38>'  : 'test3/43'\r\n * '<S39>'  : 'test3/44'\r\n * '<S40>'  : 'test3/45'\r\n * '<S41>'  : 'test3/46'\r\n * '<S42>'  : 'test3/47'\r\n * '<S43>'  : 'test3/48'\r\n * '<S44>'  : 'test3/49'\r\n * '<S45>'  : 'test3/5'\r\n * '<S46>'  : 'test3/50'\r\n * '<S47>'  : 'test3/51'\r\n * '<S48>'  : 'test3/52'\r\n * '<S49>'  : 'test3/53'\r\n * '<S50>'  : 'test3/54'\r\n * '<S51>'  : 'test3/55'\r\n * '<S52>'  : 'test3/56'\r\n * '<S53>'  : 'test3/57'\r\n * '<S54>'  : 'test3/58'\r\n * '<S55>'  : 'test3/59'\r\n * '<S56>'  : 'test3/6'\r\n * '<S57>'  : 'test3/60'\r\n * '<S58>'  : 'test3/61'\r\n * '<S59>'  : 'test3/62'\r\n * '<S60>'  : 'test3/63'\r\n * '<S61>'  : 'test3/64'\r\n * '<S62>'  : 'test3/65'\r\n * '<S63>'  : 'test3/66'\r\n * '<S64>'  : 'test3/67'\r\n * '<S65>'  : 'test3/68'\r\n * '<S66>'  : 'test3/69'\r\n * '<S67>'  : 'test3/7'\r\n * '<S68>'  : 'test3/70'\r\n * '<S69>'  : 'test3/71'\r\n * '<S70>'  : 'test3/72'\r\n * '<S71>'  : 'test3/73'\r\n * '<S72>'  : 'test3/74'\r\n * '<S73>'  : 'test3/75'\r\n * '<S74>'  : 'test3/76'\r\n * '<S75>'  : 'test3/77'\r\n * '<S76>'  : 'test3/78'\r\n * '<S77>'  : 'test3/79'\r\n * '<S78>'  : 'test3/8'\r\n * '<S79>'  : 'test3/80'\r\n * '<S80>'  : 'test3/81'\r\n * '<S81>'  : 'test3/82'\r\n * '<S82>'  : 'test3/83'\r\n * '<S83>'  : 'test3/84'\r\n * '<S84>'  : 'test3/85'\r\n * '<S85>'  : 'test3/86'\r\n * '<S86>'  : 'test3/87'\r\n * '<S87>'  : 'test3/88'\r\n * '<S88>'  : 'test3/89'\r\n * '<S89>'  : 'test3/9'\r\n * '<S90>'  : 'test3/90'\r\n * '<S91>'  : 'test3/91'\r\n * '<S92>'  : 'test3/92'\r\n * '<S93>'  : 'test3/93'\r\n * '<S94>'  : 'test3/94'\r\n * '<S95>'  : 'test3/95'\r\n * '<S96>'  : 'test3/96'\r\n * '<S97>'  : 'test3/BMS_Function'\r\n * '<S98>'  : 'test3/CAN_VCU_Fault'\r\n * '<S99>'  : 'test3/Current_Limit'\r\n * '<S100>' : 'test3/RCTcc'\r\n * '<S101>' : 'test3/1/Enable//disable time constant'\r\n * '<S102>' : 'test3/1/Initialization'\r\n * '<S103>' : 'test3/1/Integrator (Discrete or Continuous)'\r\n * '<S104>' : 'test3/1/Enable//disable time constant/Compare To Zero'\r\n * '<S105>' : 'test3/1/Initialization/Init_u'\r\n * '<S106>' : 'test3/1/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S107>' : 'test3/10/Enable//disable time constant'\r\n * '<S108>' : 'test3/10/Initialization'\r\n * '<S109>' : 'test3/10/Integrator (Discrete or Continuous)'\r\n * '<S110>' : 'test3/10/Enable//disable time constant/Compare To Zero'\r\n * '<S111>' : 'test3/10/Initialization/Init_u'\r\n * '<S112>' : 'test3/10/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S113>' : 'test3/11/Enable//disable time constant'\r\n * '<S114>' : 'test3/11/Initialization'\r\n * '<S115>' : 'test3/11/Integrator (Discrete or Continuous)'\r\n * '<S116>' : 'test3/11/Enable//disable time constant/Compare To Zero'\r\n * '<S117>' : 'test3/11/Initialization/Init_u'\r\n * '<S118>' : 'test3/11/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S119>' : 'test3/12/Enable//disable time constant'\r\n * '<S120>' : 'test3/12/Initialization'\r\n * '<S121>' : 'test3/12/Integrator (Discrete or Continuous)'\r\n * '<S122>' : 'test3/12/Enable//disable time constant/Compare To Zero'\r\n * '<S123>' : 'test3/12/Initialization/Init_u'\r\n * '<S124>' : 'test3/12/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S125>' : 'test3/13/Enable//disable time constant'\r\n * '<S126>' : 'test3/13/Initialization'\r\n * '<S127>' : 'test3/13/Integrator (Discrete or Continuous)'\r\n * '<S128>' : 'test3/13/Enable//disable time constant/Compare To Zero'\r\n * '<S129>' : 'test3/13/Initialization/Init_u'\r\n * '<S130>' : 'test3/13/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S131>' : 'test3/14/Enable//disable time constant'\r\n * '<S132>' : 'test3/14/Initialization'\r\n * '<S133>' : 'test3/14/Integrator (Discrete or Continuous)'\r\n * '<S134>' : 'test3/14/Enable//disable time constant/Compare To Zero'\r\n * '<S135>' : 'test3/14/Initialization/Init_u'\r\n * '<S136>' : 'test3/14/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S137>' : 'test3/15/Enable//disable time constant'\r\n * '<S138>' : 'test3/15/Initialization'\r\n * '<S139>' : 'test3/15/Integrator (Discrete or Continuous)'\r\n * '<S140>' : 'test3/15/Enable//disable time constant/Compare To Zero'\r\n * '<S141>' : 'test3/15/Initialization/Init_u'\r\n * '<S142>' : 'test3/15/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S143>' : 'test3/16/Enable//disable time constant'\r\n * '<S144>' : 'test3/16/Initialization'\r\n * '<S145>' : 'test3/16/Integrator (Discrete or Continuous)'\r\n * '<S146>' : 'test3/16/Enable//disable time constant/Compare To Zero'\r\n * '<S147>' : 'test3/16/Initialization/Init_u'\r\n * '<S148>' : 'test3/16/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S149>' : 'test3/17/Enable//disable time constant'\r\n * '<S150>' : 'test3/17/Initialization'\r\n * '<S151>' : 'test3/17/Integrator (Discrete or Continuous)'\r\n * '<S152>' : 'test3/17/Enable//disable time constant/Compare To Zero'\r\n * '<S153>' : 'test3/17/Initialization/Init_u'\r\n * '<S154>' : 'test3/17/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S155>' : 'test3/18/Enable//disable time constant'\r\n * '<S156>' : 'test3/18/Initialization'\r\n * '<S157>' : 'test3/18/Integrator (Discrete or Continuous)'\r\n * '<S158>' : 'test3/18/Enable//disable time constant/Compare To Zero'\r\n * '<S159>' : 'test3/18/Initialization/Init_u'\r\n * '<S160>' : 'test3/18/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S161>' : 'test3/19/Enable//disable time constant'\r\n * '<S162>' : 'test3/19/Initialization'\r\n * '<S163>' : 'test3/19/Integrator (Discrete or Continuous)'\r\n * '<S164>' : 'test3/19/Enable//disable time constant/Compare To Zero'\r\n * '<S165>' : 'test3/19/Initialization/Init_u'\r\n * '<S166>' : 'test3/19/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S167>' : 'test3/2/Enable//disable time constant'\r\n * '<S168>' : 'test3/2/Initialization'\r\n * '<S169>' : 'test3/2/Integrator (Discrete or Continuous)'\r\n * '<S170>' : 'test3/2/Enable//disable time constant/Compare To Zero'\r\n * '<S171>' : 'test3/2/Initialization/Init_u'\r\n * '<S172>' : 'test3/2/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S173>' : 'test3/20/Enable//disable time constant'\r\n * '<S174>' : 'test3/20/Initialization'\r\n * '<S175>' : 'test3/20/Integrator (Discrete or Continuous)'\r\n * '<S176>' : 'test3/20/Enable//disable time constant/Compare To Zero'\r\n * '<S177>' : 'test3/20/Initialization/Init_u'\r\n * '<S178>' : 'test3/20/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S179>' : 'test3/21/Enable//disable time constant'\r\n * '<S180>' : 'test3/21/Initialization'\r\n * '<S181>' : 'test3/21/Integrator (Discrete or Continuous)'\r\n * '<S182>' : 'test3/21/Enable//disable time constant/Compare To Zero'\r\n * '<S183>' : 'test3/21/Initialization/Init_u'\r\n * '<S184>' : 'test3/21/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S185>' : 'test3/22/Enable//disable time constant'\r\n * '<S186>' : 'test3/22/Initialization'\r\n * '<S187>' : 'test3/22/Integrator (Discrete or Continuous)'\r\n * '<S188>' : 'test3/22/Enable//disable time constant/Compare To Zero'\r\n * '<S189>' : 'test3/22/Initialization/Init_u'\r\n * '<S190>' : 'test3/22/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S191>' : 'test3/23/Enable//disable time constant'\r\n * '<S192>' : 'test3/23/Initialization'\r\n * '<S193>' : 'test3/23/Integrator (Discrete or Continuous)'\r\n * '<S194>' : 'test3/23/Enable//disable time constant/Compare To Zero'\r\n * '<S195>' : 'test3/23/Initialization/Init_u'\r\n * '<S196>' : 'test3/23/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S197>' : 'test3/24/Enable//disable time constant'\r\n * '<S198>' : 'test3/24/Initialization'\r\n * '<S199>' : 'test3/24/Integrator (Discrete or Continuous)'\r\n * '<S200>' : 'test3/24/Enable//disable time constant/Compare To Zero'\r\n * '<S201>' : 'test3/24/Initialization/Init_u'\r\n * '<S202>' : 'test3/24/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S203>' : 'test3/25/Enable//disable time constant'\r\n * '<S204>' : 'test3/25/Initialization'\r\n * '<S205>' : 'test3/25/Integrator (Discrete or Continuous)'\r\n * '<S206>' : 'test3/25/Enable//disable time constant/Compare To Zero'\r\n * '<S207>' : 'test3/25/Initialization/Init_u'\r\n * '<S208>' : 'test3/25/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S209>' : 'test3/26/Enable//disable time constant'\r\n * '<S210>' : 'test3/26/Initialization'\r\n * '<S211>' : 'test3/26/Integrator (Discrete or Continuous)'\r\n * '<S212>' : 'test3/26/Enable//disable time constant/Compare To Zero'\r\n * '<S213>' : 'test3/26/Initialization/Init_u'\r\n * '<S214>' : 'test3/26/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S215>' : 'test3/27/Enable//disable time constant'\r\n * '<S216>' : 'test3/27/Initialization'\r\n * '<S217>' : 'test3/27/Integrator (Discrete or Continuous)'\r\n * '<S218>' : 'test3/27/Enable//disable time constant/Compare To Zero'\r\n * '<S219>' : 'test3/27/Initialization/Init_u'\r\n * '<S220>' : 'test3/27/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S221>' : 'test3/28/Enable//disable time constant'\r\n * '<S222>' : 'test3/28/Initialization'\r\n * '<S223>' : 'test3/28/Integrator (Discrete or Continuous)'\r\n * '<S224>' : 'test3/28/Enable//disable time constant/Compare To Zero'\r\n * '<S225>' : 'test3/28/Initialization/Init_u'\r\n * '<S226>' : 'test3/28/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S227>' : 'test3/29/Enable//disable time constant'\r\n * '<S228>' : 'test3/29/Initialization'\r\n * '<S229>' : 'test3/29/Integrator (Discrete or Continuous)'\r\n * '<S230>' : 'test3/29/Enable//disable time constant/Compare To Zero'\r\n * '<S231>' : 'test3/29/Initialization/Init_u'\r\n * '<S232>' : 'test3/29/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S233>' : 'test3/3/Enable//disable time constant'\r\n * '<S234>' : 'test3/3/Initialization'\r\n * '<S235>' : 'test3/3/Integrator (Discrete or Continuous)'\r\n * '<S236>' : 'test3/3/Enable//disable time constant/Compare To Zero'\r\n * '<S237>' : 'test3/3/Initialization/Init_u'\r\n * '<S238>' : 'test3/3/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S239>' : 'test3/30/Enable//disable time constant'\r\n * '<S240>' : 'test3/30/Initialization'\r\n * '<S241>' : 'test3/30/Integrator (Discrete or Continuous)'\r\n * '<S242>' : 'test3/30/Enable//disable time constant/Compare To Zero'\r\n * '<S243>' : 'test3/30/Initialization/Init_u'\r\n * '<S244>' : 'test3/30/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S245>' : 'test3/31/Enable//disable time constant'\r\n * '<S246>' : 'test3/31/Initialization'\r\n * '<S247>' : 'test3/31/Integrator (Discrete or Continuous)'\r\n * '<S248>' : 'test3/31/Enable//disable time constant/Compare To Zero'\r\n * '<S249>' : 'test3/31/Initialization/Init_u'\r\n * '<S250>' : 'test3/31/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S251>' : 'test3/32/Enable//disable time constant'\r\n * '<S252>' : 'test3/32/Initialization'\r\n * '<S253>' : 'test3/32/Integrator (Discrete or Continuous)'\r\n * '<S254>' : 'test3/32/Enable//disable time constant/Compare To Zero'\r\n * '<S255>' : 'test3/32/Initialization/Init_u'\r\n * '<S256>' : 'test3/32/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S257>' : 'test3/33/Enable//disable time constant'\r\n * '<S258>' : 'test3/33/Initialization'\r\n * '<S259>' : 'test3/33/Integrator (Discrete or Continuous)'\r\n * '<S260>' : 'test3/33/Enable//disable time constant/Compare To Zero'\r\n * '<S261>' : 'test3/33/Initialization/Init_u'\r\n * '<S262>' : 'test3/33/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S263>' : 'test3/34/Enable//disable time constant'\r\n * '<S264>' : 'test3/34/Initialization'\r\n * '<S265>' : 'test3/34/Integrator (Discrete or Continuous)'\r\n * '<S266>' : 'test3/34/Enable//disable time constant/Compare To Zero'\r\n * '<S267>' : 'test3/34/Initialization/Init_u'\r\n * '<S268>' : 'test3/34/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S269>' : 'test3/35/Enable//disable time constant'\r\n * '<S270>' : 'test3/35/Initialization'\r\n * '<S271>' : 'test3/35/Integrator (Discrete or Continuous)'\r\n * '<S272>' : 'test3/35/Enable//disable time constant/Compare To Zero'\r\n * '<S273>' : 'test3/35/Initialization/Init_u'\r\n * '<S274>' : 'test3/35/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S275>' : 'test3/36/Enable//disable time constant'\r\n * '<S276>' : 'test3/36/Initialization'\r\n * '<S277>' : 'test3/36/Integrator (Discrete or Continuous)'\r\n * '<S278>' : 'test3/36/Enable//disable time constant/Compare To Zero'\r\n * '<S279>' : 'test3/36/Initialization/Init_u'\r\n * '<S280>' : 'test3/36/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S281>' : 'test3/37/Enable//disable time constant'\r\n * '<S282>' : 'test3/37/Initialization'\r\n * '<S283>' : 'test3/37/Integrator (Discrete or Continuous)'\r\n * '<S284>' : 'test3/37/Enable//disable time constant/Compare To Zero'\r\n * '<S285>' : 'test3/37/Initialization/Init_u'\r\n * '<S286>' : 'test3/37/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S287>' : 'test3/38/Enable//disable time constant'\r\n * '<S288>' : 'test3/38/Initialization'\r\n * '<S289>' : 'test3/38/Integrator (Discrete or Continuous)'\r\n * '<S290>' : 'test3/38/Enable//disable time constant/Compare To Zero'\r\n * '<S291>' : 'test3/38/Initialization/Init_u'\r\n * '<S292>' : 'test3/38/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S293>' : 'test3/39/Enable//disable time constant'\r\n * '<S294>' : 'test3/39/Initialization'\r\n * '<S295>' : 'test3/39/Integrator (Discrete or Continuous)'\r\n * '<S296>' : 'test3/39/Enable//disable time constant/Compare To Zero'\r\n * '<S297>' : 'test3/39/Initialization/Init_u'\r\n * '<S298>' : 'test3/39/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S299>' : 'test3/4/Enable//disable time constant'\r\n * '<S300>' : 'test3/4/Initialization'\r\n * '<S301>' : 'test3/4/Integrator (Discrete or Continuous)'\r\n * '<S302>' : 'test3/4/Enable//disable time constant/Compare To Zero'\r\n * '<S303>' : 'test3/4/Initialization/Init_u'\r\n * '<S304>' : 'test3/4/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S305>' : 'test3/40/Enable//disable time constant'\r\n * '<S306>' : 'test3/40/Initialization'\r\n * '<S307>' : 'test3/40/Integrator (Discrete or Continuous)'\r\n * '<S308>' : 'test3/40/Enable//disable time constant/Compare To Zero'\r\n * '<S309>' : 'test3/40/Initialization/Init_u'\r\n * '<S310>' : 'test3/40/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S311>' : 'test3/41/Enable//disable time constant'\r\n * '<S312>' : 'test3/41/Initialization'\r\n * '<S313>' : 'test3/41/Integrator (Discrete or Continuous)'\r\n * '<S314>' : 'test3/41/Enable//disable time constant/Compare To Zero'\r\n * '<S315>' : 'test3/41/Initialization/Init_u'\r\n * '<S316>' : 'test3/41/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S317>' : 'test3/42/Enable//disable time constant'\r\n * '<S318>' : 'test3/42/Initialization'\r\n * '<S319>' : 'test3/42/Integrator (Discrete or Continuous)'\r\n * '<S320>' : 'test3/42/Enable//disable time constant/Compare To Zero'\r\n * '<S321>' : 'test3/42/Initialization/Init_u'\r\n * '<S322>' : 'test3/42/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S323>' : 'test3/43/Enable//disable time constant'\r\n * '<S324>' : 'test3/43/Initialization'\r\n * '<S325>' : 'test3/43/Integrator (Discrete or Continuous)'\r\n * '<S326>' : 'test3/43/Enable//disable time constant/Compare To Zero'\r\n * '<S327>' : 'test3/43/Initialization/Init_u'\r\n * '<S328>' : 'test3/43/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S329>' : 'test3/44/Enable//disable time constant'\r\n * '<S330>' : 'test3/44/Initialization'\r\n * '<S331>' : 'test3/44/Integrator (Discrete or Continuous)'\r\n * '<S332>' : 'test3/44/Enable//disable time constant/Compare To Zero'\r\n * '<S333>' : 'test3/44/Initialization/Init_u'\r\n * '<S334>' : 'test3/44/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S335>' : 'test3/45/Enable//disable time constant'\r\n * '<S336>' : 'test3/45/Initialization'\r\n * '<S337>' : 'test3/45/Integrator (Discrete or Continuous)'\r\n * '<S338>' : 'test3/45/Enable//disable time constant/Compare To Zero'\r\n * '<S339>' : 'test3/45/Initialization/Init_u'\r\n * '<S340>' : 'test3/45/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S341>' : 'test3/46/Enable//disable time constant'\r\n * '<S342>' : 'test3/46/Initialization'\r\n * '<S343>' : 'test3/46/Integrator (Discrete or Continuous)'\r\n * '<S344>' : 'test3/46/Enable//disable time constant/Compare To Zero'\r\n * '<S345>' : 'test3/46/Initialization/Init_u'\r\n * '<S346>' : 'test3/46/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S347>' : 'test3/47/Enable//disable time constant'\r\n * '<S348>' : 'test3/47/Initialization'\r\n * '<S349>' : 'test3/47/Integrator (Discrete or Continuous)'\r\n * '<S350>' : 'test3/47/Enable//disable time constant/Compare To Zero'\r\n * '<S351>' : 'test3/47/Initialization/Init_u'\r\n * '<S352>' : 'test3/47/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S353>' : 'test3/48/Enable//disable time constant'\r\n * '<S354>' : 'test3/48/Initialization'\r\n * '<S355>' : 'test3/48/Integrator (Discrete or Continuous)'\r\n * '<S356>' : 'test3/48/Enable//disable time constant/Compare To Zero'\r\n * '<S357>' : 'test3/48/Initialization/Init_u'\r\n * '<S358>' : 'test3/48/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S359>' : 'test3/49/Enable//disable time constant'\r\n * '<S360>' : 'test3/49/Initialization'\r\n * '<S361>' : 'test3/49/Integrator (Discrete or Continuous)'\r\n * '<S362>' : 'test3/49/Enable//disable time constant/Compare To Zero'\r\n * '<S363>' : 'test3/49/Initialization/Init_u'\r\n * '<S364>' : 'test3/49/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S365>' : 'test3/5/Enable//disable time constant'\r\n * '<S366>' : 'test3/5/Initialization'\r\n * '<S367>' : 'test3/5/Integrator (Discrete or Continuous)'\r\n * '<S368>' : 'test3/5/Enable//disable time constant/Compare To Zero'\r\n * '<S369>' : 'test3/5/Initialization/Init_u'\r\n * '<S370>' : 'test3/5/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S371>' : 'test3/50/Enable//disable time constant'\r\n * '<S372>' : 'test3/50/Initialization'\r\n * '<S373>' : 'test3/50/Integrator (Discrete or Continuous)'\r\n * '<S374>' : 'test3/50/Enable//disable time constant/Compare To Zero'\r\n * '<S375>' : 'test3/50/Initialization/Init_u'\r\n * '<S376>' : 'test3/50/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S377>' : 'test3/51/Enable//disable time constant'\r\n * '<S378>' : 'test3/51/Initialization'\r\n * '<S379>' : 'test3/51/Integrator (Discrete or Continuous)'\r\n * '<S380>' : 'test3/51/Enable//disable time constant/Compare To Zero'\r\n * '<S381>' : 'test3/51/Initialization/Init_u'\r\n * '<S382>' : 'test3/51/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S383>' : 'test3/52/Enable//disable time constant'\r\n * '<S384>' : 'test3/52/Initialization'\r\n * '<S385>' : 'test3/52/Integrator (Discrete or Continuous)'\r\n * '<S386>' : 'test3/52/Enable//disable time constant/Compare To Zero'\r\n * '<S387>' : 'test3/52/Initialization/Init_u'\r\n * '<S388>' : 'test3/52/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S389>' : 'test3/53/Enable//disable time constant'\r\n * '<S390>' : 'test3/53/Initialization'\r\n * '<S391>' : 'test3/53/Integrator (Discrete or Continuous)'\r\n * '<S392>' : 'test3/53/Enable//disable time constant/Compare To Zero'\r\n * '<S393>' : 'test3/53/Initialization/Init_u'\r\n * '<S394>' : 'test3/53/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S395>' : 'test3/54/Enable//disable time constant'\r\n * '<S396>' : 'test3/54/Initialization'\r\n * '<S397>' : 'test3/54/Integrator (Discrete or Continuous)'\r\n * '<S398>' : 'test3/54/Enable//disable time constant/Compare To Zero'\r\n * '<S399>' : 'test3/54/Initialization/Init_u'\r\n * '<S400>' : 'test3/54/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S401>' : 'test3/55/Enable//disable time constant'\r\n * '<S402>' : 'test3/55/Initialization'\r\n * '<S403>' : 'test3/55/Integrator (Discrete or Continuous)'\r\n * '<S404>' : 'test3/55/Enable//disable time constant/Compare To Zero'\r\n * '<S405>' : 'test3/55/Initialization/Init_u'\r\n * '<S406>' : 'test3/55/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S407>' : 'test3/56/Enable//disable time constant'\r\n * '<S408>' : 'test3/56/Initialization'\r\n * '<S409>' : 'test3/56/Integrator (Discrete or Continuous)'\r\n * '<S410>' : 'test3/56/Enable//disable time constant/Compare To Zero'\r\n * '<S411>' : 'test3/56/Initialization/Init_u'\r\n * '<S412>' : 'test3/56/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S413>' : 'test3/57/Enable//disable time constant'\r\n * '<S414>' : 'test3/57/Initialization'\r\n * '<S415>' : 'test3/57/Integrator (Discrete or Continuous)'\r\n * '<S416>' : 'test3/57/Enable//disable time constant/Compare To Zero'\r\n * '<S417>' : 'test3/57/Initialization/Init_u'\r\n * '<S418>' : 'test3/57/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S419>' : 'test3/58/Enable//disable time constant'\r\n * '<S420>' : 'test3/58/Initialization'\r\n * '<S421>' : 'test3/58/Integrator (Discrete or Continuous)'\r\n * '<S422>' : 'test3/58/Enable//disable time constant/Compare To Zero'\r\n * '<S423>' : 'test3/58/Initialization/Init_u'\r\n * '<S424>' : 'test3/58/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S425>' : 'test3/59/Enable//disable time constant'\r\n * '<S426>' : 'test3/59/Initialization'\r\n * '<S427>' : 'test3/59/Integrator (Discrete or Continuous)'\r\n * '<S428>' : 'test3/59/Enable//disable time constant/Compare To Zero'\r\n * '<S429>' : 'test3/59/Initialization/Init_u'\r\n * '<S430>' : 'test3/59/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S431>' : 'test3/6/Enable//disable time constant'\r\n * '<S432>' : 'test3/6/Initialization'\r\n * '<S433>' : 'test3/6/Integrator (Discrete or Continuous)'\r\n * '<S434>' : 'test3/6/Enable//disable time constant/Compare To Zero'\r\n * '<S435>' : 'test3/6/Initialization/Init_u'\r\n * '<S436>' : 'test3/6/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S437>' : 'test3/60/Enable//disable time constant'\r\n * '<S438>' : 'test3/60/Initialization'\r\n * '<S439>' : 'test3/60/Integrator (Discrete or Continuous)'\r\n * '<S440>' : 'test3/60/Enable//disable time constant/Compare To Zero'\r\n * '<S441>' : 'test3/60/Initialization/Init_u'\r\n * '<S442>' : 'test3/60/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S443>' : 'test3/61/Enable//disable time constant'\r\n * '<S444>' : 'test3/61/Initialization'\r\n * '<S445>' : 'test3/61/Integrator (Discrete or Continuous)'\r\n * '<S446>' : 'test3/61/Enable//disable time constant/Compare To Zero'\r\n * '<S447>' : 'test3/61/Initialization/Init_u'\r\n * '<S448>' : 'test3/61/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S449>' : 'test3/62/Enable//disable time constant'\r\n * '<S450>' : 'test3/62/Initialization'\r\n * '<S451>' : 'test3/62/Integrator (Discrete or Continuous)'\r\n * '<S452>' : 'test3/62/Enable//disable time constant/Compare To Zero'\r\n * '<S453>' : 'test3/62/Initialization/Init_u'\r\n * '<S454>' : 'test3/62/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S455>' : 'test3/63/Enable//disable time constant'\r\n * '<S456>' : 'test3/63/Initialization'\r\n * '<S457>' : 'test3/63/Integrator (Discrete or Continuous)'\r\n * '<S458>' : 'test3/63/Enable//disable time constant/Compare To Zero'\r\n * '<S459>' : 'test3/63/Initialization/Init_u'\r\n * '<S460>' : 'test3/63/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S461>' : 'test3/64/Enable//disable time constant'\r\n * '<S462>' : 'test3/64/Initialization'\r\n * '<S463>' : 'test3/64/Integrator (Discrete or Continuous)'\r\n * '<S464>' : 'test3/64/Enable//disable time constant/Compare To Zero'\r\n * '<S465>' : 'test3/64/Initialization/Init_u'\r\n * '<S466>' : 'test3/64/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S467>' : 'test3/65/Enable//disable time constant'\r\n * '<S468>' : 'test3/65/Initialization'\r\n * '<S469>' : 'test3/65/Integrator (Discrete or Continuous)'\r\n * '<S470>' : 'test3/65/Enable//disable time constant/Compare To Zero'\r\n * '<S471>' : 'test3/65/Initialization/Init_u'\r\n * '<S472>' : 'test3/65/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S473>' : 'test3/66/Enable//disable time constant'\r\n * '<S474>' : 'test3/66/Initialization'\r\n * '<S475>' : 'test3/66/Integrator (Discrete or Continuous)'\r\n * '<S476>' : 'test3/66/Enable//disable time constant/Compare To Zero'\r\n * '<S477>' : 'test3/66/Initialization/Init_u'\r\n * '<S478>' : 'test3/66/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S479>' : 'test3/67/Enable//disable time constant'\r\n * '<S480>' : 'test3/67/Initialization'\r\n * '<S481>' : 'test3/67/Integrator (Discrete or Continuous)'\r\n * '<S482>' : 'test3/67/Enable//disable time constant/Compare To Zero'\r\n * '<S483>' : 'test3/67/Initialization/Init_u'\r\n * '<S484>' : 'test3/67/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S485>' : 'test3/68/Enable//disable time constant'\r\n * '<S486>' : 'test3/68/Initialization'\r\n * '<S487>' : 'test3/68/Integrator (Discrete or Continuous)'\r\n * '<S488>' : 'test3/68/Enable//disable time constant/Compare To Zero'\r\n * '<S489>' : 'test3/68/Initialization/Init_u'\r\n * '<S490>' : 'test3/68/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S491>' : 'test3/69/Enable//disable time constant'\r\n * '<S492>' : 'test3/69/Initialization'\r\n * '<S493>' : 'test3/69/Integrator (Discrete or Continuous)'\r\n * '<S494>' : 'test3/69/Enable//disable time constant/Compare To Zero'\r\n * '<S495>' : 'test3/69/Initialization/Init_u'\r\n * '<S496>' : 'test3/69/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S497>' : 'test3/7/Enable//disable time constant'\r\n * '<S498>' : 'test3/7/Initialization'\r\n * '<S499>' : 'test3/7/Integrator (Discrete or Continuous)'\r\n * '<S500>' : 'test3/7/Enable//disable time constant/Compare To Zero'\r\n * '<S501>' : 'test3/7/Initialization/Init_u'\r\n * '<S502>' : 'test3/7/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S503>' : 'test3/70/Enable//disable time constant'\r\n * '<S504>' : 'test3/70/Initialization'\r\n * '<S505>' : 'test3/70/Integrator (Discrete or Continuous)'\r\n * '<S506>' : 'test3/70/Enable//disable time constant/Compare To Zero'\r\n * '<S507>' : 'test3/70/Initialization/Init_u'\r\n * '<S508>' : 'test3/70/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S509>' : 'test3/71/Enable//disable time constant'\r\n * '<S510>' : 'test3/71/Initialization'\r\n * '<S511>' : 'test3/71/Integrator (Discrete or Continuous)'\r\n * '<S512>' : 'test3/71/Enable//disable time constant/Compare To Zero'\r\n * '<S513>' : 'test3/71/Initialization/Init_u'\r\n * '<S514>' : 'test3/71/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S515>' : 'test3/72/Enable//disable time constant'\r\n * '<S516>' : 'test3/72/Initialization'\r\n * '<S517>' : 'test3/72/Integrator (Discrete or Continuous)'\r\n * '<S518>' : 'test3/72/Enable//disable time constant/Compare To Zero'\r\n * '<S519>' : 'test3/72/Initialization/Init_u'\r\n * '<S520>' : 'test3/72/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S521>' : 'test3/73/Enable//disable time constant'\r\n * '<S522>' : 'test3/73/Initialization'\r\n * '<S523>' : 'test3/73/Integrator (Discrete or Continuous)'\r\n * '<S524>' : 'test3/73/Enable//disable time constant/Compare To Zero'\r\n * '<S525>' : 'test3/73/Initialization/Init_u'\r\n * '<S526>' : 'test3/73/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S527>' : 'test3/74/Enable//disable time constant'\r\n * '<S528>' : 'test3/74/Initialization'\r\n * '<S529>' : 'test3/74/Integrator (Discrete or Continuous)'\r\n * '<S530>' : 'test3/74/Enable//disable time constant/Compare To Zero'\r\n * '<S531>' : 'test3/74/Initialization/Init_u'\r\n * '<S532>' : 'test3/74/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S533>' : 'test3/75/Enable//disable time constant'\r\n * '<S534>' : 'test3/75/Initialization'\r\n * '<S535>' : 'test3/75/Integrator (Discrete or Continuous)'\r\n * '<S536>' : 'test3/75/Enable//disable time constant/Compare To Zero'\r\n * '<S537>' : 'test3/75/Initialization/Init_u'\r\n * '<S538>' : 'test3/75/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S539>' : 'test3/76/Enable//disable time constant'\r\n * '<S540>' : 'test3/76/Initialization'\r\n * '<S541>' : 'test3/76/Integrator (Discrete or Continuous)'\r\n * '<S542>' : 'test3/76/Enable//disable time constant/Compare To Zero'\r\n * '<S543>' : 'test3/76/Initialization/Init_u'\r\n * '<S544>' : 'test3/76/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S545>' : 'test3/77/Enable//disable time constant'\r\n * '<S546>' : 'test3/77/Initialization'\r\n * '<S547>' : 'test3/77/Integrator (Discrete or Continuous)'\r\n * '<S548>' : 'test3/77/Enable//disable time constant/Compare To Zero'\r\n * '<S549>' : 'test3/77/Initialization/Init_u'\r\n * '<S550>' : 'test3/77/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S551>' : 'test3/78/Enable//disable time constant'\r\n * '<S552>' : 'test3/78/Initialization'\r\n * '<S553>' : 'test3/78/Integrator (Discrete or Continuous)'\r\n * '<S554>' : 'test3/78/Enable//disable time constant/Compare To Zero'\r\n * '<S555>' : 'test3/78/Initialization/Init_u'\r\n * '<S556>' : 'test3/78/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S557>' : 'test3/79/Enable//disable time constant'\r\n * '<S558>' : 'test3/79/Initialization'\r\n * '<S559>' : 'test3/79/Integrator (Discrete or Continuous)'\r\n * '<S560>' : 'test3/79/Enable//disable time constant/Compare To Zero'\r\n * '<S561>' : 'test3/79/Initialization/Init_u'\r\n * '<S562>' : 'test3/79/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S563>' : 'test3/8/Enable//disable time constant'\r\n * '<S564>' : 'test3/8/Initialization'\r\n * '<S565>' : 'test3/8/Integrator (Discrete or Continuous)'\r\n * '<S566>' : 'test3/8/Enable//disable time constant/Compare To Zero'\r\n * '<S567>' : 'test3/8/Initialization/Init_u'\r\n * '<S568>' : 'test3/8/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S569>' : 'test3/80/Enable//disable time constant'\r\n * '<S570>' : 'test3/80/Initialization'\r\n * '<S571>' : 'test3/80/Integrator (Discrete or Continuous)'\r\n * '<S572>' : 'test3/80/Enable//disable time constant/Compare To Zero'\r\n * '<S573>' : 'test3/80/Initialization/Init_u'\r\n * '<S574>' : 'test3/80/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S575>' : 'test3/81/Enable//disable time constant'\r\n * '<S576>' : 'test3/81/Initialization'\r\n * '<S577>' : 'test3/81/Integrator (Discrete or Continuous)'\r\n * '<S578>' : 'test3/81/Enable//disable time constant/Compare To Zero'\r\n * '<S579>' : 'test3/81/Initialization/Init_u'\r\n * '<S580>' : 'test3/81/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S581>' : 'test3/82/Enable//disable time constant'\r\n * '<S582>' : 'test3/82/Initialization'\r\n * '<S583>' : 'test3/82/Integrator (Discrete or Continuous)'\r\n * '<S584>' : 'test3/82/Enable//disable time constant/Compare To Zero'\r\n * '<S585>' : 'test3/82/Initialization/Init_u'\r\n * '<S586>' : 'test3/82/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S587>' : 'test3/83/Enable//disable time constant'\r\n * '<S588>' : 'test3/83/Initialization'\r\n * '<S589>' : 'test3/83/Integrator (Discrete or Continuous)'\r\n * '<S590>' : 'test3/83/Enable//disable time constant/Compare To Zero'\r\n * '<S591>' : 'test3/83/Initialization/Init_u'\r\n * '<S592>' : 'test3/83/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S593>' : 'test3/84/Enable//disable time constant'\r\n * '<S594>' : 'test3/84/Initialization'\r\n * '<S595>' : 'test3/84/Integrator (Discrete or Continuous)'\r\n * '<S596>' : 'test3/84/Enable//disable time constant/Compare To Zero'\r\n * '<S597>' : 'test3/84/Initialization/Init_u'\r\n * '<S598>' : 'test3/84/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S599>' : 'test3/85/Enable//disable time constant'\r\n * '<S600>' : 'test3/85/Initialization'\r\n * '<S601>' : 'test3/85/Integrator (Discrete or Continuous)'\r\n * '<S602>' : 'test3/85/Enable//disable time constant/Compare To Zero'\r\n * '<S603>' : 'test3/85/Initialization/Init_u'\r\n * '<S604>' : 'test3/85/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S605>' : 'test3/86/Enable//disable time constant'\r\n * '<S606>' : 'test3/86/Initialization'\r\n * '<S607>' : 'test3/86/Integrator (Discrete or Continuous)'\r\n * '<S608>' : 'test3/86/Enable//disable time constant/Compare To Zero'\r\n * '<S609>' : 'test3/86/Initialization/Init_u'\r\n * '<S610>' : 'test3/86/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S611>' : 'test3/87/Enable//disable time constant'\r\n * '<S612>' : 'test3/87/Initialization'\r\n * '<S613>' : 'test3/87/Integrator (Discrete or Continuous)'\r\n * '<S614>' : 'test3/87/Enable//disable time constant/Compare To Zero'\r\n * '<S615>' : 'test3/87/Initialization/Init_u'\r\n * '<S616>' : 'test3/87/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S617>' : 'test3/88/Enable//disable time constant'\r\n * '<S618>' : 'test3/88/Initialization'\r\n * '<S619>' : 'test3/88/Integrator (Discrete or Continuous)'\r\n * '<S620>' : 'test3/88/Enable//disable time constant/Compare To Zero'\r\n * '<S621>' : 'test3/88/Initialization/Init_u'\r\n * '<S622>' : 'test3/88/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S623>' : 'test3/89/Enable//disable time constant'\r\n * '<S624>' : 'test3/89/Initialization'\r\n * '<S625>' : 'test3/89/Integrator (Discrete or Continuous)'\r\n * '<S626>' : 'test3/89/Enable//disable time constant/Compare To Zero'\r\n * '<S627>' : 'test3/89/Initialization/Init_u'\r\n * '<S628>' : 'test3/89/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S629>' : 'test3/9/Enable//disable time constant'\r\n * '<S630>' : 'test3/9/Initialization'\r\n * '<S631>' : 'test3/9/Integrator (Discrete or Continuous)'\r\n * '<S632>' : 'test3/9/Enable//disable time constant/Compare To Zero'\r\n * '<S633>' : 'test3/9/Initialization/Init_u'\r\n * '<S634>' : 'test3/9/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S635>' : 'test3/90/Enable//disable time constant'\r\n * '<S636>' : 'test3/90/Initialization'\r\n * '<S637>' : 'test3/90/Integrator (Discrete or Continuous)'\r\n * '<S638>' : 'test3/90/Enable//disable time constant/Compare To Zero'\r\n * '<S639>' : 'test3/90/Initialization/Init_u'\r\n * '<S640>' : 'test3/90/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S641>' : 'test3/91/Enable//disable time constant'\r\n * '<S642>' : 'test3/91/Initialization'\r\n * '<S643>' : 'test3/91/Integrator (Discrete or Continuous)'\r\n * '<S644>' : 'test3/91/Enable//disable time constant/Compare To Zero'\r\n * '<S645>' : 'test3/91/Initialization/Init_u'\r\n * '<S646>' : 'test3/91/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S647>' : 'test3/92/Enable//disable time constant'\r\n * '<S648>' : 'test3/92/Initialization'\r\n * '<S649>' : 'test3/92/Integrator (Discrete or Continuous)'\r\n * '<S650>' : 'test3/92/Enable//disable time constant/Compare To Zero'\r\n * '<S651>' : 'test3/92/Initialization/Init_u'\r\n * '<S652>' : 'test3/92/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S653>' : 'test3/93/Enable//disable time constant'\r\n * '<S654>' : 'test3/93/Initialization'\r\n * '<S655>' : 'test3/93/Integrator (Discrete or Continuous)'\r\n * '<S656>' : 'test3/93/Enable//disable time constant/Compare To Zero'\r\n * '<S657>' : 'test3/93/Initialization/Init_u'\r\n * '<S658>' : 'test3/93/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S659>' : 'test3/94/Enable//disable time constant'\r\n * '<S660>' : 'test3/94/Initialization'\r\n * '<S661>' : 'test3/94/Integrator (Discrete or Continuous)'\r\n * '<S662>' : 'test3/94/Enable//disable time constant/Compare To Zero'\r\n * '<S663>' : 'test3/94/Initialization/Init_u'\r\n * '<S664>' : 'test3/94/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S665>' : 'test3/95/Enable//disable time constant'\r\n * '<S666>' : 'test3/95/Initialization'\r\n * '<S667>' : 'test3/95/Integrator (Discrete or Continuous)'\r\n * '<S668>' : 'test3/95/Enable//disable time constant/Compare To Zero'\r\n * '<S669>' : 'test3/95/Initialization/Init_u'\r\n * '<S670>' : 'test3/95/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S671>' : 'test3/96/Enable//disable time constant'\r\n * '<S672>' : 'test3/96/Initialization'\r\n * '<S673>' : 'test3/96/Integrator (Discrete or Continuous)'\r\n * '<S674>' : 'test3/96/Enable//disable time constant/Compare To Zero'\r\n * '<S675>' : 'test3/96/Initialization/Init_u'\r\n * '<S676>' : 'test3/96/Integrator (Discrete or Continuous)/Discrete'\r\n * '<S677>' : 'test3/BMS_Function/Chart'\r\n * '<S678>' : 'test3/BMS_Function/Chart/Main.MainStateMachine.Charginig.Personal_Mode1.PI'\r\n * '<S679>' : 'test3/BMS_Function/Chart/Main.MainStateMachine.Charginig.PreCharge_Mode.PI'\r\n * '<S680>' : 'test3/CAN_VCU_Fault/Chart'\r\n * '<S681>' : 'test3/CAN_VCU_Fault/Chart1'\r\n * '<S682>' : 'test3/Current_Limit/ChargeCurrentLimit_Calc'\r\n * '<S683>' : 'test3/Current_Limit/DischargeCurrentLimit_Calc'\r\n * '<S684>' : 'test3/RCTcc/1'\r\n * '<S685>' : 'test3/RCTcc/Chart1'\r\n * '<S686>' : 'test3/RCTcc/1/Enable//disable time constant'\r\n * '<S687>' : 'test3/RCTcc/1/Initialization'\r\n * '<S688>' : 'test3/RCTcc/1/Integrator (Discrete or Continuous)'\r\n * '<S689>' : 'test3/RCTcc/1/Enable//disable time constant/Compare To Zero'\r\n * '<S690>' : 'test3/RCTcc/1/Initialization/Init_u'\r\n * '<S691>' : 'test3/RCTcc/1/Integrator (Discrete or Continuous)/Discrete'\r\n */\r\n#endif                                 /* RTW_HEADER_test3_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"test3_private.h","type":"header","group":"model","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: test3_private.h\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_test3_private_h_\r\n#define RTW_HEADER_test3_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"test3.h\"\r\n\r\nextern real_T rt_roundd_snf(real_T u);\r\nextern real32_T look1_iflf_binlxpw(real32_T u0, const real32_T bp0[], const\r\n  real32_T table[], uint32_T maxIndex);\r\nextern real32_T look2_iflf_pbinlcpw(real32_T u0, real32_T u1, const real32_T\r\n  bp0[], const real32_T bp1[], const real32_T table[], uint32_T prevIndex[],\r\n  const uint32_T maxIndex[], uint32_T stride);\r\nextern real32_T look1_iflf_pbinlcpw(real32_T u0, const real32_T bp0[], const\r\n  real32_T table[], uint32_T prevIndex[], uint32_T maxIndex);\r\nextern void test3_MovingAverage_Init(DW_MovingAverage_test3_T *localDW);\r\nextern void test3_MovingAverage(real32_T rtu_0, B_MovingAverage_test3_T *localB,\r\n  DW_MovingAverage_test3_T *localDW);\r\nextern void test3_MovingAverage_Term(DW_MovingAverage_test3_T *localDW);\r\n\r\n#endif                                 /* RTW_HEADER_test3_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"test3_types.h","type":"header","group":"model","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: test3_types.h\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_test3_types_h_\r\n#define RTW_HEADER_test3_types_h_\r\n#include \"rtwtypes.h\"\r\n\r\n/* Model Code Variants */\r\n#ifndef DEFINED_TYPEDEF_FOR_SRE_\r\n#define DEFINED_TYPEDEF_FOR_SRE_\r\n\r\ntypedef int16_T SRE;\r\n\r\n/* enum SRE */\r\n#define Standby                        (0)                       /* Default value */\r\n#define Charging                       (1)\r\n#define Driving                        (2)\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_Contact_\r\n#define DEFINED_TYPEDEF_FOR_Contact_\r\n\r\ntypedef int16_T Contact;\r\n\r\n/* enum Contact */\r\n#define Init                           (0)\r\n#define Open                           (1)                       /* Default value */\r\n#define Close                          (2)\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_BMS_State_Enum_\r\n#define DEFINED_TYPEDEF_FOR_BMS_State_Enum_\r\n\r\ntypedef enum {\r\n  BMS_Standby = 0,                     /* Default value */\r\n  BMS_Charging,\r\n  BMS_Driving,\r\n  BMS_Fault\r\n} BMS_State_Enum;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_Faults_\r\n#define DEFINED_TYPEDEF_FOR_Faults_\r\n\r\ntypedef struct {\r\n  boolean_T VoltSensor;\r\n  boolean_T OverCurrent;\r\n  boolean_T HighTemp;\r\n  boolean_T LowTemp;\r\n  boolean_T OverVolt;\r\n  boolean_T UnderVolt;\r\n  boolean_T Charger;\r\n  boolean_T Inverter;\r\n  boolean_T PreChargeFault;\r\n  boolean_T OverDischargeCurrent;\r\n  boolean_T OverChargeCurrent;\r\n  boolean_T BalEn;\r\n  boolean_T ShortCircuitFault;\r\n  boolean_T BMBFault;\r\n  boolean_T CurrentSensor;\r\n  boolean_T MemoryFault;\r\n  boolean_T InputPowerFault;\r\n  boolean_T TempSensor;\r\n  boolean_T CAN_VCU_Fault;\r\n  boolean_T LowSOC;\r\n} Faults;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_ChargeCU_ModeReq_\r\n#define DEFINED_TYPEDEF_FOR_ChargeCU_ModeReq_\r\n\r\ntypedef enum {\r\n  Init_Mode = 0,                       /* Default value */\r\n  CC_Mode,\r\n  CV_Mode,\r\n  Personal_Mode,\r\n  Pre_Charge_Mode,\r\n  FastCharge_Mode\r\n} ChargeCU_ModeReq;\r\n\r\n#endif\r\n\r\n#ifndef struct_tag_ECRg1ObDlXbVq65I0v9MbH\r\n#define struct_tag_ECRg1ObDlXbVq65I0v9MbH\r\n\r\nstruct tag_ECRg1ObDlXbVq65I0v9MbH\r\n{\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  real32_T pCumSum;\r\n  real32_T pCumSumRev[3];\r\n  real32_T pCumRevIndex;\r\n  real32_T pModValueRev;\r\n};\r\n\r\n#endif                                 /* struct_tag_ECRg1ObDlXbVq65I0v9MbH */\r\n\r\n#ifndef typedef_g_dsp_internal_SlidingWindowA_T\r\n#define typedef_g_dsp_internal_SlidingWindowA_T\r\n\r\ntypedef struct tag_ECRg1ObDlXbVq65I0v9MbH g_dsp_internal_SlidingWindowA_T;\r\n\r\n#endif                             /* typedef_g_dsp_internal_SlidingWindowA_T */\r\n\r\n#ifndef struct_tag_BlgwLpgj2bjudmbmVKWwDE\r\n#define struct_tag_BlgwLpgj2bjudmbmVKWwDE\r\n\r\nstruct tag_BlgwLpgj2bjudmbmVKWwDE\r\n{\r\n  uint32_T f1[8];\r\n};\r\n\r\n#endif                                 /* struct_tag_BlgwLpgj2bjudmbmVKWwDE */\r\n\r\n#ifndef typedef_cell_wrap_test3_T\r\n#define typedef_cell_wrap_test3_T\r\n\r\ntypedef struct tag_BlgwLpgj2bjudmbmVKWwDE cell_wrap_test3_T;\r\n\r\n#endif                                 /* typedef_cell_wrap_test3_T */\r\n\r\n#ifndef struct_tag_wJ3WU7O7172nske0bGZpEF\r\n#define struct_tag_wJ3WU7O7172nske0bGZpEF\r\n\r\nstruct tag_wJ3WU7O7172nske0bGZpEF\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  boolean_T TunablePropsChanged;\r\n  cell_wrap_test3_T inputVarSize;\r\n  g_dsp_internal_SlidingWindowA_T *pStatistic;\r\n  int32_T NumChannels;\r\n  g_dsp_internal_SlidingWindowA_T _pobj0;\r\n};\r\n\r\n#endif                                 /* struct_tag_wJ3WU7O7172nske0bGZpEF */\r\n\r\n#ifndef typedef_dsp_simulink_MovingAverage_te_T\r\n#define typedef_dsp_simulink_MovingAverage_te_T\r\n\r\ntypedef struct tag_wJ3WU7O7172nske0bGZpEF dsp_simulink_MovingAverage_te_T;\r\n\r\n#endif                             /* typedef_dsp_simulink_MovingAverage_te_T */\r\n\r\n#ifndef struct_tag_zLuFj3crRZtwleUCAQVyuC\r\n#define struct_tag_zLuFj3crRZtwleUCAQVyuC\r\n\r\nstruct tag_zLuFj3crRZtwleUCAQVyuC\r\n{\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  real32_T pCumSum;\r\n  real32_T pCumSumRev[11];\r\n  real32_T pCumRevIndex;\r\n  real32_T pModValueRev;\r\n};\r\n\r\n#endif                                 /* struct_tag_zLuFj3crRZtwleUCAQVyuC */\r\n\r\n#ifndef typedef_g_dsp_internal_SlidingWindo_k_T\r\n#define typedef_g_dsp_internal_SlidingWindo_k_T\r\n\r\ntypedef struct tag_zLuFj3crRZtwleUCAQVyuC g_dsp_internal_SlidingWindo_k_T;\r\n\r\n#endif                             /* typedef_g_dsp_internal_SlidingWindo_k_T */\r\n\r\n#ifndef struct_tag_0XX3PBmLm8zjPXbvNLlW6G\r\n#define struct_tag_0XX3PBmLm8zjPXbvNLlW6G\r\n\r\nstruct tag_0XX3PBmLm8zjPXbvNLlW6G\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  boolean_T TunablePropsChanged;\r\n  cell_wrap_test3_T inputVarSize;\r\n  g_dsp_internal_SlidingWindo_k_T *pStatistic;\r\n  int32_T NumChannels;\r\n  g_dsp_internal_SlidingWindo_k_T _pobj0;\r\n};\r\n\r\n#endif                                 /* struct_tag_0XX3PBmLm8zjPXbvNLlW6G */\r\n\r\n#ifndef typedef_dsp_simulink_MovingAverage_k_T\r\n#define typedef_dsp_simulink_MovingAverage_k_T\r\n\r\ntypedef struct tag_0XX3PBmLm8zjPXbvNLlW6G dsp_simulink_MovingAverage_k_T;\r\n\r\n#endif                              /* typedef_dsp_simulink_MovingAverage_k_T */\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_test3_T RT_MODEL_test3_T;\r\n\r\n#endif                                 /* RTW_HEADER_test3_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"RCTcc.c","type":"source","group":"subsystem","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Subsystem files","code":"/*\r\n * File: RCTcc.c\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"RCTcc.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"test3.h\"\r\n#include \"test3_private.h\"\r\n\r\n/* Named constants for Chart: '<S100>/Chart1' */\r\n#define test3_CALL_EVENT               (-1L)\r\n#define test3_event_DeltaCHSOC         (0L)\r\n#define test3_event_DeltaSOC           (1L)\r\n#define test3_IN_A                     (1U)\r\n#define test3_IN_A1                    (1U)\r\n#define test3_IN_A1_f                  (2U)\r\n#define test3_IN_B                     (3U)\r\n#define test3_IN_B1                    (4U)\r\n#define test3_IN_B2                    (5U)\r\n#define test3_IN_NO_ACTIVE_CHILD       (0U)\r\n\r\n/* Forward declaration for local functions */\r\nstatic void test3_c6_test3(real32_T rtu_SOC, real32_T rtu_Mileage,\r\n  B_RCTcc_test3_T *localB, DW_RCTcc_test3_T *localDW);\r\n\r\n/* Function for Chart: '<S100>/Chart1' */\r\nstatic void test3_c6_test3(real32_T rtu_SOC, real32_T rtu_Mileage,\r\n  B_RCTcc_test3_T *localB, DW_RCTcc_test3_T *localDW)\r\n{\r\n  int32_T c_previousEvent;\r\n\r\n  /* Chart: '<S100>/Chart1' incorporates:\r\n   *  Constant: '<S100>/BasedMileage per Watts'\r\n   */\r\n  if (localDW->is_active_c6_test3 == 0U) {\r\n    localDW->is_active_c6_test3 = 1U;\r\n    localDW->is_active_Control = 1U;\r\n    localDW->is_Control = test3_IN_A1;\r\n    localDW->SOE1 = rtu_SOC;\r\n    localDW->is_active_Estimate_Mileage = 1U;\r\n    localB->RD_OUT = 1.0F;\r\n    localDW->RD_OUT1 = 1.0F;\r\n    localDW->RD_OUT2 = 1.0F;\r\n    localDW->RD_OUT3 = 1.0F;\r\n    localDW->is_Estimate_Mileage = test3_IN_A;\r\n    localDW->Mileage1 = rtu_Mileage;\r\n  } else {\r\n    if ((localDW->is_active_Control != 0U) && ((int16_T)localDW->is_Control ==\r\n         (int16_T)test3_IN_A1)) {\r\n      if (rtu_SOC - localDW->SOE1 >= 2.0F) {\r\n        localDW->is_Control = test3_IN_NO_ACTIVE_CHILD;\r\n        c_previousEvent = localDW->sfEvent;\r\n        localDW->sfEvent = test3_event_DeltaCHSOC;\r\n        test3_c6_test3(rtu_SOC, rtu_Mileage, localB, localDW);\r\n        localDW->sfEvent = c_previousEvent;\r\n        if (((int16_T)localDW->is_Control == (int16_T)test3_IN_NO_ACTIVE_CHILD) &&\r\n            (localDW->is_active_Control != 0U)) {\r\n          localDW->is_Control = test3_IN_A1;\r\n          localDW->SOE1 = rtu_SOC;\r\n        }\r\n      } else if (localDW->SOE1 - rtu_SOC >= 1.0F) {\r\n        localDW->is_Control = test3_IN_NO_ACTIVE_CHILD;\r\n        c_previousEvent = localDW->sfEvent;\r\n        localDW->sfEvent = test3_event_DeltaSOC;\r\n        test3_c6_test3(rtu_SOC, rtu_Mileage, localB, localDW);\r\n        localDW->sfEvent = c_previousEvent;\r\n        if (((int16_T)localDW->is_Control == (int16_T)test3_IN_NO_ACTIVE_CHILD) &&\r\n            (localDW->is_active_Control != 0U)) {\r\n          localDW->is_Control = test3_IN_A1;\r\n          localDW->SOE1 = rtu_SOC;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (localDW->is_active_Estimate_Mileage != 0U) {\r\n      switch (localDW->is_Estimate_Mileage) {\r\n       case test3_IN_A:\r\n        switch (localDW->sfEvent) {\r\n         case test3_event_DeltaSOC:\r\n          localDW->is_Estimate_Mileage = test3_IN_B;\r\n          localDW->Mileage2 = rtu_Mileage;\r\n          localDW->RD_OUT1 = (localDW->Mileage2 - localDW->Mileage1) / 3.3F;\r\n          localB->RD_OUT = ((localDW->RD_OUT3 + localDW->RD_OUT2) +\r\n                            localDW->RD_OUT1) / 3.0F;\r\n          break;\r\n\r\n         case test3_event_DeltaCHSOC:\r\n          localDW->is_Estimate_Mileage = test3_IN_A1_f;\r\n          localB->RD_OUT += 1.0F / (101.0F - rtu_SOC) * (1.0F - localB->RD_OUT);\r\n          break;\r\n        }\r\n        break;\r\n\r\n       case test3_IN_A1_f:\r\n        switch (localDW->sfEvent) {\r\n         case test3_event_DeltaSOC:\r\n          localDW->is_Estimate_Mileage = test3_IN_A;\r\n          localDW->Mileage1 = rtu_Mileage;\r\n          break;\r\n\r\n         case test3_event_DeltaCHSOC:\r\n          localDW->is_Estimate_Mileage = test3_IN_A1_f;\r\n          localB->RD_OUT += 1.0F / (101.0F - rtu_SOC) * (1.0F - localB->RD_OUT);\r\n          break;\r\n        }\r\n        break;\r\n\r\n       case test3_IN_B:\r\n        switch (localDW->sfEvent) {\r\n         case test3_event_DeltaSOC:\r\n          localDW->is_Estimate_Mileage = test3_IN_B1;\r\n          localDW->Mileage3 = rtu_Mileage;\r\n          localDW->RD_OUT2 = (localDW->Mileage3 - localDW->Mileage2) / 3.3F;\r\n          localB->RD_OUT = ((localDW->RD_OUT3 + localDW->RD_OUT2) +\r\n                            localDW->RD_OUT1) / 3.0F;\r\n          break;\r\n\r\n         case test3_event_DeltaCHSOC:\r\n          localDW->is_Estimate_Mileage = test3_IN_A1_f;\r\n          localB->RD_OUT += 1.0F / (101.0F - rtu_SOC) * (1.0F - localB->RD_OUT);\r\n          break;\r\n        }\r\n        break;\r\n\r\n       case test3_IN_B1:\r\n        switch (localDW->sfEvent) {\r\n         case test3_event_DeltaSOC:\r\n          localDW->is_Estimate_Mileage = test3_IN_B2;\r\n          localDW->temporalCounter_i1 = 0U;\r\n          localDW->RD_OUT3 = (rtu_Mileage - localDW->Mileage3) / 3.3F;\r\n          localB->RD_OUT = ((localDW->RD_OUT3 + localDW->RD_OUT2) +\r\n                            localDW->RD_OUT1) / 3.0F;\r\n          break;\r\n\r\n         case test3_event_DeltaCHSOC:\r\n          localDW->is_Estimate_Mileage = test3_IN_A1_f;\r\n          localB->RD_OUT += 1.0F / (101.0F - rtu_SOC) * (1.0F - localB->RD_OUT);\r\n          break;\r\n        }\r\n        break;\r\n\r\n       case test3_IN_B2:\r\n        if (localDW->temporalCounter_i1 >= 100U) {\r\n          localDW->is_Estimate_Mileage = test3_IN_A;\r\n          localDW->Mileage1 = rtu_Mileage;\r\n        } else if (localDW->sfEvent == test3_event_DeltaCHSOC) {\r\n          localDW->is_Estimate_Mileage = test3_IN_A1_f;\r\n          localB->RD_OUT += 1.0F / (101.0F - rtu_SOC) * (1.0F - localB->RD_OUT);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /* End of Chart: '<S100>/Chart1' */\r\n}\r\n\r\n/* System initialize for atomic system: '<Root>/RCTcc' */\r\nvoid test3_RCTcc_Init(B_RCTcc_test3_T *localB, DW_RCTcc_test3_T *localDW)\r\n{\r\n  /* Start for Probe: '<S686>/Probe' */\r\n  localB->Probe[0] = 0.01F;\r\n  localB->Probe[1] = 0.0F;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S691>/Integrator' */\r\n  localDW->Integrator_PrevResetState = 0;\r\n  localDW->Integrator_IC_LOADING = 1U;\r\n\r\n  /* InitializeConditions for RateLimiter: '<S100>/Rate Limiter' */\r\n  localDW->PrevY = 0.0F;\r\n\r\n  /* SystemInitialize for Chart: '<S100>/Chart1' */\r\n  localDW->sfEvent = test3_CALL_EVENT;\r\n  localDW->is_active_Control = 0U;\r\n  localDW->is_Control = test3_IN_NO_ACTIVE_CHILD;\r\n  localDW->is_active_Estimate_Mileage = 0U;\r\n  localDW->is_Estimate_Mileage = test3_IN_NO_ACTIVE_CHILD;\r\n  localDW->temporalCounter_i1 = 0U;\r\n  localDW->is_active_c6_test3 = 0U;\r\n  localDW->Mileage2 = 0.0F;\r\n  localDW->Mileage1 = 0.0F;\r\n  localDW->SOE1 = 0.0F;\r\n  localDW->RD_OUT1 = 0.0F;\r\n  localDW->RD_OUT2 = 0.0F;\r\n  localDW->RD_OUT3 = 0.0F;\r\n  localDW->Mileage3 = 0.0F;\r\n  localB->RD_OUT = 0.0F;\r\n}\r\n\r\n/* Output and update for atomic system: '<Root>/RCTcc' */\r\nvoid test3_RCTcc(uint16_T rtu_Capacity, real32_T rtu_Pack_Current, uint16_T\r\n                 rtu_ReqSOC, real32_T rtu_Fake_SOC, real32_T rtu_SOC, real32_T\r\n                 rtu_Mileage, real32_T *rty_RCT, real32_T *rty_RD_NEDC_F,\r\n                 real32_T *rty_RDT, real32_T *rty_Add_Mileage_Range, real32_T\r\n                 *rty_SOE, real32_T *rty_RD_NEDC_F1, B_RCTcc_test3_T *localB,\r\n                 DW_RCTcc_test3_T *localDW)\r\n{\r\n  real32_T rtb_Add1;\r\n  real32_T rtb_AvoidDividebyZero_ez;\r\n  boolean_T rtb_Compare_m4;\r\n\r\n  /* MinMax: '<S686>/Max' */\r\n  if (localB->Probe[0] >= 0.15915494309189535) {\r\n    *rty_RDT = localB->Probe[0];\r\n  } else {\r\n    *rty_RDT = 0.159154937F;\r\n  }\r\n\r\n  /* End of MinMax: '<S686>/Max' */\r\n\r\n  /* Fcn: '<S686>/Avoid Divide by Zero' */\r\n  rtb_AvoidDividebyZero_ez = (real32_T)(*rty_RDT == 0.0F) * 2.22044605e-16F +\r\n    *rty_RDT;\r\n\r\n  /* Sum: '<S686>/Sum1' incorporates:\r\n   *  Constant: '<S686>/Time constant'\r\n   */\r\n  *rty_RDT = (real32_T)(0.15915494309189535 - localB->Probe[0]);\r\n\r\n  /* RelationalOperator: '<S689>/Compare' incorporates:\r\n   *  Constant: '<S689>/Constant'\r\n   */\r\n  rtb_Compare_m4 = (*rty_RDT <= 0.0F);\r\n\r\n  /* DiscreteIntegrator: '<S691>/Integrator' */\r\n  if (localDW->Integrator_IC_LOADING != 0U) {\r\n    localDW->Integrator_DSTATE = rtu_Pack_Current;\r\n    if (localDW->Integrator_DSTATE >= 500.0F) {\r\n      localDW->Integrator_DSTATE = 500.0F;\r\n    } else if (localDW->Integrator_DSTATE <= -500.0F) {\r\n      localDW->Integrator_DSTATE = -500.0F;\r\n    }\r\n  }\r\n\r\n  if (rtb_Compare_m4 || (localDW->Integrator_PrevResetState != 0)) {\r\n    localDW->Integrator_DSTATE = rtu_Pack_Current;\r\n    if (localDW->Integrator_DSTATE >= 500.0F) {\r\n      localDW->Integrator_DSTATE = 500.0F;\r\n    } else if (localDW->Integrator_DSTATE <= -500.0F) {\r\n      localDW->Integrator_DSTATE = -500.0F;\r\n    }\r\n  }\r\n\r\n  if (localDW->Integrator_DSTATE >= 500.0F) {\r\n    localDW->Integrator_DSTATE = 500.0F;\r\n  } else if (localDW->Integrator_DSTATE <= -500.0F) {\r\n    localDW->Integrator_DSTATE = -500.0F;\r\n  }\r\n\r\n  /* Gain: '<S100>/Gain2' incorporates:\r\n   *  DiscreteIntegrator: '<S691>/Integrator'\r\n   */\r\n  *rty_RDT = -localDW->Integrator_DSTATE;\r\n\r\n  /* Product: '<S100>/Divide1' */\r\n  *rty_RCT = (real32_T)rtu_Capacity / *rty_RDT;\r\n\r\n  /* Sum: '<S100>/Add' */\r\n  *rty_RDT = (real32_T)rtu_ReqSOC - rtu_Fake_SOC;\r\n\r\n  /* Saturate: '<S100>/Saturation2' */\r\n  if (*rty_RDT > 100.0F) {\r\n    *rty_RDT = 100.0F;\r\n  } else if (*rty_RDT < 0.0F) {\r\n    *rty_RDT = 0.0F;\r\n  }\r\n\r\n  /* End of Saturate: '<S100>/Saturation2' */\r\n\r\n  /* Gain: '<S100>/Gain' incorporates:\r\n   *  Product: '<S100>/Divide2'\r\n   */\r\n  *rty_RCT = *rty_RDT * *rty_RCT * 0.6F;\r\n\r\n  /* Saturate: '<S100>/Saturation' */\r\n  if (*rty_RCT > 100000.0F) {\r\n    *rty_RCT = 100000.0F;\r\n  } else if (*rty_RCT < 0.0F) {\r\n    *rty_RCT = 0.0F;\r\n  }\r\n\r\n  /* End of Saturate: '<S100>/Saturation' */\r\n\r\n  /* Product: '<S100>/Divide3' incorporates:\r\n   *  DiscreteIntegrator: '<S691>/Integrator'\r\n   */\r\n  *rty_RDT = (real32_T)rtu_Capacity / localDW->Integrator_DSTATE;\r\n\r\n  /* Gain: '<S100>/Gain1' incorporates:\r\n   *  Product: '<S100>/Divide4'\r\n   */\r\n  *rty_RDT = rtu_SOC * *rty_RDT * 0.6F;\r\n\r\n  /* Saturate: '<S100>/Saturation1' */\r\n  if (*rty_RDT > 100000.0F) {\r\n    *rty_RDT = 100000.0F;\r\n  } else if (*rty_RDT < 0.0F) {\r\n    *rty_RDT = 0.0F;\r\n  }\r\n\r\n  /* End of Saturate: '<S100>/Saturation1' */\r\n\r\n  /* Product: '<S100>/Divide5' incorporates:\r\n   *  DiscreteIntegrator: '<S691>/Integrator'\r\n   */\r\n  *rty_Add_Mileage_Range = localDW->Integrator_DSTATE * rtu_Mileage / (real32_T)\r\n    rtu_Capacity;\r\n\r\n  /* RateLimiter: '<S100>/Rate Limiter' */\r\n  rtb_Add1 = *rty_Add_Mileage_Range - localDW->PrevY;\r\n  if (rtb_Add1 > 1.0F) {\r\n    *rty_Add_Mileage_Range = localDW->PrevY + 1.0F;\r\n  } else if (rtb_Add1 < 0.0F) {\r\n    *rty_Add_Mileage_Range = localDW->PrevY;\r\n  }\r\n\r\n  localDW->PrevY = *rty_Add_Mileage_Range;\r\n\r\n  /* End of RateLimiter: '<S100>/Rate Limiter' */\r\n\r\n  /* Lookup_n-D: '<S100>/1-D Lookup Table3' */\r\n  *rty_RD_NEDC_F = look1_iflf_binlxpw(rtu_SOC,\r\n    test3_ConstP.uDLookupTable3_bp01Data, test3_ConstP.uDLookupTable3_tableData,\r\n    20UL);\r\n\r\n  /* Gain: '<S100>/Gain4' */\r\n  *rty_SOE = 2567.04F * *rty_RD_NEDC_F;\r\n\r\n  /* Gain: '<S100>/NEDC_F' */\r\n  *rty_RD_NEDC_F = 3.3F * rtu_SOC;\r\n\r\n  /* Gain: '<S100>/NEDC_F3' */\r\n  rtb_Add1 = 0.5F * *rty_RD_NEDC_F;\r\n\r\n  /* Chart: '<S100>/Chart1' */\r\n  if (localDW->temporalCounter_i1 < 127U) {\r\n    localDW->temporalCounter_i1 = (uint16_T)((int16_T)\r\n      localDW->temporalCounter_i1 + 1);\r\n  }\r\n\r\n  localDW->sfEvent = test3_CALL_EVENT;\r\n  test3_c6_test3(rtu_SOC, rtu_Mileage, localB, localDW);\r\n\r\n  /* End of Chart: '<S100>/Chart1' */\r\n\r\n  /* Sum: '<S100>/Add1' incorporates:\r\n   *  Product: '<S100>/Divide6'\r\n   */\r\n  rtb_Add1 += rtb_Add1 * localB->RD_OUT;\r\n\r\n  /* Saturate: '<S100>/Saturation3' */\r\n  if (rtb_Add1 > 600.0F) {\r\n    *rty_RD_NEDC_F1 = 600.0F;\r\n  } else if (rtb_Add1 < 0.0F) {\r\n    *rty_RD_NEDC_F1 = 0.0F;\r\n  } else {\r\n    *rty_RD_NEDC_F1 = rtb_Add1;\r\n  }\r\n\r\n  /* End of Saturate: '<S100>/Saturation3' */\r\n\r\n  /* Update for DiscreteIntegrator: '<S691>/Integrator' incorporates:\r\n   *  Product: '<S684>/1//T'\r\n   *  Sum: '<S684>/Sum1'\r\n   */\r\n  localDW->Integrator_IC_LOADING = 0U;\r\n  localDW->Integrator_DSTATE += 1.0F / rtb_AvoidDividebyZero_ez *\r\n    (rtu_Pack_Current - localDW->Integrator_DSTATE) * 0.01F;\r\n  if (localDW->Integrator_DSTATE >= 500.0F) {\r\n    localDW->Integrator_DSTATE = 500.0F;\r\n  } else if (localDW->Integrator_DSTATE <= -500.0F) {\r\n    localDW->Integrator_DSTATE = -500.0F;\r\n  }\r\n\r\n  localDW->Integrator_PrevResetState = (int16_T)rtb_Compare_m4;\r\n\r\n  /* End of Update for DiscreteIntegrator: '<S691>/Integrator' */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"RCTcc.h","type":"header","group":"subsystem","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Subsystem files","code":"/*\r\n * File: RCTcc.h\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_RCTcc_h_\r\n#define RTW_HEADER_RCTcc_h_\r\n#ifndef test3_COMMON_INCLUDES_\r\n#define test3_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#endif                                 /* test3_COMMON_INCLUDES_ */\r\n\r\n/* Block signals for system '<Root>/RCTcc' */\r\ntypedef struct {\r\n  real32_T Probe[2];                   /* '<S686>/Probe' */\r\n  real32_T RD_OUT;                     /* '<S100>/Chart1' */\r\n} B_RCTcc_test3_T;\r\n\r\n/* Block states (default storage) for system '<Root>/RCTcc' */\r\ntypedef struct {\r\n  real32_T Integrator_DSTATE;          /* '<S691>/Integrator' */\r\n  real32_T PrevY;                      /* '<S100>/Rate Limiter' */\r\n  real32_T Mileage2;                   /* '<S100>/Chart1' */\r\n  real32_T Mileage1;                   /* '<S100>/Chart1' */\r\n  real32_T SOE1;                       /* '<S100>/Chart1' */\r\n  real32_T RD_OUT1;                    /* '<S100>/Chart1' */\r\n  real32_T RD_OUT2;                    /* '<S100>/Chart1' */\r\n  real32_T RD_OUT3;                    /* '<S100>/Chart1' */\r\n  real32_T Mileage3;                   /* '<S100>/Chart1' */\r\n  int32_T sfEvent;                     /* '<S100>/Chart1' */\r\n  int16_T Integrator_PrevResetState;   /* '<S691>/Integrator' */\r\n  uint16_T Integrator_IC_LOADING;      /* '<S691>/Integrator' */\r\n  uint16_T is_active_c6_test3;         /* '<S100>/Chart1' */\r\n  uint16_T is_Control;                 /* '<S100>/Chart1' */\r\n  uint16_T is_active_Control;          /* '<S100>/Chart1' */\r\n  uint16_T is_Estimate_Mileage;        /* '<S100>/Chart1' */\r\n  uint16_T is_active_Estimate_Mileage; /* '<S100>/Chart1' */\r\n  uint16_T temporalCounter_i1;         /* '<S100>/Chart1' */\r\n} DW_RCTcc_test3_T;\r\n\r\nextern void test3_RCTcc_Init(B_RCTcc_test3_T *localB, DW_RCTcc_test3_T *localDW);\r\nextern void test3_RCTcc(uint16_T rtu_Capacity, real32_T rtu_Pack_Current,\r\n  uint16_T rtu_ReqSOC, real32_T rtu_Fake_SOC, real32_T rtu_SOC, real32_T\r\n  rtu_Mileage, real32_T *rty_RCT, real32_T *rty_RD_NEDC_F, real32_T *rty_RDT,\r\n  real32_T *rty_Add_Mileage_Range, real32_T *rty_SOE, real32_T *rty_RD_NEDC_F1,\r\n  B_RCTcc_test3_T *localB, DW_RCTcc_test3_T *localDW);\r\n\r\n#endif                                 /* RTW_HEADER_RCTcc_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"test3_data.c","type":"source","group":"data","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Data files","code":"/*\r\n * File: test3_data.c\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"test3.h\"\r\n\r\n/* Constant parameters (default storage) */\r\nconst ConstP_test3_T test3_ConstP = {\r\n  /* Computed Parameter: Rdc_tableData\r\n   * Referenced by: '<S99>/Rdc'\r\n   */\r\n  { 0.00905714277F, 0.00598928612F, 0.00532142911F, 0.00521071395F,\r\n    0.00513928616F, 0.00501428591F, 0.00505F, 0.00508571416F, 0.00515357079F,\r\n    0.00516428612F, 0.00569285685F, 0.00717142923F, 0.00406071404F,\r\n    0.00337857101F, 0.003325F, 0.00329642906F, 0.00335357105F, 0.00334285689F,\r\n    0.00342857093F, 0.003475F, 0.00342857093F, 0.00376428594F, 0.00220357091F,\r\n    0.0021F, 0.00214285706F, 0.00218928605F, 0.00216785702F, 0.002125F,\r\n    0.00219642906F, 0.00230714306F, 0.00231428607F, 0.00221428601F,\r\n    0.00238928595F, 0.00484642899F, 0.00205357093F, 0.00154285703F,\r\n    0.00128571398F, 0.00131428603F, 0.00131071405F, 0.001325F, 0.00144285697F,\r\n    0.00145F, 0.00133571401F, 0.00147142902F, 0.00482857088F, 0.00179285696F,\r\n    0.00131785695F, 0.00106785703F, 0.00107857096F, 0.00107857096F,\r\n    0.00108214305F, 0.00117857102F, 0.00118928601F, 0.001071429F, 0.00118214299F,\r\n    0.00451428583F, 0.00164285698F, 0.001225F, 0.000982143F, 0.000978571F,\r\n    0.000975F, 0.000971429F, 0.00105714297F, 0.00106071401F, 0.000946429F,\r\n    0.00103928603F, 0.00418928592F, 0.00157857104F, 0.001175F, 0.000932143F,\r\n    0.000925F, 0.000917857F, 0.000896429F, 0.000960714F, 0.000971429F, 0.00085F,\r\n    0.000928571F },\r\n\r\n  /* Computed Parameter: Rdc_bp01Data\r\n   * Referenced by: '<S99>/Rdc'\r\n   */\r\n  { 0.0F, 10.0F, 20.0F, 30.0F, 40.0F, 50.0F, 60.0F, 70.0F, 80.0F, 90.0F, 100.0F\r\n  },\r\n\r\n  /* Computed Parameter: Rdc_bp02Data\r\n   * Referenced by: '<S99>/Rdc'\r\n   */\r\n  { 263.15F, 273.15F, 283.15F, 298.15F, 308.15F, 318.15F, 328.15F },\r\n\r\n  /* Computed Parameter: HighTempChrgCurrentLim_tableDat\r\n   * Referenced by: '<S682>/HighTempChrgCurrentLim'\r\n   */\r\n  { 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F,\r\n    140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F,\r\n    140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F,\r\n    140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F,\r\n    140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F,\r\n    140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F,\r\n    140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F,\r\n    140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F,\r\n    139.999985F, 139.999878F, 139.999146F, 139.993637F, 139.953049F, 139.653839F,\r\n    137.481934F, 123.311592F, 70.0F, 16.6884098F, 2.51806951F, 0.346167237F,\r\n    0.0469490178F, 0.00635570148F, 0.000860184431F, 0.000116413925F,\r\n    1.57549221E-5F, 2.1321971E-6F, 2.88561523E-7F },\r\n\r\n  /* Pooled Parameter (Expression: 273.15+[-30:1:60])\r\n   * Referenced by:\r\n   *   '<S682>/HighTempChrgCurrentLim'\r\n   *   '<S682>/LowTempDchrgCurrentLim'\r\n   */\r\n  { 243.15F, 244.15F, 245.15F, 246.15F, 247.15F, 248.15F, 249.15F, 250.15F,\r\n    251.15F, 252.15F, 253.15F, 254.15F, 255.15F, 256.15F, 257.15F, 258.15F,\r\n    259.15F, 260.15F, 261.15F, 262.15F, 263.15F, 264.15F, 265.15F, 266.15F,\r\n    267.15F, 268.15F, 269.15F, 270.15F, 271.15F, 272.15F, 273.15F, 274.15F,\r\n    275.15F, 276.15F, 277.15F, 278.15F, 279.15F, 280.15F, 281.15F, 282.15F,\r\n    283.15F, 284.15F, 285.15F, 286.15F, 287.15F, 288.15F, 289.15F, 290.15F,\r\n    291.15F, 292.15F, 293.15F, 294.15F, 295.15F, 296.15F, 297.15F, 298.15F,\r\n    299.15F, 300.15F, 301.15F, 302.15F, 303.15F, 304.15F, 305.15F, 306.15F,\r\n    307.15F, 308.15F, 309.15F, 310.15F, 311.15F, 312.15F, 313.15F, 314.15F,\r\n    315.15F, 316.15F, 317.15F, 318.15F, 319.15F, 320.15F, 321.15F, 322.15F,\r\n    323.15F, 324.15F, 325.15F, 326.15F, 327.15F, 328.15F, 329.15F, 330.15F,\r\n    331.15F, 332.15F, 333.15F },\r\n\r\n  /* Computed Parameter: LowTempDchrgCurrentLim_tableDat\r\n   * Referenced by: '<S682>/LowTempDchrgCurrentLim'\r\n   */\r\n  { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F,\r\n    0.0F, 7.77156117E-15F, 3.10862447E-14F, 2.40918396E-13F, 1.77191595E-12F,\r\n    1.31028521E-11F, 9.6802566E-11F, 7.15271176E-10F, 5.28519E-9F, 3.9052555E-8F,\r\n    2.88561523E-7F, 2.1321971E-6F, 1.57549221E-5F, 0.000116413925F,\r\n    0.000860184431F, 0.00635570148F, 0.0469490178F, 0.346167237F, 2.51806951F,\r\n    16.6884098F, 70.0F, 123.311592F, 137.481934F, 139.653839F, 139.953049F,\r\n    139.993637F, 139.999146F, 139.999878F, 139.999985F, 140.0F, 140.0F, 140.0F,\r\n    140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F,\r\n    140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F,\r\n    140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F,\r\n    140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F,\r\n    140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F, 140.0F,\r\n    140.0F },\r\n\r\n  /* Computed Parameter: Rdc1_tableData\r\n   * Referenced by: '<S683>/Rdc1'\r\n   */\r\n  { 3.0F, 2.0F, 1.5F, 1.2F, 1.0F, 0.85F, 0.7F },\r\n\r\n  /* Computed Parameter: Rdc1_bp01Data\r\n   * Referenced by: '<S683>/Rdc1'\r\n   */\r\n  { 0.0F, 5.0F, 10.0F, 20.0F, 30.0F, 40.0F, 50.0F },\r\n\r\n  /* Computed Parameter: HighTempDchrgCurrentLim_tableDa\r\n   * Referenced by: '<S683>/HighTempDchrgCurrentLim'\r\n   */\r\n  { 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F,\r\n    460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F,\r\n    460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F,\r\n    460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F,\r\n    460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F,\r\n    460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F,\r\n    460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F,\r\n    460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F,\r\n    459.999939F, 459.999634F, 459.997284F, 459.98F, 459.852448F, 458.912048F,\r\n    452.08606F, 407.55072F, 240.0F, 72.4492874F, 27.9139328F, 21.0879536F,\r\n    20.1475544F, 20.0199757F, 20.0027027F, 20.0003662F, 20.0000496F, 20.0000076F,\r\n    20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F\r\n  },\r\n\r\n  /* Pooled Parameter (Expression: 273.15+[-30:1:70])\r\n   * Referenced by:\r\n   *   '<S683>/HighTempDchrgCurrentLim'\r\n   *   '<S683>/LowTempDchrgCurrentLim'\r\n   */\r\n  { 243.15F, 244.15F, 245.15F, 246.15F, 247.15F, 248.15F, 249.15F, 250.15F,\r\n    251.15F, 252.15F, 253.15F, 254.15F, 255.15F, 256.15F, 257.15F, 258.15F,\r\n    259.15F, 260.15F, 261.15F, 262.15F, 263.15F, 264.15F, 265.15F, 266.15F,\r\n    267.15F, 268.15F, 269.15F, 270.15F, 271.15F, 272.15F, 273.15F, 274.15F,\r\n    275.15F, 276.15F, 277.15F, 278.15F, 279.15F, 280.15F, 281.15F, 282.15F,\r\n    283.15F, 284.15F, 285.15F, 286.15F, 287.15F, 288.15F, 289.15F, 290.15F,\r\n    291.15F, 292.15F, 293.15F, 294.15F, 295.15F, 296.15F, 297.15F, 298.15F,\r\n    299.15F, 300.15F, 301.15F, 302.15F, 303.15F, 304.15F, 305.15F, 306.15F,\r\n    307.15F, 308.15F, 309.15F, 310.15F, 311.15F, 312.15F, 313.15F, 314.15F,\r\n    315.15F, 316.15F, 317.15F, 318.15F, 319.15F, 320.15F, 321.15F, 322.15F,\r\n    323.15F, 324.15F, 325.15F, 326.15F, 327.15F, 328.15F, 329.15F, 330.15F,\r\n    331.15F, 332.15F, 333.15F, 334.15F, 335.15F, 336.15F, 337.15F, 338.15F,\r\n    339.15F, 340.15F, 341.15F, 342.15F, 343.15F },\r\n\r\n  /* Computed Parameter: LowTempDchrgCurrentLim_tableD_j\r\n   * Referenced by: '<S683>/LowTempDchrgCurrentLim'\r\n   */\r\n  { 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F,\r\n    20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F, 20.0F,\r\n    20.0000076F, 20.0000496F, 20.0003662F, 20.0027027F, 20.0199757F, 20.1475544F,\r\n    21.0879536F, 27.9139328F, 72.4492874F, 240.0F, 407.55072F, 452.08606F,\r\n    458.912048F, 459.852448F, 459.98F, 459.997284F, 459.999634F, 459.999939F,\r\n    460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F,\r\n    460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F,\r\n    460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F,\r\n    460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F,\r\n    460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F,\r\n    460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F,\r\n    460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F, 460.0F },\r\n\r\n  /* Computed Parameter: uDLookupTable3_tableData\r\n   * Referenced by: '<S100>/1-D Lookup Table3'\r\n   */\r\n  { 0.0F, 0.7503F, 1.545F, 2.367F, 3.313F, 4.078F, 4.955F, 5.843F, 6.744F,\r\n    7.659F, 8.586F, 9.523F, 10.47F, 11.43F, 12.4F, 13.38F, 14.37F, 15.38F, 16.4F,\r\n    17.42F, 18.45F },\r\n\r\n  /* Computed Parameter: uDLookupTable3_bp01Data\r\n   * Referenced by: '<S100>/1-D Lookup Table3'\r\n   */\r\n  { 0.0F, 5.0F, 10.0F, 15.0F, 20.0F, 25.0F, 30.0F, 35.0F, 40.0F, 45.0F, 50.0F,\r\n    55.0F, 60.0F, 65.0F, 70.0F, 75.0F, 80.0F, 85.0F, 90.0F, 95.0F, 100.0F },\r\n\r\n  /* Computed Parameter: Rdc_maxIndex\r\n   * Referenced by: '<S99>/Rdc'\r\n   */\r\n  { 10U, 6U }\r\n};\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetInf.c","type":"source","group":"utility","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtGetInf.c\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rtGetInf.h\"\r\n#include <stddef.h>\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 16U\r\n\r\n/*\r\n * Initialize rtInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T inf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    inf = rtGetInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    inf = tmpVal.fltVal;\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\n/*\r\n * Initialize rtInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetInfF(void)\r\n{\r\n  IEEESingle infF;\r\n  infF.wordL.wordLuint = 0x7F800000U;\r\n  return infF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetMinusInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T minf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    minf = rtGetMinusInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    minf = tmpVal.fltVal;\r\n  }\r\n\r\n  return minf;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetMinusInfF(void)\r\n{\r\n  IEEESingle minfF;\r\n  minfF.wordL.wordLuint = 0xFF800000U;\r\n  return minfF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetInf.h","type":"header","group":"utility","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtGetInf.h\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtGetInf_h_\r\n#define RTW_HEADER_rtGetInf_h_\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtGetInf(void);\r\nextern real32_T rtGetInfF(void);\r\nextern real_T rtGetMinusInf(void);\r\nextern real32_T rtGetMinusInfF(void);\r\n\r\n#endif                                 /* RTW_HEADER_rtGetInf_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetNaN.c","type":"source","group":"utility","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtGetNaN.c\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rtGetNaN.h\"\r\n#include <stddef.h>\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 16U\r\n\r\n/*\r\n * Initialize rtNaN needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetNaN(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T nan = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    nan = rtGetNaNF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    nan = tmpVal.fltVal;\r\n  }\r\n\r\n  return nan;\r\n}\r\n\r\n/*\r\n * Initialize rtNaNF needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetNaNF(void)\r\n{\r\n  IEEESingle nanF = { { 0.0F } };\r\n\r\n  nanF.wordL.wordLuint = 0xFFC00000U;\r\n  return nanF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetNaN.h","type":"header","group":"utility","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtGetNaN.h\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtGetNaN_h_\r\n#define RTW_HEADER_rtGetNaN_h_\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtGetNaN(void);\r\nextern real32_T rtGetNaNF(void);\r\n\r\n#endif                                 /* RTW_HEADER_rtGetNaN_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rt_nonfinite.c","type":"source","group":"utility","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rt_nonfinite.c\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtGetNaN.h\"\r\n#include \"rtGetInf.h\"\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 16U\r\n\r\nreal_T rtInf;\r\nreal_T rtMinusInf;\r\nreal_T rtNaN;\r\nreal32_T rtInfF;\r\nreal32_T rtMinusInfF;\r\nreal32_T rtNaNF;\r\n\r\n/*\r\n * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n * generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nvoid rt_InitInfAndNaN(size_t realSize)\r\n{\r\n  (void) (realSize);\r\n  rtNaN = rtGetNaN();\r\n  rtNaNF = rtGetNaNF();\r\n  rtInf = rtGetInf();\r\n  rtInfF = rtGetInfF();\r\n  rtMinusInf = rtGetMinusInf();\r\n  rtMinusInfF = rtGetMinusInfF();\r\n}\r\n\r\n/* Test if value is infinite */\r\nboolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nboolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nboolean_T rtIsNaN(real_T value)\r\n{\r\n  boolean_T result = (boolean_T) 0;\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  if (bitsPerReal == 32U) {\r\n    result = rtIsNaNF((real32_T)value);\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.fltVal = value;\r\n    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\r\n                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                          (tmpVal.bitVal.words.wordL != 0) ));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nboolean_T rtIsNaNF(real32_T value)\r\n{\r\n  IEEESingle tmp;\r\n  tmp.wordL.wordLreal = value;\r\n  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rt_nonfinite.h","type":"header","group":"utility","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rt_nonfinite.h\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rt_nonfinite_h_\r\n#define RTW_HEADER_rt_nonfinite_h_\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nextern void rt_InitInfAndNaN(size_t realSize);\r\nextern boolean_T rtIsInf(real_T value);\r\nextern boolean_T rtIsInfF(real32_T value);\r\nextern boolean_T rtIsNaN(real_T value);\r\nextern boolean_T rtIsNaNF(real32_T value);\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordH;\r\n    uint32_T wordL;\r\n  } words;\r\n} BigEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordL;\r\n    uint32_T wordH;\r\n  } words;\r\n} LittleEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  union {\r\n    real32_T wordLreal;\r\n    uint32_T wordLuint;\r\n  } wordL;\r\n} IEEESingle;\r\n\r\n#endif                                 /* RTW_HEADER_rt_nonfinite_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Texas Instruments->C2000\r\n *   Number of bits:     char:  16    short:   16    int:  16\r\n *                       long:  32    long long:  64\r\n *                       native word size:  16\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *                                                                       *\r\n *                                                                       *\r\n *   Note:  Because the specified hardware does not have native support  *\r\n *          for all data sizes, some data types are actually typedef'ed  *\r\n *          from larger native data sizes.  The following data types are *\r\n *          not in the ideal native data types:                          *\r\n *                                                                       *\r\n *          int8_T, uint8_T                                              *\r\n *=======================================================================*/\r\ntypedef int int8_T;\r\ntypedef unsigned int uint8_T;\r\ntypedef int int16_T;\r\ntypedef unsigned int uint16_T;\r\ntypedef long int32_T;\r\ntypedef unsigned long uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned int boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n#define CINT64_T\r\n\r\ntypedef struct {\r\n  int64_T re;\r\n  int64_T im;\r\n} cint64_T;\r\n\r\n#define CUINT64_T\r\n\r\ntypedef struct {\r\n  uint64_T re;\r\n  uint64_T im;\r\n} cuint64_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647L))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647L-1L))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFUL))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\Users\\guest-ebadifard\\Desktop\\test3\\test3_ert_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * File: rtmodel.h\r\n *\r\n * Code generated for Simulink model 'test3'.\r\n *\r\n * Model version                  : 2.300\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Mon May 15 12:45:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n#include \"test3.h\"\r\n\r\n/* Macros generated for backwards compatibility  */\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((void*) 0)\r\n#endif\r\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};