var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"DC_DC_source_based_matrix_switches1/mcu","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"D:\\Thesis\\mcu_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'mcu'.\r\n *\r\n * Model version                  : 3.20\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb 23 17:51:20 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: STMicroelectronics->ST10/Super10\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"mcu.h\"                       /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(mcu_M, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  mcu_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  mcu_initialize();\r\n\r\n  /* Simulating the model step behavior (in non real-time) to\r\n   *  simulate model behavior at stop time.\r\n   */\r\n  while ((rtmGetErrorStatus(mcu_M) == (NULL)) && !rtmGetStopRequested(mcu_M)) {\r\n    rt_OneStep();\r\n  }\r\n\r\n  /* Terminate model */\r\n  mcu_terminate();\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"mcu.c","type":"source","group":"model","path":"D:\\Thesis\\mcu_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: mcu.c\r\n *\r\n * Code generated for Simulink model 'mcu'.\r\n *\r\n * Model version                  : 3.20\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb 23 17:51:20 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: STMicroelectronics->ST10/Super10\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"mcu.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"mcu_private.h\"\r\n#include \"coloumb_counting.h\"\r\n#include \"rt_nonfinite.h\"\r\n\r\n/* Block signals (default storage) */\r\nB_mcu_T mcu_B;\r\n\r\n/* Block states (default storage) */\r\nDW_mcu_T mcu_DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU_mcu_T mcu_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY_mcu_T mcu_Y;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_mcu_T mcu_M_;\r\nRT_MODEL_mcu_T *const mcu_M = &mcu_M_;\r\nstatic void rate_scheduler(void);\r\n\r\n/*\r\n *         This function updates active task flag for each subrate.\r\n *         The function is called at model base rate, hence the\r\n *         generated code self-manages all its subrates.\r\n */\r\nstatic void rate_scheduler(void)\r\n{\r\n  /* Compute which subrates run during the next base time step.  Subrates\r\n   * are an integer multiple of the base rate counter.  Therefore, the subtask\r\n   * counter is reset when it reaches its limit (zero means run).\r\n   */\r\n  (mcu_M->Timing.TaskCounters.TID[1])++;\r\n  if ((mcu_M->Timing.TaskCounters.TID[1]) > 9) {/* Sample time: [0.01s, 0.0s] */\r\n    mcu_M->Timing.TaskCounters.TID[1] = 0;\r\n  }\r\n}\r\n\r\n/*\r\n * Output and update for atomic system:\r\n *    '<S1>/demux n'\r\n *    '<S1>/demux p'\r\n */\r\nvoid mcu_demuxn(real_T rtu_u, real_T *rty_s1, real_T *rty_s2, real_T *rty_s3,\r\n                real_T *rty_s4, real_T *rty_s5, real_T *rty_s6, real_T *rty_s7,\r\n                real_T *rty_s8, real_T *rty_s9)\r\n{\r\n  /* :  switch(u) */\r\n  switch ((int16_T)rtu_u) {\r\n   case 1:\r\n    /* :  case 1 */\r\n    /* :  s1 = 1; */\r\n    *rty_s1 = 1.0;\r\n\r\n    /* :  s2 = 0; */\r\n    *rty_s2 = 0.0;\r\n\r\n    /* :  s3 = 0; */\r\n    *rty_s3 = 0.0;\r\n\r\n    /* :  s4 = 0; */\r\n    *rty_s4 = 0.0;\r\n\r\n    /* :  s5 = 0; */\r\n    *rty_s5 = 0.0;\r\n\r\n    /* :  s6 = 0; */\r\n    *rty_s6 = 0.0;\r\n\r\n    /* :  s7 = 0; */\r\n    *rty_s7 = 0.0;\r\n\r\n    /* :  s8 = 0; */\r\n    *rty_s8 = 0.0;\r\n\r\n    /* :  s9 = 0; */\r\n    *rty_s9 = 0.0;\r\n    break;\r\n\r\n   case 2:\r\n    /* :  case 2 */\r\n    /* :  s1 = 0; */\r\n    *rty_s1 = 0.0;\r\n\r\n    /* :  s2 = 1; */\r\n    *rty_s2 = 1.0;\r\n\r\n    /* :  s3 = 0; */\r\n    *rty_s3 = 0.0;\r\n\r\n    /* :  s4 = 0; */\r\n    *rty_s4 = 0.0;\r\n\r\n    /* :  s5 = 0; */\r\n    *rty_s5 = 0.0;\r\n\r\n    /* :  s6 = 0; */\r\n    *rty_s6 = 0.0;\r\n\r\n    /* :  s7 = 0; */\r\n    *rty_s7 = 0.0;\r\n\r\n    /* :  s8 = 0; */\r\n    *rty_s8 = 0.0;\r\n\r\n    /* :  s9 = 0; */\r\n    *rty_s9 = 0.0;\r\n    break;\r\n\r\n   case 3:\r\n    /* :  case 3 */\r\n    /* :  s1 = 0; */\r\n    *rty_s1 = 0.0;\r\n\r\n    /* :  s2 = 0; */\r\n    *rty_s2 = 0.0;\r\n\r\n    /* :  s3 = 1; */\r\n    *rty_s3 = 1.0;\r\n\r\n    /* :  s4 = 0; */\r\n    *rty_s4 = 0.0;\r\n\r\n    /* :  s5 = 0; */\r\n    *rty_s5 = 0.0;\r\n\r\n    /* :  s6 = 0; */\r\n    *rty_s6 = 0.0;\r\n\r\n    /* :  s7 = 0; */\r\n    *rty_s7 = 0.0;\r\n\r\n    /* :  s8 = 0; */\r\n    *rty_s8 = 0.0;\r\n\r\n    /* :  s9 = 0; */\r\n    *rty_s9 = 0.0;\r\n    break;\r\n\r\n   case 4:\r\n    /* :  case 4 */\r\n    /* :  s1 = 0; */\r\n    *rty_s1 = 0.0;\r\n\r\n    /* :  s2 = 0; */\r\n    *rty_s2 = 0.0;\r\n\r\n    /* :  s3 = 0; */\r\n    *rty_s3 = 0.0;\r\n\r\n    /* :  s4 = 1; */\r\n    *rty_s4 = 1.0;\r\n\r\n    /* :  s5 = 0; */\r\n    *rty_s5 = 0.0;\r\n\r\n    /* :  s6 = 0; */\r\n    *rty_s6 = 0.0;\r\n\r\n    /* :  s7 = 0; */\r\n    *rty_s7 = 0.0;\r\n\r\n    /* :  s8 = 0; */\r\n    *rty_s8 = 0.0;\r\n\r\n    /* :  s9 = 0; */\r\n    *rty_s9 = 0.0;\r\n    break;\r\n\r\n   case 5:\r\n    /* :  case 5 */\r\n    /* :  s1 = 0; */\r\n    *rty_s1 = 0.0;\r\n\r\n    /* :  s2 = 0; */\r\n    *rty_s2 = 0.0;\r\n\r\n    /* :  s3 = 0; */\r\n    *rty_s3 = 0.0;\r\n\r\n    /* :  s4 = 0; */\r\n    *rty_s4 = 0.0;\r\n\r\n    /* :  s5 = 1; */\r\n    *rty_s5 = 1.0;\r\n\r\n    /* :  s6 = 0; */\r\n    *rty_s6 = 0.0;\r\n\r\n    /* :  s7 = 0; */\r\n    *rty_s7 = 0.0;\r\n\r\n    /* :  s8 = 0; */\r\n    *rty_s8 = 0.0;\r\n\r\n    /* :  s9 = 0; */\r\n    *rty_s9 = 0.0;\r\n    break;\r\n\r\n   case 6:\r\n    /* :  case 6 */\r\n    /* :  s1 = 0; */\r\n    *rty_s1 = 0.0;\r\n\r\n    /* :  s2 = 0; */\r\n    *rty_s2 = 0.0;\r\n\r\n    /* :  s3 = 0; */\r\n    *rty_s3 = 0.0;\r\n\r\n    /* :  s4 = 0; */\r\n    *rty_s4 = 0.0;\r\n\r\n    /* :  s5 = 0; */\r\n    *rty_s5 = 0.0;\r\n\r\n    /* :  s6 = 1; */\r\n    *rty_s6 = 1.0;\r\n\r\n    /* :  s7 = 0; */\r\n    *rty_s7 = 0.0;\r\n\r\n    /* :  s8 = 0; */\r\n    *rty_s8 = 0.0;\r\n\r\n    /* :  s9 = 0; */\r\n    *rty_s9 = 0.0;\r\n    break;\r\n\r\n   case 7:\r\n    /* :  case 7 */\r\n    /* :  s1 = 0; */\r\n    *rty_s1 = 0.0;\r\n\r\n    /* :  s2 = 0; */\r\n    *rty_s2 = 0.0;\r\n\r\n    /* :  s3 = 0; */\r\n    *rty_s3 = 0.0;\r\n\r\n    /* :  s4 = 0; */\r\n    *rty_s4 = 0.0;\r\n\r\n    /* :  s5 = 0; */\r\n    *rty_s5 = 0.0;\r\n\r\n    /* :  s6 = 0; */\r\n    *rty_s6 = 0.0;\r\n\r\n    /* :  s7 = 1; */\r\n    *rty_s7 = 1.0;\r\n\r\n    /* :  s8 = 0; */\r\n    *rty_s8 = 0.0;\r\n\r\n    /* :  s9 = 0; */\r\n    *rty_s9 = 0.0;\r\n    break;\r\n\r\n   case 8:\r\n    /* :  case 8 */\r\n    /* :  s1 = 0; */\r\n    *rty_s1 = 0.0;\r\n\r\n    /* :  s2 = 0; */\r\n    *rty_s2 = 0.0;\r\n\r\n    /* :  s3 = 0; */\r\n    *rty_s3 = 0.0;\r\n\r\n    /* :  s4 = 0; */\r\n    *rty_s4 = 0.0;\r\n\r\n    /* :  s5 = 0; */\r\n    *rty_s5 = 0.0;\r\n\r\n    /* :  s6 = 0; */\r\n    *rty_s6 = 0.0;\r\n\r\n    /* :  s7 = 0; */\r\n    *rty_s7 = 0.0;\r\n\r\n    /* :  s8 = 1; */\r\n    *rty_s8 = 1.0;\r\n\r\n    /* :  s9 = 0; */\r\n    *rty_s9 = 0.0;\r\n    break;\r\n\r\n   case 9:\r\n    /* :  case 9 */\r\n    /* :  s1 = 0; */\r\n    *rty_s1 = 0.0;\r\n\r\n    /* :  s2 = 0; */\r\n    *rty_s2 = 0.0;\r\n\r\n    /* :  s3 = 0; */\r\n    *rty_s3 = 0.0;\r\n\r\n    /* :  s4 = 0; */\r\n    *rty_s4 = 0.0;\r\n\r\n    /* :  s5 = 0; */\r\n    *rty_s5 = 0.0;\r\n\r\n    /* :  s6 = 0; */\r\n    *rty_s6 = 0.0;\r\n\r\n    /* :  s7 = 0; */\r\n    *rty_s7 = 0.0;\r\n\r\n    /* :  s8 = 0; */\r\n    *rty_s8 = 0.0;\r\n\r\n    /* :  s9 = 1; */\r\n    *rty_s9 = 1.0;\r\n    break;\r\n\r\n   default:\r\n    /* :  otherwise */\r\n    /* :  s1 = 0; */\r\n    *rty_s1 = 0.0;\r\n\r\n    /* :  s2 = 0; */\r\n    *rty_s2 = 0.0;\r\n\r\n    /* :  s3 = 0; */\r\n    *rty_s3 = 0.0;\r\n\r\n    /* :  s4 = 0; */\r\n    *rty_s4 = 0.0;\r\n\r\n    /* :  s5 = 0; */\r\n    *rty_s5 = 0.0;\r\n\r\n    /* :  s6 = 0; */\r\n    *rty_s6 = 0.0;\r\n\r\n    /* :  s7 = 0; */\r\n    *rty_s7 = 0.0;\r\n\r\n    /* :  s8 = 0; */\r\n    *rty_s8 = 0.0;\r\n\r\n    /* :  s9 = 0; */\r\n    *rty_s9 = 0.0;\r\n    break;\r\n  }\r\n}\r\n\r\n/* Model step function */\r\nvoid mcu_step(void)\r\n{\r\n  real_T dst_trg_soc_av_tmp[50];\r\n  real_T RateTransition_Buffer;\r\n  real_T c_y;\r\n  int16_T b_k;\r\n  int16_T eq_current_tmp;\r\n  int16_T i;\r\n  int16_T vlen;\r\n  boolean_T x[2];\r\n  boolean_T exitg1;\r\n  boolean_T y;\r\n\r\n  /* Memory: '<S1>/Memory' */\r\n  mcu_B.Memory[0] = mcu_DW.Memory_PreviousInput[0];\r\n\r\n  /* Memory: '<S1>/Memory1' */\r\n  mcu_B.Memory1[0] = mcu_DW.Memory1_PreviousInput[0];\r\n\r\n  /* Memory: '<S1>/Memory' */\r\n  mcu_B.Memory[1] = mcu_DW.Memory_PreviousInput[1];\r\n\r\n  /* Memory: '<S1>/Memory1' */\r\n  mcu_B.Memory1[1] = mcu_DW.Memory1_PreviousInput[1];\r\n\r\n  /* MATLAB Function: '<S1>/battery_selector' */\r\n  /* :  sw_pos = 0; */\r\n  mcu_B.sw_pos = 0.0;\r\n\r\n  /* :  sw_neg = 0; */\r\n  mcu_B.sw_neg = 0.0;\r\n\r\n  /* Outport: '<Root>/eq_current' incorporates:\r\n   *  MATLAB Function: '<S1>/battery_selector'\r\n   */\r\n  /* :  eq_current = 0; */\r\n  mcu_Y.eq_current = 0.0;\r\n\r\n  /* MATLAB Function: '<S1>/battery_selector' incorporates:\r\n   *  Memory: '<S1>/Memory'\r\n   *  Memory: '<S1>/Memory1'\r\n   */\r\n  /* :  eq_current_tmp = 0; */\r\n  /* :  if ( batts_to_charge(1, 1) <= batts_to_charge(1, 2) && ... */\r\n  /* :       batts_to_discharge(1, 1) <= batts_to_discharge(1, 2)) */\r\n  if ((mcu_B.Memory[0] <= mcu_B.Memory[1]) && (mcu_B.Memory1[0] <=\r\n       mcu_B.Memory1[1])) {\r\n    /* :  if(direction == 0) */\r\n    /* :  sw_pos = batts_to_discharge(1, 1); */\r\n    mcu_B.sw_pos = mcu_B.Memory1[0];\r\n\r\n    /* :  sw_neg = batts_to_discharge(1, 2); */\r\n    mcu_B.sw_neg = mcu_B.Memory1[1];\r\n\r\n    /* :  eq_current_tmp = 4; */\r\n    /* :  if(V_batt < 2) */\r\n    /* :  eq_current = 0; */\r\n  }\r\n\r\n  /* MATLAB Function: '<S1>/demux n' incorporates:\r\n   *  Outport: '<Root>/g1n'\r\n   *  Outport: '<Root>/g2n'\r\n   *  Outport: '<Root>/g3n'\r\n   *  Outport: '<Root>/g4n'\r\n   *  Outport: '<Root>/g5n'\r\n   *  Outport: '<Root>/g6n'\r\n   *  Outport: '<Root>/g7n'\r\n   *  Outport: '<Root>/g8n'\r\n   *  Outport: '<Root>/g9n'\r\n   */\r\n  mcu_demuxn(mcu_B.sw_neg, &mcu_Y.g1n, &mcu_Y.g2n, &mcu_Y.g3n, &mcu_Y.g4n,\r\n             &mcu_Y.g5n, &mcu_Y.g6n, &mcu_Y.g7n, &mcu_Y.g8n, &mcu_Y.g9n);\r\n\r\n  /* MATLAB Function: '<S1>/demux p' incorporates:\r\n   *  Outport: '<Root>/g1p'\r\n   *  Outport: '<Root>/g2p'\r\n   *  Outport: '<Root>/g3p'\r\n   *  Outport: '<Root>/g4p'\r\n   *  Outport: '<Root>/g5p'\r\n   *  Outport: '<Root>/g6p'\r\n   *  Outport: '<Root>/g7p'\r\n   *  Outport: '<Root>/g8p'\r\n   *  Outport: '<Root>/g9p'\r\n   */\r\n  mcu_demuxn(mcu_B.sw_pos, &mcu_Y.g1p, &mcu_Y.g2p, &mcu_Y.g3p, &mcu_Y.g4p,\r\n             &mcu_Y.g5p, &mcu_Y.g6p, &mcu_Y.g7p, &mcu_Y.g8p, &mcu_Y.g9p);\r\n\r\n  /* RateTransition: '<S1>/Rate Transition' */\r\n  if (mcu_M->Timing.TaskCounters.TID[1] == 0) {\r\n    for (i = 0; i < 9; i++) {\r\n      RateTransition_Buffer = mcu_U.current[i];\r\n      mcu_DW.RateTransition_Buffer[i] = RateTransition_Buffer;\r\n\r\n      /* RateTransition: '<S1>/Rate Transition' incorporates:\r\n       *  Inport: '<Root>/I_meas'\r\n       */\r\n      mcu_B.RateTransition[i] = RateTransition_Buffer;\r\n\r\n      /* RateTransition: '<S1>/Rate Transition1' incorporates:\r\n       *  Inport: '<Root>/SOC_init'\r\n       */\r\n      RateTransition_Buffer = mcu_U.SOC_c[i];\r\n      mcu_DW.RateTransition1_Buffer[i] = RateTransition_Buffer;\r\n\r\n      /* RateTransition: '<S1>/Rate Transition1' */\r\n      mcu_B.RateTransition1[i] = RateTransition_Buffer;\r\n    }\r\n\r\n    /* ModelReference: '<S1>/Ah_estimator' incorporates:\r\n     *  Inport: '<Root>/CAP_Ah'\r\n     *  Inport: '<Root>/I_meas'\r\n     */\r\n    coloumb_counting(&mcu_B.RateTransition[0], &mcu_U.CAP_Ah,\r\n                     &mcu_B.RateTransition1[0], &mcu_B.Ah_estimator[0],\r\n                     &(mcu_DW.Ah_estimator_InstanceData.rtdw));\r\n  }\r\n\r\n  /* End of RateTransition: '<S1>/Rate Transition' */\r\n\r\n  /* MATLAB Function: '<S1>/equalizer' incorporates:\r\n   *  Inport: '<Root>/SOC'\r\n   *  Inport: '<Root>/dst_q_cls'\r\n   *  Inport: '<Root>/dst_trg_soc_av'\r\n   *  Inport: '<Root>/src_q_cls'\r\n   *  Inport: '<Root>/src_trg_soc_av'\r\n   */\r\n  /* :  stop_simulation  = 0; */\r\n  mcu_B.stop_simulation = 0.0;\r\n\r\n  /* :  source_batts = [0 0]; */\r\n  /* :  destinations_batts = [0 0]; */\r\n  mcu_B.source_batts[0] = 0.0;\r\n  mcu_B.destinations_batts[0] = 0.0;\r\n  mcu_B.source_batts[1] = 0.0;\r\n  mcu_B.destinations_batts[1] = 0.0;\r\n\r\n  /* :  dst_trg_soc_av_tmp = dst_trg_soc_av; */\r\n  /* :  src_trg_soc_av_tmp = src_trg_soc_av; */\r\n  /* :  dst_trg_soc_av_tmp(dst_trg_soc_av == 0) = Inf; */\r\n  for (i = 0; i < 50; i++) {\r\n    RateTransition_Buffer = mcu_U.dst_trg_soc_av[i];\r\n    dst_trg_soc_av_tmp[i] = RateTransition_Buffer;\r\n    if (RateTransition_Buffer == 0.0) {\r\n      dst_trg_soc_av_tmp[i] = (rtInf);\r\n    }\r\n  }\r\n\r\n  /* :  step = length(src_q_cls); */\r\n  /* :  if isempty(step_cnt) */\r\n  /* :  soc = SOC'; */\r\n  /* :  if src_q_cls(step_cnt, :) > 0 */\r\n  i = (int16_T)mcu_DW.step_cnt;\r\n  x[0] = (mcu_U.src_q_cls[i - 1] > 0.0);\r\n  x[1] = (mcu_U.src_q_cls[i + 49] > 0.0);\r\n  y = true;\r\n  eq_current_tmp = 0;\r\n  exitg1 = false;\r\n  while ((!exitg1) && (eq_current_tmp < 2)) {\r\n    if (!x[eq_current_tmp]) {\r\n      y = false;\r\n      exitg1 = true;\r\n    } else {\r\n      eq_current_tmp++;\r\n    }\r\n  }\r\n\r\n  if (y) {\r\n    /* :  source_batts = src_q_cls(step_cnt, :); */\r\n    i = (int16_T)mcu_DW.step_cnt;\r\n\r\n    /* :  destinations_batts = dst_q_cls(step_cnt, :); */\r\n    vlen = (int16_T)mcu_DW.step_cnt;\r\n    mcu_B.source_batts[0] = mcu_U.src_q_cls[i - 1];\r\n    mcu_B.destinations_batts[0] = mcu_U.dst_q_cls[vlen - 1];\r\n    mcu_B.source_batts[1] = mcu_U.src_q_cls[i + 49];\r\n    mcu_B.destinations_batts[1] = mcu_U.dst_q_cls[vlen + 49];\r\n\r\n    /* :  sm = mean(soc(src_q_cls(step_cnt, 1):src_q_cls(step_cnt, 2))); */\r\n    if (mcu_U.src_q_cls[(int16_T)mcu_DW.step_cnt - 1] > mcu_U.src_q_cls[(int16_T)\r\n        mcu_DW.step_cnt + 49]) {\r\n      eq_current_tmp = 0;\r\n      i = 0;\r\n    } else {\r\n      eq_current_tmp = (int16_T)mcu_U.src_q_cls[(int16_T)mcu_DW.step_cnt - 1] -\r\n        1;\r\n      i = (int16_T)mcu_U.src_q_cls[(int16_T)mcu_DW.step_cnt + 49];\r\n    }\r\n\r\n    i -= eq_current_tmp;\r\n    vlen = i;\r\n    if (i == 0) {\r\n      RateTransition_Buffer = 0.0;\r\n    } else {\r\n      RateTransition_Buffer = mcu_U.SOC[eq_current_tmp];\r\n      for (b_k = 2; b_k <= vlen; b_k++) {\r\n        RateTransition_Buffer += mcu_U.SOC[(eq_current_tmp + b_k) - 1];\r\n      }\r\n    }\r\n\r\n    /* :  dm = mean(soc(dst_q_cls(step_cnt, 1):dst_q_cls(step_cnt, 2))); */\r\n    if (mcu_U.dst_q_cls[(int16_T)mcu_DW.step_cnt - 1] > mcu_U.dst_q_cls[(int16_T)\r\n        mcu_DW.step_cnt + 49]) {\r\n      vlen = 0;\r\n      b_k = 0;\r\n    } else {\r\n      vlen = (int16_T)mcu_U.dst_q_cls[(int16_T)mcu_DW.step_cnt - 1] - 1;\r\n      b_k = (int16_T)mcu_U.dst_q_cls[(int16_T)mcu_DW.step_cnt + 49];\r\n    }\r\n\r\n    eq_current_tmp = b_k - vlen;\r\n    if (eq_current_tmp == 0) {\r\n      c_y = 0.0;\r\n    } else {\r\n      c_y = mcu_U.SOC[vlen];\r\n      for (b_k = 2; b_k <= eq_current_tmp; b_k++) {\r\n        c_y += mcu_U.SOC[(vlen + b_k) - 1];\r\n      }\r\n    }\r\n\r\n    /* :  if(sm <= src_trg_soc_av_tmp(step_cnt) || dm >= dst_trg_soc_av_tmp(step_cnt)) */\r\n    if (RateTransition_Buffer / (real_T)i <= mcu_U.src_trg_soc_av[(int16_T)\r\n        mcu_DW.step_cnt - 1]) {\r\n      /* :  step_cnt = step_cnt + 1; */\r\n      mcu_DW.step_cnt++;\r\n    } else if (c_y / (real_T)eq_current_tmp >= dst_trg_soc_av_tmp[(int16_T)\r\n               mcu_DW.step_cnt - 1]) {\r\n      /* :  step_cnt = step_cnt + 1; */\r\n      mcu_DW.step_cnt++;\r\n    }\r\n  } else {\r\n    /* :  else */\r\n    /* :  stop_simulation  = 1; */\r\n    mcu_B.stop_simulation = 1.0;\r\n  }\r\n\r\n  /* :  step_cnt_out = step_cnt; */\r\n  mcu_B.step_cnt_out = mcu_DW.step_cnt;\r\n\r\n  /* End of MATLAB Function: '<S1>/equalizer' */\r\n\r\n  /* Stop: '<S1>/Stop Simulation' */\r\n  if (mcu_B.stop_simulation != 0.0) {\r\n    rtmSetStopRequested(mcu_M, 1);\r\n  }\r\n\r\n  /* End of Stop: '<S1>/Stop Simulation' */\r\n\r\n  /* Update for Memory: '<S1>/Memory' */\r\n  mcu_DW.Memory_PreviousInput[0] = mcu_B.destinations_batts[0];\r\n\r\n  /* Update for Memory: '<S1>/Memory1' */\r\n  mcu_DW.Memory1_PreviousInput[0] = mcu_B.source_batts[0];\r\n\r\n  /* Update for Memory: '<S1>/Memory' */\r\n  mcu_DW.Memory_PreviousInput[1] = mcu_B.destinations_batts[1];\r\n\r\n  /* Update for Memory: '<S1>/Memory1' */\r\n  mcu_DW.Memory1_PreviousInput[1] = mcu_B.source_batts[1];\r\n  rate_scheduler();\r\n}\r\n\r\n/* Model initialize function */\r\nvoid mcu_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize non-finites */\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n\r\n  /* Model Initialize function for ModelReference Block: '<S1>/Ah_estimator' */\r\n  coloumb_counting_initialize(rtmGetErrorStatusPointer(mcu_M),\r\n    &(mcu_DW.Ah_estimator_InstanceData.rtm));\r\n\r\n  /* SystemInitialize for ModelReference: '<S1>/Ah_estimator' */\r\n  coloumb_counting_Init(&(mcu_DW.Ah_estimator_InstanceData.rtdw));\r\n\r\n  /* SystemInitialize for MATLAB Function: '<S1>/equalizer' */\r\n  /* :  step_cnt = 1; */\r\n  mcu_DW.step_cnt = 1.0;\r\n\r\n  /* :  assert(1, 'Simulation terminated because x >= 10') */\r\n}\r\n\r\n/* Model terminate function */\r\nvoid mcu_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"mcu.h","type":"header","group":"model","path":"D:\\Thesis\\mcu_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: mcu.h\r\n *\r\n * Code generated for Simulink model 'mcu'.\r\n *\r\n * Model version                  : 3.20\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb 23 17:51:20 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: STMicroelectronics->ST10/Super10\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_mcu_h_\r\n#define RTW_HEADER_mcu_h_\r\n#ifndef mcu_COMMON_INCLUDES_\r\n#define mcu_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#endif                                 /* mcu_COMMON_INCLUDES_ */\r\n\r\n#include \"mcu_types.h\"\r\n#include \"coloumb_counting.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtGetInf.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatusPointer\r\n#define rtmGetErrorStatusPointer(rtm)  ((const char_T **)(&((rtm)->errorStatus)))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((rtm)->Timing.stopRequestedFlag)\r\n#endif\r\n\r\n#ifndef rtmSetStopRequested\r\n#define rtmSetStopRequested(rtm, val)  ((rtm)->Timing.stopRequestedFlag = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequestedPtr\r\n#define rtmGetStopRequestedPtr(rtm)    (&((rtm)->Timing.stopRequestedFlag))\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  real_T Memory[2];                    /* '<S1>/Memory' */\r\n  real_T Memory1[2];                   /* '<S1>/Memory1' */\r\n  real_T RateTransition[9];            /* '<S1>/Rate Transition' */\r\n  real_T RateTransition1[9];           /* '<S1>/Rate Transition1' */\r\n  real_T Ah_estimator[9];              /* '<S1>/Ah_estimator' */\r\n  real_T destinations_batts[2];        /* '<S1>/equalizer' */\r\n  real_T source_batts[2];              /* '<S1>/equalizer' */\r\n  real_T step_cnt_out;                 /* '<S1>/equalizer' */\r\n  real_T stop_simulation;              /* '<S1>/equalizer' */\r\n  real_T sw_pos;                       /* '<S1>/battery_selector' */\r\n  real_T sw_neg;                       /* '<S1>/battery_selector' */\r\n} B_mcu_T;\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T Memory_PreviousInput[2];      /* '<S1>/Memory' */\r\n  real_T Memory1_PreviousInput[2];     /* '<S1>/Memory1' */\r\n  real_T RateTransition_Buffer[9];     /* '<S1>/Rate Transition' */\r\n  real_T RateTransition1_Buffer[9];    /* '<S1>/Rate Transition1' */\r\n  real_T step_cnt;                     /* '<S1>/equalizer' */\r\n  MdlrefDW_coloumb_counting_T Ah_estimator_InstanceData;/* '<S1>/Ah_estimator' */\r\n} DW_mcu_T;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T src_q_cls[100];               /* '<Root>/src_q_cls' */\r\n  real_T dst_q_cls[100];               /* '<Root>/dst_q_cls' */\r\n  real_T src_trg_soc_av[50];           /* '<Root>/src_trg_soc_av' */\r\n  real_T dst_trg_soc_av[50];           /* '<Root>/dst_trg_soc_av' */\r\n  real_T SOC[9];                       /* '<Root>/SOC' */\r\n  real_T CAP_Ah;                       /* '<Root>/CAP_Ah' */\r\n  real_T SOC_c[9];                     /* '<Root>/SOC_init' */\r\n  real_T current[9];                   /* '<Root>/I_meas' */\r\n  real_T voltage;                      /* '<Root>/V_batt' */\r\n} ExtU_mcu_T;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T g1p;                          /* '<Root>/g1p' */\r\n  real_T g2p;                          /* '<Root>/g2p' */\r\n  real_T g3p;                          /* '<Root>/g3p' */\r\n  real_T g4p;                          /* '<Root>/g4p' */\r\n  real_T g5p;                          /* '<Root>/g5p' */\r\n  real_T g6p;                          /* '<Root>/g6p' */\r\n  real_T g7p;                          /* '<Root>/g7p' */\r\n  real_T g8p;                          /* '<Root>/g8p' */\r\n  real_T g9p;                          /* '<Root>/g9p' */\r\n  real_T g1n;                          /* '<Root>/g1n' */\r\n  real_T g2n;                          /* '<Root>/g2n' */\r\n  real_T g3n;                          /* '<Root>/g3n' */\r\n  real_T g4n;                          /* '<Root>/g4n' */\r\n  real_T g5n;                          /* '<Root>/g5n' */\r\n  real_T g6n;                          /* '<Root>/g6n' */\r\n  real_T g7n;                          /* '<Root>/g7n' */\r\n  real_T g8n;                          /* '<Root>/g8n' */\r\n  real_T g9n;                          /* '<Root>/g9n' */\r\n  real_T eq_current;                   /* '<Root>/eq_current' */\r\n} ExtY_mcu_T;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_mcu_T {\r\n  const char_T *errorStatus;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    struct {\r\n      uint32_T TID[2];\r\n    } TaskCounters;\r\n\r\n    boolean_T stopRequestedFlag;\r\n  } Timing;\r\n};\r\n\r\n/* Block signals (default storage) */\r\nextern B_mcu_T mcu_B;\r\n\r\n/* Block states (default storage) */\r\nextern DW_mcu_T mcu_DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU_mcu_T mcu_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY_mcu_T mcu_Y;\r\n\r\n/* Model entry point functions */\r\nextern void mcu_initialize(void);\r\nextern void mcu_step(void);\r\nextern void mcu_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_mcu_T *const mcu_M;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S1>/Display' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('DC_DC_source_based_matrix_switches1/mcu')    - opens subsystem DC_DC_source_based_matrix_switches1/mcu\r\n * hilite_system('DC_DC_source_based_matrix_switches1/mcu/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'DC_DC_source_based_matrix_switches1'\r\n * '<S1>'   : 'DC_DC_source_based_matrix_switches1/mcu'\r\n * '<S2>'   : 'DC_DC_source_based_matrix_switches1/mcu/battery_selector'\r\n * '<S3>'   : 'DC_DC_source_based_matrix_switches1/mcu/demux n'\r\n * '<S4>'   : 'DC_DC_source_based_matrix_switches1/mcu/demux p'\r\n * '<S5>'   : 'DC_DC_source_based_matrix_switches1/mcu/equalizer'\r\n */\r\n#endif                                 /* RTW_HEADER_mcu_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"mcu_private.h","type":"header","group":"model","path":"D:\\Thesis\\mcu_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: mcu_private.h\r\n *\r\n * Code generated for Simulink model 'mcu'.\r\n *\r\n * Model version                  : 3.20\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb 23 17:51:20 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: STMicroelectronics->ST10/Super10\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_mcu_private_h_\r\n#define RTW_HEADER_mcu_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"mcu_types.h\"\r\n#include \"mcu.h\"\r\n\r\nextern void mcu_demuxn(real_T rtu_u, real_T *rty_s1, real_T *rty_s2, real_T\r\n  *rty_s3, real_T *rty_s4, real_T *rty_s5, real_T *rty_s6, real_T *rty_s7,\r\n  real_T *rty_s8, real_T *rty_s9);\r\n\r\n#endif                                 /* RTW_HEADER_mcu_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"mcu_types.h","type":"header","group":"model","path":"D:\\Thesis\\mcu_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: mcu_types.h\r\n *\r\n * Code generated for Simulink model 'mcu'.\r\n *\r\n * Model version                  : 3.20\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb 23 17:51:20 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: STMicroelectronics->ST10/Super10\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_mcu_types_h_\r\n#define RTW_HEADER_mcu_types_h_\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_mcu_T RT_MODEL_mcu_T;\r\n\r\n#endif                                 /* RTW_HEADER_mcu_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetInf.c","type":"source","group":"sharedutility","path":"D:\\Thesis\\slprj\\ert\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\r\n * File: rtGetInf.c\r\n *\r\n * Code generated for Simulink model 'DC_DC_source_based_matrix_switches1'.\r\n *\r\n * Model version                  : 3.20\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb 23 17:03:32 2024\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rtGetInf.h\"\r\n#include <stddef.h>\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\n/*\r\n * Initialize rtInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T inf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    inf = rtGetInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    inf = tmpVal.fltVal;\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\n/*\r\n * Initialize rtInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetInfF(void)\r\n{\r\n  IEEESingle infF;\r\n  infF.wordL.wordLuint = 0x7F800000U;\r\n  return infF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetMinusInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T minf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    minf = rtGetMinusInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    minf = tmpVal.fltVal;\r\n  }\r\n\r\n  return minf;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetMinusInfF(void)\r\n{\r\n  IEEESingle minfF;\r\n  minfF.wordL.wordLuint = 0xFF800000U;\r\n  return minfF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetInf.h","type":"header","group":"sharedutility","path":"D:\\Thesis\\slprj\\ert\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\r\n * File: rtGetInf.h\r\n *\r\n * Code generated for Simulink model 'DC_DC_source_based_matrix_switches1'.\r\n *\r\n * Model version                  : 3.20\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb 23 17:03:32 2024\r\n */\r\n\r\n#ifndef RTW_HEADER_rtGetInf_h_\r\n#define RTW_HEADER_rtGetInf_h_\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtGetInf(void);\r\nextern real32_T rtGetInfF(void);\r\nextern real_T rtGetMinusInf(void);\r\nextern real32_T rtGetMinusInfF(void);\r\n\r\n#endif                                 /* RTW_HEADER_rtGetInf_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetNaN.c","type":"source","group":"sharedutility","path":"D:\\Thesis\\slprj\\ert\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\r\n * File: rtGetNaN.c\r\n *\r\n * Code generated for Simulink model 'DC_DC_source_based_matrix_switches1'.\r\n *\r\n * Model version                  : 3.20\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb 23 17:03:32 2024\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rtGetNaN.h\"\r\n#include <stddef.h>\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\n/*\r\n * Initialize rtNaN needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetNaN(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T nan = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    nan = rtGetNaNF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    nan = tmpVal.fltVal;\r\n  }\r\n\r\n  return nan;\r\n}\r\n\r\n/*\r\n * Initialize rtNaNF needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetNaNF(void)\r\n{\r\n  IEEESingle nanF = { { 0.0F } };\r\n\r\n  nanF.wordL.wordLuint = 0xFFC00000U;\r\n  return nanF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetNaN.h","type":"header","group":"sharedutility","path":"D:\\Thesis\\slprj\\ert\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\r\n * File: rtGetNaN.h\r\n *\r\n * Code generated for Simulink model 'DC_DC_source_based_matrix_switches1'.\r\n *\r\n * Model version                  : 3.20\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb 23 17:03:32 2024\r\n */\r\n\r\n#ifndef RTW_HEADER_rtGetNaN_h_\r\n#define RTW_HEADER_rtGetNaN_h_\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtGetNaN(void);\r\nextern real32_T rtGetNaNF(void);\r\n\r\n#endif                                 /* RTW_HEADER_rtGetNaN_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rt_nonfinite.c","type":"source","group":"sharedutility","path":"D:\\Thesis\\slprj\\ert\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\r\n * File: rt_nonfinite.c\r\n *\r\n * Code generated for Simulink model 'DC_DC_source_based_matrix_switches1'.\r\n *\r\n * Model version                  : 3.20\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb 23 17:03:32 2024\r\n */\r\n\r\n#include \"rtGetNaN.h\"\r\n#include \"rtGetInf.h\"\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\nreal_T rtInf;\r\nreal_T rtMinusInf;\r\nreal_T rtNaN;\r\nreal32_T rtInfF;\r\nreal32_T rtMinusInfF;\r\nreal32_T rtNaNF;\r\n\r\n/*\r\n * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n * generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nvoid rt_InitInfAndNaN(size_t realSize)\r\n{\r\n  (void) (realSize);\r\n  rtNaN = rtGetNaN();\r\n  rtNaNF = rtGetNaNF();\r\n  rtInf = rtGetInf();\r\n  rtInfF = rtGetInfF();\r\n  rtMinusInf = rtGetMinusInf();\r\n  rtMinusInfF = rtGetMinusInfF();\r\n}\r\n\r\n/* Test if value is infinite */\r\nboolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nboolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nboolean_T rtIsNaN(real_T value)\r\n{\r\n  boolean_T result = (boolean_T) 0;\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  if (bitsPerReal == 32U) {\r\n    result = rtIsNaNF((real32_T)value);\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.fltVal = value;\r\n    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\r\n                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                          (tmpVal.bitVal.words.wordL != 0) ));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nboolean_T rtIsNaNF(real32_T value)\r\n{\r\n  IEEESingle tmp;\r\n  tmp.wordL.wordLreal = value;\r\n  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rt_nonfinite.h","type":"header","group":"sharedutility","path":"D:\\Thesis\\slprj\\ert\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\r\n * File: rt_nonfinite.h\r\n *\r\n * Code generated for Simulink model 'DC_DC_source_based_matrix_switches1'.\r\n *\r\n * Model version                  : 3.20\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb 23 17:03:32 2024\r\n */\r\n\r\n#ifndef RTW_HEADER_rt_nonfinite_h_\r\n#define RTW_HEADER_rt_nonfinite_h_\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n#define NOT_USING_NONFINITE_LITERALS   1\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nextern void rt_InitInfAndNaN(size_t realSize);\r\nextern boolean_T rtIsInf(real_T value);\r\nextern boolean_T rtIsInfF(real32_T value);\r\nextern boolean_T rtIsNaN(real_T value);\r\nextern boolean_T rtIsNaNF(real32_T value);\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordH;\r\n    uint32_T wordL;\r\n  } words;\r\n} BigEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordL;\r\n    uint32_T wordH;\r\n  } words;\r\n} LittleEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  union {\r\n    real32_T wordLreal;\r\n    uint32_T wordLuint;\r\n  } wordL;\r\n} IEEESingle;\r\n\r\n#endif                                 /* RTW_HEADER_rt_nonfinite_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"sharedutility","path":"D:\\Thesis\\slprj\\ert\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'coloumb_counting'.\r\n *\r\n * Model version                  : 1.11\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb 23 16:37:12 2024\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: STMicroelectronics->ST10/Super10\r\n *   Number of bits:     char:   8    short:   16    int:  16\r\n *                       long:  32\r\n *                       native word size:  16\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef int int16_T;\r\ntypedef unsigned int uint16_T;\r\ntypedef long int32_T;\r\ntypedef unsigned long uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647L))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647L-1L))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFUL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};